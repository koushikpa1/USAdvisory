//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3603
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace DStreet.USAdvisory.Business {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("USAdvisoryDataSet")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class USAdvisoryDataSet : global::System.Data.DataSet {
        
        private AdminCredentialsDataTable tableAdminCredentials;
        
        private BuyOrSellLookUpDataTable tableBuyOrSellLookUp;
        
        private EmailNewsletterDataTable tableEmailNewsletter;
        
        private EmailSentDataTable tableEmailSent;
        
        private MarketCommentaryDataTable tableMarketCommentary;
        
        private NewsAndViewsDataTable tableNewsAndViews;
        
        private OrdersDataTable tableOrders;
        
        private PortfolioLookUpDataTable tablePortfolioLookUp;
        
        private PortfolioTransactionsDataTable tablePortfolioTransactions;
        
        private PremiumServicesDataTable tablePremiumServices;
        
        private RecommendationsDataTable tableRecommendations;
        
        private SubscriptionDataTable tableSubscription;
        
        private SubscriptionLookUpDataTable tableSubscriptionLookUp;
        
        private TradeTypesDataTable tableTradeTypes;
        
        private UsersDataTable tableUsers;
        
        private WatchOutDataTable tableWatchOut;
        
        private GetAllClosedPortfolioDataTable tableGetAllClosedPortfolio;
        
        private GetAllEmailAddressDataTable tableGetAllEmailAddress;
        
        private GetAllEmailToSendDataTable tableGetAllEmailToSend;
        
        private GetAllMarketCommentariesDataTable tableGetAllMarketCommentaries;
        
        private GetAllNewsAndViewsDataTable tableGetAllNewsAndViews;
        
        private GetAllOpenPortfolioDataTable tableGetAllOpenPortfolio;
        
        private GetAllOrdersDataTable tableGetAllOrders;
        
        private GetAllPortfolioDataTable tableGetAllPortfolio;
        
        private GetAllUsersDataTable tableGetAllUsers;
        
        private GetAllWatchOutNewsDataTable tableGetAllWatchOutNews;
        
        private GetEmailBySendEmailIdDataTable tableGetEmailBySendEmailId;
        
        private GetMarketCommentaryByArticleDataTable tableGetMarketCommentaryByArticle;
        
        private GetNewsAndViewsByArticleDataTable tableGetNewsAndViewsByArticle;
        
        private GetOrdesrByUserIdOrderIdDataTable tableGetOrdesrByUserIdOrderId;
        
        private GetPortfolioByTransactionIdDataTable tableGetPortfolioByTransactionId;
        
        private GetPremiumServiceByArticleDataTable tableGetPremiumServiceByArticle;
        
        private GetPremiumServicesDataTable tableGetPremiumServices;
        
        private GetUserByUserIdDataTable tableGetUserByUserId;
        
        private GetWatchOutNewsByArticleDataTable tableGetWatchOutNewsByArticle;
        
        private UI_GetAllMarketCommentaryForTodayDataTable tableUI_GetAllMarketCommentaryForToday;
        
        private UI_GetAllNewsViewsDataTable tableUI_GetAllNewsViews;
        
        private UI_GetAllWatchOutNewsForTodayDataTable tableUI_GetAllWatchOutNewsForToday;
        
        private UI_GetNewsViewsByNewsIdDataTable tableUI_GetNewsViewsByNewsId;
        
        private UI_GetPremiumServicesDataTable tableUI_GetPremiumServices;
        
        private UI_GetPremiumServicesByPremiumServiceIdDataTable tableUI_GetPremiumServicesByPremiumServiceId;
        
        private UI_GetUserCredentialsDataTable tableUI_GetUserCredentials;
        
        private global::System.Data.DataRelation relationFK_Orders_SubscriptionLookUp;
        
        private global::System.Data.DataRelation relationFK_Orders_Users;
        
        private global::System.Data.DataRelation relationFK_PremiumServices_TradeTypes;
        
        private global::System.Data.DataRelation relationFK_Recommendations_BuyOrSellLookUp;
        
        private global::System.Data.DataRelation relationFK_Recommendations_TradeTypes;
        
        private global::System.Data.DataRelation relationFK_Subscription_Users;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public USAdvisoryDataSet() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected USAdvisoryDataSet(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["AdminCredentials"] != null)) {
                    base.Tables.Add(new AdminCredentialsDataTable(ds.Tables["AdminCredentials"]));
                }
                if ((ds.Tables["BuyOrSellLookUp"] != null)) {
                    base.Tables.Add(new BuyOrSellLookUpDataTable(ds.Tables["BuyOrSellLookUp"]));
                }
                if ((ds.Tables["EmailNewsletter"] != null)) {
                    base.Tables.Add(new EmailNewsletterDataTable(ds.Tables["EmailNewsletter"]));
                }
                if ((ds.Tables["EmailSent"] != null)) {
                    base.Tables.Add(new EmailSentDataTable(ds.Tables["EmailSent"]));
                }
                if ((ds.Tables["MarketCommentary"] != null)) {
                    base.Tables.Add(new MarketCommentaryDataTable(ds.Tables["MarketCommentary"]));
                }
                if ((ds.Tables["NewsAndViews"] != null)) {
                    base.Tables.Add(new NewsAndViewsDataTable(ds.Tables["NewsAndViews"]));
                }
                if ((ds.Tables["Orders"] != null)) {
                    base.Tables.Add(new OrdersDataTable(ds.Tables["Orders"]));
                }
                if ((ds.Tables["PortfolioLookUp"] != null)) {
                    base.Tables.Add(new PortfolioLookUpDataTable(ds.Tables["PortfolioLookUp"]));
                }
                if ((ds.Tables["PortfolioTransactions"] != null)) {
                    base.Tables.Add(new PortfolioTransactionsDataTable(ds.Tables["PortfolioTransactions"]));
                }
                if ((ds.Tables["PremiumServices"] != null)) {
                    base.Tables.Add(new PremiumServicesDataTable(ds.Tables["PremiumServices"]));
                }
                if ((ds.Tables["Recommendations"] != null)) {
                    base.Tables.Add(new RecommendationsDataTable(ds.Tables["Recommendations"]));
                }
                if ((ds.Tables["Subscription"] != null)) {
                    base.Tables.Add(new SubscriptionDataTable(ds.Tables["Subscription"]));
                }
                if ((ds.Tables["SubscriptionLookUp"] != null)) {
                    base.Tables.Add(new SubscriptionLookUpDataTable(ds.Tables["SubscriptionLookUp"]));
                }
                if ((ds.Tables["TradeTypes"] != null)) {
                    base.Tables.Add(new TradeTypesDataTable(ds.Tables["TradeTypes"]));
                }
                if ((ds.Tables["Users"] != null)) {
                    base.Tables.Add(new UsersDataTable(ds.Tables["Users"]));
                }
                if ((ds.Tables["WatchOut"] != null)) {
                    base.Tables.Add(new WatchOutDataTable(ds.Tables["WatchOut"]));
                }
                if ((ds.Tables["GetAllClosedPortfolio"] != null)) {
                    base.Tables.Add(new GetAllClosedPortfolioDataTable(ds.Tables["GetAllClosedPortfolio"]));
                }
                if ((ds.Tables["GetAllEmailAddress"] != null)) {
                    base.Tables.Add(new GetAllEmailAddressDataTable(ds.Tables["GetAllEmailAddress"]));
                }
                if ((ds.Tables["GetAllEmailToSend"] != null)) {
                    base.Tables.Add(new GetAllEmailToSendDataTable(ds.Tables["GetAllEmailToSend"]));
                }
                if ((ds.Tables["GetAllMarketCommentaries"] != null)) {
                    base.Tables.Add(new GetAllMarketCommentariesDataTable(ds.Tables["GetAllMarketCommentaries"]));
                }
                if ((ds.Tables["GetAllNewsAndViews"] != null)) {
                    base.Tables.Add(new GetAllNewsAndViewsDataTable(ds.Tables["GetAllNewsAndViews"]));
                }
                if ((ds.Tables["GetAllOpenPortfolio"] != null)) {
                    base.Tables.Add(new GetAllOpenPortfolioDataTable(ds.Tables["GetAllOpenPortfolio"]));
                }
                if ((ds.Tables["GetAllOrders"] != null)) {
                    base.Tables.Add(new GetAllOrdersDataTable(ds.Tables["GetAllOrders"]));
                }
                if ((ds.Tables["GetAllPortfolio"] != null)) {
                    base.Tables.Add(new GetAllPortfolioDataTable(ds.Tables["GetAllPortfolio"]));
                }
                if ((ds.Tables["GetAllUsers"] != null)) {
                    base.Tables.Add(new GetAllUsersDataTable(ds.Tables["GetAllUsers"]));
                }
                if ((ds.Tables["GetAllWatchOutNews"] != null)) {
                    base.Tables.Add(new GetAllWatchOutNewsDataTable(ds.Tables["GetAllWatchOutNews"]));
                }
                if ((ds.Tables["GetEmailBySendEmailId"] != null)) {
                    base.Tables.Add(new GetEmailBySendEmailIdDataTable(ds.Tables["GetEmailBySendEmailId"]));
                }
                if ((ds.Tables["GetMarketCommentaryByArticle"] != null)) {
                    base.Tables.Add(new GetMarketCommentaryByArticleDataTable(ds.Tables["GetMarketCommentaryByArticle"]));
                }
                if ((ds.Tables["GetNewsAndViewsByArticle"] != null)) {
                    base.Tables.Add(new GetNewsAndViewsByArticleDataTable(ds.Tables["GetNewsAndViewsByArticle"]));
                }
                if ((ds.Tables["GetOrdesrByUserIdOrderId"] != null)) {
                    base.Tables.Add(new GetOrdesrByUserIdOrderIdDataTable(ds.Tables["GetOrdesrByUserIdOrderId"]));
                }
                if ((ds.Tables["GetPortfolioByTransactionId"] != null)) {
                    base.Tables.Add(new GetPortfolioByTransactionIdDataTable(ds.Tables["GetPortfolioByTransactionId"]));
                }
                if ((ds.Tables["GetPremiumServiceByArticle"] != null)) {
                    base.Tables.Add(new GetPremiumServiceByArticleDataTable(ds.Tables["GetPremiumServiceByArticle"]));
                }
                if ((ds.Tables["GetPremiumServices"] != null)) {
                    base.Tables.Add(new GetPremiumServicesDataTable(ds.Tables["GetPremiumServices"]));
                }
                if ((ds.Tables["GetUserByUserId"] != null)) {
                    base.Tables.Add(new GetUserByUserIdDataTable(ds.Tables["GetUserByUserId"]));
                }
                if ((ds.Tables["GetWatchOutNewsByArticle"] != null)) {
                    base.Tables.Add(new GetWatchOutNewsByArticleDataTable(ds.Tables["GetWatchOutNewsByArticle"]));
                }
                if ((ds.Tables["UI_GetAllMarketCommentaryForToday"] != null)) {
                    base.Tables.Add(new UI_GetAllMarketCommentaryForTodayDataTable(ds.Tables["UI_GetAllMarketCommentaryForToday"]));
                }
                if ((ds.Tables["UI_GetAllNewsViews"] != null)) {
                    base.Tables.Add(new UI_GetAllNewsViewsDataTable(ds.Tables["UI_GetAllNewsViews"]));
                }
                if ((ds.Tables["UI_GetAllWatchOutNewsForToday"] != null)) {
                    base.Tables.Add(new UI_GetAllWatchOutNewsForTodayDataTable(ds.Tables["UI_GetAllWatchOutNewsForToday"]));
                }
                if ((ds.Tables["UI_GetNewsViewsByNewsId"] != null)) {
                    base.Tables.Add(new UI_GetNewsViewsByNewsIdDataTable(ds.Tables["UI_GetNewsViewsByNewsId"]));
                }
                if ((ds.Tables["UI_GetPremiumServices"] != null)) {
                    base.Tables.Add(new UI_GetPremiumServicesDataTable(ds.Tables["UI_GetPremiumServices"]));
                }
                if ((ds.Tables["UI_GetPremiumServicesByPremiumServiceId"] != null)) {
                    base.Tables.Add(new UI_GetPremiumServicesByPremiumServiceIdDataTable(ds.Tables["UI_GetPremiumServicesByPremiumServiceId"]));
                }
                if ((ds.Tables["UI_GetUserCredentials"] != null)) {
                    base.Tables.Add(new UI_GetUserCredentialsDataTable(ds.Tables["UI_GetUserCredentials"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public AdminCredentialsDataTable AdminCredentials {
            get {
                return this.tableAdminCredentials;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public BuyOrSellLookUpDataTable BuyOrSellLookUp {
            get {
                return this.tableBuyOrSellLookUp;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public EmailNewsletterDataTable EmailNewsletter {
            get {
                return this.tableEmailNewsletter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public EmailSentDataTable EmailSent {
            get {
                return this.tableEmailSent;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public MarketCommentaryDataTable MarketCommentary {
            get {
                return this.tableMarketCommentary;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public NewsAndViewsDataTable NewsAndViews {
            get {
                return this.tableNewsAndViews;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public OrdersDataTable Orders {
            get {
                return this.tableOrders;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public PortfolioLookUpDataTable PortfolioLookUp {
            get {
                return this.tablePortfolioLookUp;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public PortfolioTransactionsDataTable PortfolioTransactions {
            get {
                return this.tablePortfolioTransactions;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public PremiumServicesDataTable PremiumServices {
            get {
                return this.tablePremiumServices;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public RecommendationsDataTable Recommendations {
            get {
                return this.tableRecommendations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SubscriptionDataTable Subscription {
            get {
                return this.tableSubscription;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SubscriptionLookUpDataTable SubscriptionLookUp {
            get {
                return this.tableSubscriptionLookUp;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public TradeTypesDataTable TradeTypes {
            get {
                return this.tableTradeTypes;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public UsersDataTable Users {
            get {
                return this.tableUsers;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public WatchOutDataTable WatchOut {
            get {
                return this.tableWatchOut;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public GetAllClosedPortfolioDataTable GetAllClosedPortfolio {
            get {
                return this.tableGetAllClosedPortfolio;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public GetAllEmailAddressDataTable GetAllEmailAddress {
            get {
                return this.tableGetAllEmailAddress;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public GetAllEmailToSendDataTable GetAllEmailToSend {
            get {
                return this.tableGetAllEmailToSend;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public GetAllMarketCommentariesDataTable GetAllMarketCommentaries {
            get {
                return this.tableGetAllMarketCommentaries;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public GetAllNewsAndViewsDataTable GetAllNewsAndViews {
            get {
                return this.tableGetAllNewsAndViews;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public GetAllOpenPortfolioDataTable GetAllOpenPortfolio {
            get {
                return this.tableGetAllOpenPortfolio;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public GetAllOrdersDataTable GetAllOrders {
            get {
                return this.tableGetAllOrders;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public GetAllPortfolioDataTable GetAllPortfolio {
            get {
                return this.tableGetAllPortfolio;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public GetAllUsersDataTable GetAllUsers {
            get {
                return this.tableGetAllUsers;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public GetAllWatchOutNewsDataTable GetAllWatchOutNews {
            get {
                return this.tableGetAllWatchOutNews;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public GetEmailBySendEmailIdDataTable GetEmailBySendEmailId {
            get {
                return this.tableGetEmailBySendEmailId;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public GetMarketCommentaryByArticleDataTable GetMarketCommentaryByArticle {
            get {
                return this.tableGetMarketCommentaryByArticle;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public GetNewsAndViewsByArticleDataTable GetNewsAndViewsByArticle {
            get {
                return this.tableGetNewsAndViewsByArticle;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public GetOrdesrByUserIdOrderIdDataTable GetOrdesrByUserIdOrderId {
            get {
                return this.tableGetOrdesrByUserIdOrderId;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public GetPortfolioByTransactionIdDataTable GetPortfolioByTransactionId {
            get {
                return this.tableGetPortfolioByTransactionId;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public GetPremiumServiceByArticleDataTable GetPremiumServiceByArticle {
            get {
                return this.tableGetPremiumServiceByArticle;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public GetPremiumServicesDataTable GetPremiumServices {
            get {
                return this.tableGetPremiumServices;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public GetUserByUserIdDataTable GetUserByUserId {
            get {
                return this.tableGetUserByUserId;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public GetWatchOutNewsByArticleDataTable GetWatchOutNewsByArticle {
            get {
                return this.tableGetWatchOutNewsByArticle;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public UI_GetAllMarketCommentaryForTodayDataTable UI_GetAllMarketCommentaryForToday {
            get {
                return this.tableUI_GetAllMarketCommentaryForToday;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public UI_GetAllNewsViewsDataTable UI_GetAllNewsViews {
            get {
                return this.tableUI_GetAllNewsViews;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public UI_GetAllWatchOutNewsForTodayDataTable UI_GetAllWatchOutNewsForToday {
            get {
                return this.tableUI_GetAllWatchOutNewsForToday;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public UI_GetNewsViewsByNewsIdDataTable UI_GetNewsViewsByNewsId {
            get {
                return this.tableUI_GetNewsViewsByNewsId;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public UI_GetPremiumServicesDataTable UI_GetPremiumServices {
            get {
                return this.tableUI_GetPremiumServices;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public UI_GetPremiumServicesByPremiumServiceIdDataTable UI_GetPremiumServicesByPremiumServiceId {
            get {
                return this.tableUI_GetPremiumServicesByPremiumServiceId;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public UI_GetUserCredentialsDataTable UI_GetUserCredentials {
            get {
                return this.tableUI_GetUserCredentials;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            USAdvisoryDataSet cln = ((USAdvisoryDataSet)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["AdminCredentials"] != null)) {
                    base.Tables.Add(new AdminCredentialsDataTable(ds.Tables["AdminCredentials"]));
                }
                if ((ds.Tables["BuyOrSellLookUp"] != null)) {
                    base.Tables.Add(new BuyOrSellLookUpDataTable(ds.Tables["BuyOrSellLookUp"]));
                }
                if ((ds.Tables["EmailNewsletter"] != null)) {
                    base.Tables.Add(new EmailNewsletterDataTable(ds.Tables["EmailNewsletter"]));
                }
                if ((ds.Tables["EmailSent"] != null)) {
                    base.Tables.Add(new EmailSentDataTable(ds.Tables["EmailSent"]));
                }
                if ((ds.Tables["MarketCommentary"] != null)) {
                    base.Tables.Add(new MarketCommentaryDataTable(ds.Tables["MarketCommentary"]));
                }
                if ((ds.Tables["NewsAndViews"] != null)) {
                    base.Tables.Add(new NewsAndViewsDataTable(ds.Tables["NewsAndViews"]));
                }
                if ((ds.Tables["Orders"] != null)) {
                    base.Tables.Add(new OrdersDataTable(ds.Tables["Orders"]));
                }
                if ((ds.Tables["PortfolioLookUp"] != null)) {
                    base.Tables.Add(new PortfolioLookUpDataTable(ds.Tables["PortfolioLookUp"]));
                }
                if ((ds.Tables["PortfolioTransactions"] != null)) {
                    base.Tables.Add(new PortfolioTransactionsDataTable(ds.Tables["PortfolioTransactions"]));
                }
                if ((ds.Tables["PremiumServices"] != null)) {
                    base.Tables.Add(new PremiumServicesDataTable(ds.Tables["PremiumServices"]));
                }
                if ((ds.Tables["Recommendations"] != null)) {
                    base.Tables.Add(new RecommendationsDataTable(ds.Tables["Recommendations"]));
                }
                if ((ds.Tables["Subscription"] != null)) {
                    base.Tables.Add(new SubscriptionDataTable(ds.Tables["Subscription"]));
                }
                if ((ds.Tables["SubscriptionLookUp"] != null)) {
                    base.Tables.Add(new SubscriptionLookUpDataTable(ds.Tables["SubscriptionLookUp"]));
                }
                if ((ds.Tables["TradeTypes"] != null)) {
                    base.Tables.Add(new TradeTypesDataTable(ds.Tables["TradeTypes"]));
                }
                if ((ds.Tables["Users"] != null)) {
                    base.Tables.Add(new UsersDataTable(ds.Tables["Users"]));
                }
                if ((ds.Tables["WatchOut"] != null)) {
                    base.Tables.Add(new WatchOutDataTable(ds.Tables["WatchOut"]));
                }
                if ((ds.Tables["GetAllClosedPortfolio"] != null)) {
                    base.Tables.Add(new GetAllClosedPortfolioDataTable(ds.Tables["GetAllClosedPortfolio"]));
                }
                if ((ds.Tables["GetAllEmailAddress"] != null)) {
                    base.Tables.Add(new GetAllEmailAddressDataTable(ds.Tables["GetAllEmailAddress"]));
                }
                if ((ds.Tables["GetAllEmailToSend"] != null)) {
                    base.Tables.Add(new GetAllEmailToSendDataTable(ds.Tables["GetAllEmailToSend"]));
                }
                if ((ds.Tables["GetAllMarketCommentaries"] != null)) {
                    base.Tables.Add(new GetAllMarketCommentariesDataTable(ds.Tables["GetAllMarketCommentaries"]));
                }
                if ((ds.Tables["GetAllNewsAndViews"] != null)) {
                    base.Tables.Add(new GetAllNewsAndViewsDataTable(ds.Tables["GetAllNewsAndViews"]));
                }
                if ((ds.Tables["GetAllOpenPortfolio"] != null)) {
                    base.Tables.Add(new GetAllOpenPortfolioDataTable(ds.Tables["GetAllOpenPortfolio"]));
                }
                if ((ds.Tables["GetAllOrders"] != null)) {
                    base.Tables.Add(new GetAllOrdersDataTable(ds.Tables["GetAllOrders"]));
                }
                if ((ds.Tables["GetAllPortfolio"] != null)) {
                    base.Tables.Add(new GetAllPortfolioDataTable(ds.Tables["GetAllPortfolio"]));
                }
                if ((ds.Tables["GetAllUsers"] != null)) {
                    base.Tables.Add(new GetAllUsersDataTable(ds.Tables["GetAllUsers"]));
                }
                if ((ds.Tables["GetAllWatchOutNews"] != null)) {
                    base.Tables.Add(new GetAllWatchOutNewsDataTable(ds.Tables["GetAllWatchOutNews"]));
                }
                if ((ds.Tables["GetEmailBySendEmailId"] != null)) {
                    base.Tables.Add(new GetEmailBySendEmailIdDataTable(ds.Tables["GetEmailBySendEmailId"]));
                }
                if ((ds.Tables["GetMarketCommentaryByArticle"] != null)) {
                    base.Tables.Add(new GetMarketCommentaryByArticleDataTable(ds.Tables["GetMarketCommentaryByArticle"]));
                }
                if ((ds.Tables["GetNewsAndViewsByArticle"] != null)) {
                    base.Tables.Add(new GetNewsAndViewsByArticleDataTable(ds.Tables["GetNewsAndViewsByArticle"]));
                }
                if ((ds.Tables["GetOrdesrByUserIdOrderId"] != null)) {
                    base.Tables.Add(new GetOrdesrByUserIdOrderIdDataTable(ds.Tables["GetOrdesrByUserIdOrderId"]));
                }
                if ((ds.Tables["GetPortfolioByTransactionId"] != null)) {
                    base.Tables.Add(new GetPortfolioByTransactionIdDataTable(ds.Tables["GetPortfolioByTransactionId"]));
                }
                if ((ds.Tables["GetPremiumServiceByArticle"] != null)) {
                    base.Tables.Add(new GetPremiumServiceByArticleDataTable(ds.Tables["GetPremiumServiceByArticle"]));
                }
                if ((ds.Tables["GetPremiumServices"] != null)) {
                    base.Tables.Add(new GetPremiumServicesDataTable(ds.Tables["GetPremiumServices"]));
                }
                if ((ds.Tables["GetUserByUserId"] != null)) {
                    base.Tables.Add(new GetUserByUserIdDataTable(ds.Tables["GetUserByUserId"]));
                }
                if ((ds.Tables["GetWatchOutNewsByArticle"] != null)) {
                    base.Tables.Add(new GetWatchOutNewsByArticleDataTable(ds.Tables["GetWatchOutNewsByArticle"]));
                }
                if ((ds.Tables["UI_GetAllMarketCommentaryForToday"] != null)) {
                    base.Tables.Add(new UI_GetAllMarketCommentaryForTodayDataTable(ds.Tables["UI_GetAllMarketCommentaryForToday"]));
                }
                if ((ds.Tables["UI_GetAllNewsViews"] != null)) {
                    base.Tables.Add(new UI_GetAllNewsViewsDataTable(ds.Tables["UI_GetAllNewsViews"]));
                }
                if ((ds.Tables["UI_GetAllWatchOutNewsForToday"] != null)) {
                    base.Tables.Add(new UI_GetAllWatchOutNewsForTodayDataTable(ds.Tables["UI_GetAllWatchOutNewsForToday"]));
                }
                if ((ds.Tables["UI_GetNewsViewsByNewsId"] != null)) {
                    base.Tables.Add(new UI_GetNewsViewsByNewsIdDataTable(ds.Tables["UI_GetNewsViewsByNewsId"]));
                }
                if ((ds.Tables["UI_GetPremiumServices"] != null)) {
                    base.Tables.Add(new UI_GetPremiumServicesDataTable(ds.Tables["UI_GetPremiumServices"]));
                }
                if ((ds.Tables["UI_GetPremiumServicesByPremiumServiceId"] != null)) {
                    base.Tables.Add(new UI_GetPremiumServicesByPremiumServiceIdDataTable(ds.Tables["UI_GetPremiumServicesByPremiumServiceId"]));
                }
                if ((ds.Tables["UI_GetUserCredentials"] != null)) {
                    base.Tables.Add(new UI_GetUserCredentialsDataTable(ds.Tables["UI_GetUserCredentials"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableAdminCredentials = ((AdminCredentialsDataTable)(base.Tables["AdminCredentials"]));
            if ((initTable == true)) {
                if ((this.tableAdminCredentials != null)) {
                    this.tableAdminCredentials.InitVars();
                }
            }
            this.tableBuyOrSellLookUp = ((BuyOrSellLookUpDataTable)(base.Tables["BuyOrSellLookUp"]));
            if ((initTable == true)) {
                if ((this.tableBuyOrSellLookUp != null)) {
                    this.tableBuyOrSellLookUp.InitVars();
                }
            }
            this.tableEmailNewsletter = ((EmailNewsletterDataTable)(base.Tables["EmailNewsletter"]));
            if ((initTable == true)) {
                if ((this.tableEmailNewsletter != null)) {
                    this.tableEmailNewsletter.InitVars();
                }
            }
            this.tableEmailSent = ((EmailSentDataTable)(base.Tables["EmailSent"]));
            if ((initTable == true)) {
                if ((this.tableEmailSent != null)) {
                    this.tableEmailSent.InitVars();
                }
            }
            this.tableMarketCommentary = ((MarketCommentaryDataTable)(base.Tables["MarketCommentary"]));
            if ((initTable == true)) {
                if ((this.tableMarketCommentary != null)) {
                    this.tableMarketCommentary.InitVars();
                }
            }
            this.tableNewsAndViews = ((NewsAndViewsDataTable)(base.Tables["NewsAndViews"]));
            if ((initTable == true)) {
                if ((this.tableNewsAndViews != null)) {
                    this.tableNewsAndViews.InitVars();
                }
            }
            this.tableOrders = ((OrdersDataTable)(base.Tables["Orders"]));
            if ((initTable == true)) {
                if ((this.tableOrders != null)) {
                    this.tableOrders.InitVars();
                }
            }
            this.tablePortfolioLookUp = ((PortfolioLookUpDataTable)(base.Tables["PortfolioLookUp"]));
            if ((initTable == true)) {
                if ((this.tablePortfolioLookUp != null)) {
                    this.tablePortfolioLookUp.InitVars();
                }
            }
            this.tablePortfolioTransactions = ((PortfolioTransactionsDataTable)(base.Tables["PortfolioTransactions"]));
            if ((initTable == true)) {
                if ((this.tablePortfolioTransactions != null)) {
                    this.tablePortfolioTransactions.InitVars();
                }
            }
            this.tablePremiumServices = ((PremiumServicesDataTable)(base.Tables["PremiumServices"]));
            if ((initTable == true)) {
                if ((this.tablePremiumServices != null)) {
                    this.tablePremiumServices.InitVars();
                }
            }
            this.tableRecommendations = ((RecommendationsDataTable)(base.Tables["Recommendations"]));
            if ((initTable == true)) {
                if ((this.tableRecommendations != null)) {
                    this.tableRecommendations.InitVars();
                }
            }
            this.tableSubscription = ((SubscriptionDataTable)(base.Tables["Subscription"]));
            if ((initTable == true)) {
                if ((this.tableSubscription != null)) {
                    this.tableSubscription.InitVars();
                }
            }
            this.tableSubscriptionLookUp = ((SubscriptionLookUpDataTable)(base.Tables["SubscriptionLookUp"]));
            if ((initTable == true)) {
                if ((this.tableSubscriptionLookUp != null)) {
                    this.tableSubscriptionLookUp.InitVars();
                }
            }
            this.tableTradeTypes = ((TradeTypesDataTable)(base.Tables["TradeTypes"]));
            if ((initTable == true)) {
                if ((this.tableTradeTypes != null)) {
                    this.tableTradeTypes.InitVars();
                }
            }
            this.tableUsers = ((UsersDataTable)(base.Tables["Users"]));
            if ((initTable == true)) {
                if ((this.tableUsers != null)) {
                    this.tableUsers.InitVars();
                }
            }
            this.tableWatchOut = ((WatchOutDataTable)(base.Tables["WatchOut"]));
            if ((initTable == true)) {
                if ((this.tableWatchOut != null)) {
                    this.tableWatchOut.InitVars();
                }
            }
            this.tableGetAllClosedPortfolio = ((GetAllClosedPortfolioDataTable)(base.Tables["GetAllClosedPortfolio"]));
            if ((initTable == true)) {
                if ((this.tableGetAllClosedPortfolio != null)) {
                    this.tableGetAllClosedPortfolio.InitVars();
                }
            }
            this.tableGetAllEmailAddress = ((GetAllEmailAddressDataTable)(base.Tables["GetAllEmailAddress"]));
            if ((initTable == true)) {
                if ((this.tableGetAllEmailAddress != null)) {
                    this.tableGetAllEmailAddress.InitVars();
                }
            }
            this.tableGetAllEmailToSend = ((GetAllEmailToSendDataTable)(base.Tables["GetAllEmailToSend"]));
            if ((initTable == true)) {
                if ((this.tableGetAllEmailToSend != null)) {
                    this.tableGetAllEmailToSend.InitVars();
                }
            }
            this.tableGetAllMarketCommentaries = ((GetAllMarketCommentariesDataTable)(base.Tables["GetAllMarketCommentaries"]));
            if ((initTable == true)) {
                if ((this.tableGetAllMarketCommentaries != null)) {
                    this.tableGetAllMarketCommentaries.InitVars();
                }
            }
            this.tableGetAllNewsAndViews = ((GetAllNewsAndViewsDataTable)(base.Tables["GetAllNewsAndViews"]));
            if ((initTable == true)) {
                if ((this.tableGetAllNewsAndViews != null)) {
                    this.tableGetAllNewsAndViews.InitVars();
                }
            }
            this.tableGetAllOpenPortfolio = ((GetAllOpenPortfolioDataTable)(base.Tables["GetAllOpenPortfolio"]));
            if ((initTable == true)) {
                if ((this.tableGetAllOpenPortfolio != null)) {
                    this.tableGetAllOpenPortfolio.InitVars();
                }
            }
            this.tableGetAllOrders = ((GetAllOrdersDataTable)(base.Tables["GetAllOrders"]));
            if ((initTable == true)) {
                if ((this.tableGetAllOrders != null)) {
                    this.tableGetAllOrders.InitVars();
                }
            }
            this.tableGetAllPortfolio = ((GetAllPortfolioDataTable)(base.Tables["GetAllPortfolio"]));
            if ((initTable == true)) {
                if ((this.tableGetAllPortfolio != null)) {
                    this.tableGetAllPortfolio.InitVars();
                }
            }
            this.tableGetAllUsers = ((GetAllUsersDataTable)(base.Tables["GetAllUsers"]));
            if ((initTable == true)) {
                if ((this.tableGetAllUsers != null)) {
                    this.tableGetAllUsers.InitVars();
                }
            }
            this.tableGetAllWatchOutNews = ((GetAllWatchOutNewsDataTable)(base.Tables["GetAllWatchOutNews"]));
            if ((initTable == true)) {
                if ((this.tableGetAllWatchOutNews != null)) {
                    this.tableGetAllWatchOutNews.InitVars();
                }
            }
            this.tableGetEmailBySendEmailId = ((GetEmailBySendEmailIdDataTable)(base.Tables["GetEmailBySendEmailId"]));
            if ((initTable == true)) {
                if ((this.tableGetEmailBySendEmailId != null)) {
                    this.tableGetEmailBySendEmailId.InitVars();
                }
            }
            this.tableGetMarketCommentaryByArticle = ((GetMarketCommentaryByArticleDataTable)(base.Tables["GetMarketCommentaryByArticle"]));
            if ((initTable == true)) {
                if ((this.tableGetMarketCommentaryByArticle != null)) {
                    this.tableGetMarketCommentaryByArticle.InitVars();
                }
            }
            this.tableGetNewsAndViewsByArticle = ((GetNewsAndViewsByArticleDataTable)(base.Tables["GetNewsAndViewsByArticle"]));
            if ((initTable == true)) {
                if ((this.tableGetNewsAndViewsByArticle != null)) {
                    this.tableGetNewsAndViewsByArticle.InitVars();
                }
            }
            this.tableGetOrdesrByUserIdOrderId = ((GetOrdesrByUserIdOrderIdDataTable)(base.Tables["GetOrdesrByUserIdOrderId"]));
            if ((initTable == true)) {
                if ((this.tableGetOrdesrByUserIdOrderId != null)) {
                    this.tableGetOrdesrByUserIdOrderId.InitVars();
                }
            }
            this.tableGetPortfolioByTransactionId = ((GetPortfolioByTransactionIdDataTable)(base.Tables["GetPortfolioByTransactionId"]));
            if ((initTable == true)) {
                if ((this.tableGetPortfolioByTransactionId != null)) {
                    this.tableGetPortfolioByTransactionId.InitVars();
                }
            }
            this.tableGetPremiumServiceByArticle = ((GetPremiumServiceByArticleDataTable)(base.Tables["GetPremiumServiceByArticle"]));
            if ((initTable == true)) {
                if ((this.tableGetPremiumServiceByArticle != null)) {
                    this.tableGetPremiumServiceByArticle.InitVars();
                }
            }
            this.tableGetPremiumServices = ((GetPremiumServicesDataTable)(base.Tables["GetPremiumServices"]));
            if ((initTable == true)) {
                if ((this.tableGetPremiumServices != null)) {
                    this.tableGetPremiumServices.InitVars();
                }
            }
            this.tableGetUserByUserId = ((GetUserByUserIdDataTable)(base.Tables["GetUserByUserId"]));
            if ((initTable == true)) {
                if ((this.tableGetUserByUserId != null)) {
                    this.tableGetUserByUserId.InitVars();
                }
            }
            this.tableGetWatchOutNewsByArticle = ((GetWatchOutNewsByArticleDataTable)(base.Tables["GetWatchOutNewsByArticle"]));
            if ((initTable == true)) {
                if ((this.tableGetWatchOutNewsByArticle != null)) {
                    this.tableGetWatchOutNewsByArticle.InitVars();
                }
            }
            this.tableUI_GetAllMarketCommentaryForToday = ((UI_GetAllMarketCommentaryForTodayDataTable)(base.Tables["UI_GetAllMarketCommentaryForToday"]));
            if ((initTable == true)) {
                if ((this.tableUI_GetAllMarketCommentaryForToday != null)) {
                    this.tableUI_GetAllMarketCommentaryForToday.InitVars();
                }
            }
            this.tableUI_GetAllNewsViews = ((UI_GetAllNewsViewsDataTable)(base.Tables["UI_GetAllNewsViews"]));
            if ((initTable == true)) {
                if ((this.tableUI_GetAllNewsViews != null)) {
                    this.tableUI_GetAllNewsViews.InitVars();
                }
            }
            this.tableUI_GetAllWatchOutNewsForToday = ((UI_GetAllWatchOutNewsForTodayDataTable)(base.Tables["UI_GetAllWatchOutNewsForToday"]));
            if ((initTable == true)) {
                if ((this.tableUI_GetAllWatchOutNewsForToday != null)) {
                    this.tableUI_GetAllWatchOutNewsForToday.InitVars();
                }
            }
            this.tableUI_GetNewsViewsByNewsId = ((UI_GetNewsViewsByNewsIdDataTable)(base.Tables["UI_GetNewsViewsByNewsId"]));
            if ((initTable == true)) {
                if ((this.tableUI_GetNewsViewsByNewsId != null)) {
                    this.tableUI_GetNewsViewsByNewsId.InitVars();
                }
            }
            this.tableUI_GetPremiumServices = ((UI_GetPremiumServicesDataTable)(base.Tables["UI_GetPremiumServices"]));
            if ((initTable == true)) {
                if ((this.tableUI_GetPremiumServices != null)) {
                    this.tableUI_GetPremiumServices.InitVars();
                }
            }
            this.tableUI_GetPremiumServicesByPremiumServiceId = ((UI_GetPremiumServicesByPremiumServiceIdDataTable)(base.Tables["UI_GetPremiumServicesByPremiumServiceId"]));
            if ((initTable == true)) {
                if ((this.tableUI_GetPremiumServicesByPremiumServiceId != null)) {
                    this.tableUI_GetPremiumServicesByPremiumServiceId.InitVars();
                }
            }
            this.tableUI_GetUserCredentials = ((UI_GetUserCredentialsDataTable)(base.Tables["UI_GetUserCredentials"]));
            if ((initTable == true)) {
                if ((this.tableUI_GetUserCredentials != null)) {
                    this.tableUI_GetUserCredentials.InitVars();
                }
            }
            this.relationFK_Orders_SubscriptionLookUp = this.Relations["FK_Orders_SubscriptionLookUp"];
            this.relationFK_Orders_Users = this.Relations["FK_Orders_Users"];
            this.relationFK_PremiumServices_TradeTypes = this.Relations["FK_PremiumServices_TradeTypes"];
            this.relationFK_Recommendations_BuyOrSellLookUp = this.Relations["FK_Recommendations_BuyOrSellLookUp"];
            this.relationFK_Recommendations_TradeTypes = this.Relations["FK_Recommendations_TradeTypes"];
            this.relationFK_Subscription_Users = this.Relations["FK_Subscription_Users"];
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "USAdvisoryDataSet";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/USAdvisoryDataSet.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableAdminCredentials = new AdminCredentialsDataTable();
            base.Tables.Add(this.tableAdminCredentials);
            this.tableBuyOrSellLookUp = new BuyOrSellLookUpDataTable();
            base.Tables.Add(this.tableBuyOrSellLookUp);
            this.tableEmailNewsletter = new EmailNewsletterDataTable();
            base.Tables.Add(this.tableEmailNewsletter);
            this.tableEmailSent = new EmailSentDataTable();
            base.Tables.Add(this.tableEmailSent);
            this.tableMarketCommentary = new MarketCommentaryDataTable();
            base.Tables.Add(this.tableMarketCommentary);
            this.tableNewsAndViews = new NewsAndViewsDataTable();
            base.Tables.Add(this.tableNewsAndViews);
            this.tableOrders = new OrdersDataTable();
            base.Tables.Add(this.tableOrders);
            this.tablePortfolioLookUp = new PortfolioLookUpDataTable();
            base.Tables.Add(this.tablePortfolioLookUp);
            this.tablePortfolioTransactions = new PortfolioTransactionsDataTable();
            base.Tables.Add(this.tablePortfolioTransactions);
            this.tablePremiumServices = new PremiumServicesDataTable();
            base.Tables.Add(this.tablePremiumServices);
            this.tableRecommendations = new RecommendationsDataTable();
            base.Tables.Add(this.tableRecommendations);
            this.tableSubscription = new SubscriptionDataTable();
            base.Tables.Add(this.tableSubscription);
            this.tableSubscriptionLookUp = new SubscriptionLookUpDataTable();
            base.Tables.Add(this.tableSubscriptionLookUp);
            this.tableTradeTypes = new TradeTypesDataTable();
            base.Tables.Add(this.tableTradeTypes);
            this.tableUsers = new UsersDataTable();
            base.Tables.Add(this.tableUsers);
            this.tableWatchOut = new WatchOutDataTable();
            base.Tables.Add(this.tableWatchOut);
            this.tableGetAllClosedPortfolio = new GetAllClosedPortfolioDataTable();
            base.Tables.Add(this.tableGetAllClosedPortfolio);
            this.tableGetAllEmailAddress = new GetAllEmailAddressDataTable();
            base.Tables.Add(this.tableGetAllEmailAddress);
            this.tableGetAllEmailToSend = new GetAllEmailToSendDataTable();
            base.Tables.Add(this.tableGetAllEmailToSend);
            this.tableGetAllMarketCommentaries = new GetAllMarketCommentariesDataTable();
            base.Tables.Add(this.tableGetAllMarketCommentaries);
            this.tableGetAllNewsAndViews = new GetAllNewsAndViewsDataTable();
            base.Tables.Add(this.tableGetAllNewsAndViews);
            this.tableGetAllOpenPortfolio = new GetAllOpenPortfolioDataTable();
            base.Tables.Add(this.tableGetAllOpenPortfolio);
            this.tableGetAllOrders = new GetAllOrdersDataTable();
            base.Tables.Add(this.tableGetAllOrders);
            this.tableGetAllPortfolio = new GetAllPortfolioDataTable();
            base.Tables.Add(this.tableGetAllPortfolio);
            this.tableGetAllUsers = new GetAllUsersDataTable();
            base.Tables.Add(this.tableGetAllUsers);
            this.tableGetAllWatchOutNews = new GetAllWatchOutNewsDataTable();
            base.Tables.Add(this.tableGetAllWatchOutNews);
            this.tableGetEmailBySendEmailId = new GetEmailBySendEmailIdDataTable();
            base.Tables.Add(this.tableGetEmailBySendEmailId);
            this.tableGetMarketCommentaryByArticle = new GetMarketCommentaryByArticleDataTable();
            base.Tables.Add(this.tableGetMarketCommentaryByArticle);
            this.tableGetNewsAndViewsByArticle = new GetNewsAndViewsByArticleDataTable();
            base.Tables.Add(this.tableGetNewsAndViewsByArticle);
            this.tableGetOrdesrByUserIdOrderId = new GetOrdesrByUserIdOrderIdDataTable();
            base.Tables.Add(this.tableGetOrdesrByUserIdOrderId);
            this.tableGetPortfolioByTransactionId = new GetPortfolioByTransactionIdDataTable();
            base.Tables.Add(this.tableGetPortfolioByTransactionId);
            this.tableGetPremiumServiceByArticle = new GetPremiumServiceByArticleDataTable();
            base.Tables.Add(this.tableGetPremiumServiceByArticle);
            this.tableGetPremiumServices = new GetPremiumServicesDataTable();
            base.Tables.Add(this.tableGetPremiumServices);
            this.tableGetUserByUserId = new GetUserByUserIdDataTable();
            base.Tables.Add(this.tableGetUserByUserId);
            this.tableGetWatchOutNewsByArticle = new GetWatchOutNewsByArticleDataTable();
            base.Tables.Add(this.tableGetWatchOutNewsByArticle);
            this.tableUI_GetAllMarketCommentaryForToday = new UI_GetAllMarketCommentaryForTodayDataTable();
            base.Tables.Add(this.tableUI_GetAllMarketCommentaryForToday);
            this.tableUI_GetAllNewsViews = new UI_GetAllNewsViewsDataTable();
            base.Tables.Add(this.tableUI_GetAllNewsViews);
            this.tableUI_GetAllWatchOutNewsForToday = new UI_GetAllWatchOutNewsForTodayDataTable();
            base.Tables.Add(this.tableUI_GetAllWatchOutNewsForToday);
            this.tableUI_GetNewsViewsByNewsId = new UI_GetNewsViewsByNewsIdDataTable();
            base.Tables.Add(this.tableUI_GetNewsViewsByNewsId);
            this.tableUI_GetPremiumServices = new UI_GetPremiumServicesDataTable();
            base.Tables.Add(this.tableUI_GetPremiumServices);
            this.tableUI_GetPremiumServicesByPremiumServiceId = new UI_GetPremiumServicesByPremiumServiceIdDataTable();
            base.Tables.Add(this.tableUI_GetPremiumServicesByPremiumServiceId);
            this.tableUI_GetUserCredentials = new UI_GetUserCredentialsDataTable();
            base.Tables.Add(this.tableUI_GetUserCredentials);
            this.relationFK_Orders_SubscriptionLookUp = new global::System.Data.DataRelation("FK_Orders_SubscriptionLookUp", new global::System.Data.DataColumn[] {
                        this.tableSubscriptionLookUp.NoOfMonthsSubscriptionIdColumn}, new global::System.Data.DataColumn[] {
                        this.tableOrders.MonthsOfSubscriptionIdColumn}, false);
            this.Relations.Add(this.relationFK_Orders_SubscriptionLookUp);
            this.relationFK_Orders_Users = new global::System.Data.DataRelation("FK_Orders_Users", new global::System.Data.DataColumn[] {
                        this.tableUsers.UserIdColumn}, new global::System.Data.DataColumn[] {
                        this.tableOrders.UserIdColumn}, false);
            this.Relations.Add(this.relationFK_Orders_Users);
            this.relationFK_PremiumServices_TradeTypes = new global::System.Data.DataRelation("FK_PremiumServices_TradeTypes", new global::System.Data.DataColumn[] {
                        this.tableTradeTypes.TypeOfTradeIdColumn}, new global::System.Data.DataColumn[] {
                        this.tablePremiumServices.TypeOfTradeIdColumn}, false);
            this.Relations.Add(this.relationFK_PremiumServices_TradeTypes);
            this.relationFK_Recommendations_BuyOrSellLookUp = new global::System.Data.DataRelation("FK_Recommendations_BuyOrSellLookUp", new global::System.Data.DataColumn[] {
                        this.tableBuyOrSellLookUp.BuyOrSellIdColumn}, new global::System.Data.DataColumn[] {
                        this.tableRecommendations.BuyOrSellIdColumn}, false);
            this.Relations.Add(this.relationFK_Recommendations_BuyOrSellLookUp);
            this.relationFK_Recommendations_TradeTypes = new global::System.Data.DataRelation("FK_Recommendations_TradeTypes", new global::System.Data.DataColumn[] {
                        this.tableTradeTypes.TypeOfTradeIdColumn}, new global::System.Data.DataColumn[] {
                        this.tableRecommendations.TradeTypeIdColumn}, false);
            this.Relations.Add(this.relationFK_Recommendations_TradeTypes);
            this.relationFK_Subscription_Users = new global::System.Data.DataRelation("FK_Subscription_Users", new global::System.Data.DataColumn[] {
                        this.tableUsers.UserIdColumn}, new global::System.Data.DataColumn[] {
                        this.tableSubscription.UserIdColumn}, false);
            this.Relations.Add(this.relationFK_Subscription_Users);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeAdminCredentials() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeBuyOrSellLookUp() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeEmailNewsletter() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeEmailSent() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeMarketCommentary() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeNewsAndViews() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeOrders() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializePortfolioLookUp() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializePortfolioTransactions() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializePremiumServices() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeRecommendations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeSubscription() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeSubscriptionLookUp() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeTradeTypes() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeUsers() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeWatchOut() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeGetAllClosedPortfolio() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeGetAllEmailAddress() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeGetAllEmailToSend() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeGetAllMarketCommentaries() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeGetAllNewsAndViews() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeGetAllOpenPortfolio() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeGetAllOrders() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeGetAllPortfolio() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeGetAllUsers() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeGetAllWatchOutNews() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeGetEmailBySendEmailId() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeGetMarketCommentaryByArticle() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeGetNewsAndViewsByArticle() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeGetOrdesrByUserIdOrderId() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeGetPortfolioByTransactionId() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeGetPremiumServiceByArticle() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeGetPremiumServices() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeGetUserByUserId() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeGetWatchOutNewsByArticle() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeUI_GetAllMarketCommentaryForToday() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeUI_GetAllNewsViews() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeUI_GetAllWatchOutNewsForToday() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeUI_GetNewsViewsByNewsId() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeUI_GetPremiumServices() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeUI_GetPremiumServicesByPremiumServiceId() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeUI_GetUserCredentials() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            USAdvisoryDataSet ds = new USAdvisoryDataSet();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void AdminCredentialsRowChangeEventHandler(object sender, AdminCredentialsRowChangeEvent e);
        
        public delegate void BuyOrSellLookUpRowChangeEventHandler(object sender, BuyOrSellLookUpRowChangeEvent e);
        
        public delegate void EmailNewsletterRowChangeEventHandler(object sender, EmailNewsletterRowChangeEvent e);
        
        public delegate void EmailSentRowChangeEventHandler(object sender, EmailSentRowChangeEvent e);
        
        public delegate void MarketCommentaryRowChangeEventHandler(object sender, MarketCommentaryRowChangeEvent e);
        
        public delegate void NewsAndViewsRowChangeEventHandler(object sender, NewsAndViewsRowChangeEvent e);
        
        public delegate void OrdersRowChangeEventHandler(object sender, OrdersRowChangeEvent e);
        
        public delegate void PortfolioLookUpRowChangeEventHandler(object sender, PortfolioLookUpRowChangeEvent e);
        
        public delegate void PortfolioTransactionsRowChangeEventHandler(object sender, PortfolioTransactionsRowChangeEvent e);
        
        public delegate void PremiumServicesRowChangeEventHandler(object sender, PremiumServicesRowChangeEvent e);
        
        public delegate void RecommendationsRowChangeEventHandler(object sender, RecommendationsRowChangeEvent e);
        
        public delegate void SubscriptionRowChangeEventHandler(object sender, SubscriptionRowChangeEvent e);
        
        public delegate void SubscriptionLookUpRowChangeEventHandler(object sender, SubscriptionLookUpRowChangeEvent e);
        
        public delegate void TradeTypesRowChangeEventHandler(object sender, TradeTypesRowChangeEvent e);
        
        public delegate void UsersRowChangeEventHandler(object sender, UsersRowChangeEvent e);
        
        public delegate void WatchOutRowChangeEventHandler(object sender, WatchOutRowChangeEvent e);
        
        public delegate void GetAllClosedPortfolioRowChangeEventHandler(object sender, GetAllClosedPortfolioRowChangeEvent e);
        
        public delegate void GetAllEmailAddressRowChangeEventHandler(object sender, GetAllEmailAddressRowChangeEvent e);
        
        public delegate void GetAllEmailToSendRowChangeEventHandler(object sender, GetAllEmailToSendRowChangeEvent e);
        
        public delegate void GetAllMarketCommentariesRowChangeEventHandler(object sender, GetAllMarketCommentariesRowChangeEvent e);
        
        public delegate void GetAllNewsAndViewsRowChangeEventHandler(object sender, GetAllNewsAndViewsRowChangeEvent e);
        
        public delegate void GetAllOpenPortfolioRowChangeEventHandler(object sender, GetAllOpenPortfolioRowChangeEvent e);
        
        public delegate void GetAllOrdersRowChangeEventHandler(object sender, GetAllOrdersRowChangeEvent e);
        
        public delegate void GetAllPortfolioRowChangeEventHandler(object sender, GetAllPortfolioRowChangeEvent e);
        
        public delegate void GetAllUsersRowChangeEventHandler(object sender, GetAllUsersRowChangeEvent e);
        
        public delegate void GetAllWatchOutNewsRowChangeEventHandler(object sender, GetAllWatchOutNewsRowChangeEvent e);
        
        public delegate void GetEmailBySendEmailIdRowChangeEventHandler(object sender, GetEmailBySendEmailIdRowChangeEvent e);
        
        public delegate void GetMarketCommentaryByArticleRowChangeEventHandler(object sender, GetMarketCommentaryByArticleRowChangeEvent e);
        
        public delegate void GetNewsAndViewsByArticleRowChangeEventHandler(object sender, GetNewsAndViewsByArticleRowChangeEvent e);
        
        public delegate void GetOrdesrByUserIdOrderIdRowChangeEventHandler(object sender, GetOrdesrByUserIdOrderIdRowChangeEvent e);
        
        public delegate void GetPortfolioByTransactionIdRowChangeEventHandler(object sender, GetPortfolioByTransactionIdRowChangeEvent e);
        
        public delegate void GetPremiumServiceByArticleRowChangeEventHandler(object sender, GetPremiumServiceByArticleRowChangeEvent e);
        
        public delegate void GetPremiumServicesRowChangeEventHandler(object sender, GetPremiumServicesRowChangeEvent e);
        
        public delegate void GetUserByUserIdRowChangeEventHandler(object sender, GetUserByUserIdRowChangeEvent e);
        
        public delegate void GetWatchOutNewsByArticleRowChangeEventHandler(object sender, GetWatchOutNewsByArticleRowChangeEvent e);
        
        public delegate void UI_GetAllMarketCommentaryForTodayRowChangeEventHandler(object sender, UI_GetAllMarketCommentaryForTodayRowChangeEvent e);
        
        public delegate void UI_GetAllNewsViewsRowChangeEventHandler(object sender, UI_GetAllNewsViewsRowChangeEvent e);
        
        public delegate void UI_GetAllWatchOutNewsForTodayRowChangeEventHandler(object sender, UI_GetAllWatchOutNewsForTodayRowChangeEvent e);
        
        public delegate void UI_GetNewsViewsByNewsIdRowChangeEventHandler(object sender, UI_GetNewsViewsByNewsIdRowChangeEvent e);
        
        public delegate void UI_GetPremiumServicesRowChangeEventHandler(object sender, UI_GetPremiumServicesRowChangeEvent e);
        
        public delegate void UI_GetPremiumServicesByPremiumServiceIdRowChangeEventHandler(object sender, UI_GetPremiumServicesByPremiumServiceIdRowChangeEvent e);
        
        public delegate void UI_GetUserCredentialsRowChangeEventHandler(object sender, UI_GetUserCredentialsRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class AdminCredentialsDataTable : global::System.Data.TypedTableBase<AdminCredentialsRow> {
            
            private global::System.Data.DataColumn columnUserName;
            
            private global::System.Data.DataColumn columnPassword;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AdminCredentialsDataTable() {
                this.TableName = "AdminCredentials";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal AdminCredentialsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected AdminCredentialsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UserNameColumn {
                get {
                    return this.columnUserName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PasswordColumn {
                get {
                    return this.columnPassword;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AdminCredentialsRow this[int index] {
                get {
                    return ((AdminCredentialsRow)(this.Rows[index]));
                }
            }
            
            public event AdminCredentialsRowChangeEventHandler AdminCredentialsRowChanging;
            
            public event AdminCredentialsRowChangeEventHandler AdminCredentialsRowChanged;
            
            public event AdminCredentialsRowChangeEventHandler AdminCredentialsRowDeleting;
            
            public event AdminCredentialsRowChangeEventHandler AdminCredentialsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddAdminCredentialsRow(AdminCredentialsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AdminCredentialsRow AddAdminCredentialsRow(string UserName, string Password) {
                AdminCredentialsRow rowAdminCredentialsRow = ((AdminCredentialsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        UserName,
                        Password};
                rowAdminCredentialsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowAdminCredentialsRow);
                return rowAdminCredentialsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AdminCredentialsRow FindByUserName(string UserName) {
                return ((AdminCredentialsRow)(this.Rows.Find(new object[] {
                            UserName})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                AdminCredentialsDataTable cln = ((AdminCredentialsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new AdminCredentialsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnUserName = base.Columns["UserName"];
                this.columnPassword = base.Columns["Password"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnUserName = new global::System.Data.DataColumn("UserName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUserName);
                this.columnPassword = new global::System.Data.DataColumn("Password", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPassword);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnUserName}, true));
                this.columnUserName.AllowDBNull = false;
                this.columnUserName.Unique = true;
                this.columnUserName.MaxLength = 500;
                this.columnPassword.AllowDBNull = false;
                this.columnPassword.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AdminCredentialsRow NewAdminCredentialsRow() {
                return ((AdminCredentialsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new AdminCredentialsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(AdminCredentialsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.AdminCredentialsRowChanged != null)) {
                    this.AdminCredentialsRowChanged(this, new AdminCredentialsRowChangeEvent(((AdminCredentialsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.AdminCredentialsRowChanging != null)) {
                    this.AdminCredentialsRowChanging(this, new AdminCredentialsRowChangeEvent(((AdminCredentialsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.AdminCredentialsRowDeleted != null)) {
                    this.AdminCredentialsRowDeleted(this, new AdminCredentialsRowChangeEvent(((AdminCredentialsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.AdminCredentialsRowDeleting != null)) {
                    this.AdminCredentialsRowDeleting(this, new AdminCredentialsRowChangeEvent(((AdminCredentialsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveAdminCredentialsRow(AdminCredentialsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                USAdvisoryDataSet ds = new USAdvisoryDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "AdminCredentialsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class BuyOrSellLookUpDataTable : global::System.Data.TypedTableBase<BuyOrSellLookUpRow> {
            
            private global::System.Data.DataColumn columnBuyOrSellId;
            
            private global::System.Data.DataColumn columnBuyOrSellDescription;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BuyOrSellLookUpDataTable() {
                this.TableName = "BuyOrSellLookUp";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal BuyOrSellLookUpDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected BuyOrSellLookUpDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BuyOrSellIdColumn {
                get {
                    return this.columnBuyOrSellId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BuyOrSellDescriptionColumn {
                get {
                    return this.columnBuyOrSellDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BuyOrSellLookUpRow this[int index] {
                get {
                    return ((BuyOrSellLookUpRow)(this.Rows[index]));
                }
            }
            
            public event BuyOrSellLookUpRowChangeEventHandler BuyOrSellLookUpRowChanging;
            
            public event BuyOrSellLookUpRowChangeEventHandler BuyOrSellLookUpRowChanged;
            
            public event BuyOrSellLookUpRowChangeEventHandler BuyOrSellLookUpRowDeleting;
            
            public event BuyOrSellLookUpRowChangeEventHandler BuyOrSellLookUpRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddBuyOrSellLookUpRow(BuyOrSellLookUpRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BuyOrSellLookUpRow AddBuyOrSellLookUpRow(string BuyOrSellDescription) {
                BuyOrSellLookUpRow rowBuyOrSellLookUpRow = ((BuyOrSellLookUpRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        BuyOrSellDescription};
                rowBuyOrSellLookUpRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowBuyOrSellLookUpRow);
                return rowBuyOrSellLookUpRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BuyOrSellLookUpRow FindByBuyOrSellId(int BuyOrSellId) {
                return ((BuyOrSellLookUpRow)(this.Rows.Find(new object[] {
                            BuyOrSellId})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                BuyOrSellLookUpDataTable cln = ((BuyOrSellLookUpDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new BuyOrSellLookUpDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnBuyOrSellId = base.Columns["BuyOrSellId"];
                this.columnBuyOrSellDescription = base.Columns["BuyOrSellDescription"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnBuyOrSellId = new global::System.Data.DataColumn("BuyOrSellId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBuyOrSellId);
                this.columnBuyOrSellDescription = new global::System.Data.DataColumn("BuyOrSellDescription", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBuyOrSellDescription);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnBuyOrSellId}, true));
                this.columnBuyOrSellId.AutoIncrement = true;
                this.columnBuyOrSellId.AutoIncrementSeed = -1;
                this.columnBuyOrSellId.AutoIncrementStep = -1;
                this.columnBuyOrSellId.AllowDBNull = false;
                this.columnBuyOrSellId.ReadOnly = true;
                this.columnBuyOrSellId.Unique = true;
                this.columnBuyOrSellDescription.AllowDBNull = false;
                this.columnBuyOrSellDescription.MaxLength = 5000;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BuyOrSellLookUpRow NewBuyOrSellLookUpRow() {
                return ((BuyOrSellLookUpRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new BuyOrSellLookUpRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(BuyOrSellLookUpRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.BuyOrSellLookUpRowChanged != null)) {
                    this.BuyOrSellLookUpRowChanged(this, new BuyOrSellLookUpRowChangeEvent(((BuyOrSellLookUpRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.BuyOrSellLookUpRowChanging != null)) {
                    this.BuyOrSellLookUpRowChanging(this, new BuyOrSellLookUpRowChangeEvent(((BuyOrSellLookUpRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.BuyOrSellLookUpRowDeleted != null)) {
                    this.BuyOrSellLookUpRowDeleted(this, new BuyOrSellLookUpRowChangeEvent(((BuyOrSellLookUpRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.BuyOrSellLookUpRowDeleting != null)) {
                    this.BuyOrSellLookUpRowDeleting(this, new BuyOrSellLookUpRowChangeEvent(((BuyOrSellLookUpRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveBuyOrSellLookUpRow(BuyOrSellLookUpRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                USAdvisoryDataSet ds = new USAdvisoryDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "BuyOrSellLookUpDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class EmailNewsletterDataTable : global::System.Data.TypedTableBase<EmailNewsletterRow> {
            
            private global::System.Data.DataColumn columnEmailNewsLetterId;
            
            private global::System.Data.DataColumn columnEmailAddress;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmailNewsletterDataTable() {
                this.TableName = "EmailNewsletter";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal EmailNewsletterDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected EmailNewsletterDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EmailNewsLetterIdColumn {
                get {
                    return this.columnEmailNewsLetterId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EmailAddressColumn {
                get {
                    return this.columnEmailAddress;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmailNewsletterRow this[int index] {
                get {
                    return ((EmailNewsletterRow)(this.Rows[index]));
                }
            }
            
            public event EmailNewsletterRowChangeEventHandler EmailNewsletterRowChanging;
            
            public event EmailNewsletterRowChangeEventHandler EmailNewsletterRowChanged;
            
            public event EmailNewsletterRowChangeEventHandler EmailNewsletterRowDeleting;
            
            public event EmailNewsletterRowChangeEventHandler EmailNewsletterRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddEmailNewsletterRow(EmailNewsletterRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmailNewsletterRow AddEmailNewsletterRow(string EmailAddress) {
                EmailNewsletterRow rowEmailNewsletterRow = ((EmailNewsletterRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        EmailAddress};
                rowEmailNewsletterRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowEmailNewsletterRow);
                return rowEmailNewsletterRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmailNewsletterRow FindByEmailNewsLetterId(int EmailNewsLetterId) {
                return ((EmailNewsletterRow)(this.Rows.Find(new object[] {
                            EmailNewsLetterId})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                EmailNewsletterDataTable cln = ((EmailNewsletterDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new EmailNewsletterDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnEmailNewsLetterId = base.Columns["EmailNewsLetterId"];
                this.columnEmailAddress = base.Columns["EmailAddress"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnEmailNewsLetterId = new global::System.Data.DataColumn("EmailNewsLetterId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmailNewsLetterId);
                this.columnEmailAddress = new global::System.Data.DataColumn("EmailAddress", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmailAddress);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnEmailNewsLetterId}, true));
                this.columnEmailNewsLetterId.AutoIncrement = true;
                this.columnEmailNewsLetterId.AutoIncrementSeed = -1;
                this.columnEmailNewsLetterId.AutoIncrementStep = -1;
                this.columnEmailNewsLetterId.AllowDBNull = false;
                this.columnEmailNewsLetterId.ReadOnly = true;
                this.columnEmailNewsLetterId.Unique = true;
                this.columnEmailAddress.AllowDBNull = false;
                this.columnEmailAddress.MaxLength = 5000;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmailNewsletterRow NewEmailNewsletterRow() {
                return ((EmailNewsletterRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new EmailNewsletterRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(EmailNewsletterRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.EmailNewsletterRowChanged != null)) {
                    this.EmailNewsletterRowChanged(this, new EmailNewsletterRowChangeEvent(((EmailNewsletterRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.EmailNewsletterRowChanging != null)) {
                    this.EmailNewsletterRowChanging(this, new EmailNewsletterRowChangeEvent(((EmailNewsletterRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.EmailNewsletterRowDeleted != null)) {
                    this.EmailNewsletterRowDeleted(this, new EmailNewsletterRowChangeEvent(((EmailNewsletterRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.EmailNewsletterRowDeleting != null)) {
                    this.EmailNewsletterRowDeleting(this, new EmailNewsletterRowChangeEvent(((EmailNewsletterRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveEmailNewsletterRow(EmailNewsletterRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                USAdvisoryDataSet ds = new USAdvisoryDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "EmailNewsletterDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class EmailSentDataTable : global::System.Data.TypedTableBase<EmailSentRow> {
            
            private global::System.Data.DataColumn columnSendEmailId;
            
            private global::System.Data.DataColumn columnEmailDescription;
            
            private global::System.Data.DataColumn columnIsSubscribers;
            
            private global::System.Data.DataColumn columnIsEmailSent;
            
            private global::System.Data.DataColumn columnEmailDateTime;
            
            private global::System.Data.DataColumn columnEmailSentDateTime;
            
            private global::System.Data.DataColumn columnEmailSubject;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmailSentDataTable() {
                this.TableName = "EmailSent";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal EmailSentDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected EmailSentDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SendEmailIdColumn {
                get {
                    return this.columnSendEmailId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EmailDescriptionColumn {
                get {
                    return this.columnEmailDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsSubscribersColumn {
                get {
                    return this.columnIsSubscribers;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsEmailSentColumn {
                get {
                    return this.columnIsEmailSent;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EmailDateTimeColumn {
                get {
                    return this.columnEmailDateTime;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EmailSentDateTimeColumn {
                get {
                    return this.columnEmailSentDateTime;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EmailSubjectColumn {
                get {
                    return this.columnEmailSubject;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmailSentRow this[int index] {
                get {
                    return ((EmailSentRow)(this.Rows[index]));
                }
            }
            
            public event EmailSentRowChangeEventHandler EmailSentRowChanging;
            
            public event EmailSentRowChangeEventHandler EmailSentRowChanged;
            
            public event EmailSentRowChangeEventHandler EmailSentRowDeleting;
            
            public event EmailSentRowChangeEventHandler EmailSentRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddEmailSentRow(EmailSentRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmailSentRow AddEmailSentRow(string EmailDescription, bool IsSubscribers, bool IsEmailSent, System.DateTime EmailDateTime, System.DateTime EmailSentDateTime, string EmailSubject) {
                EmailSentRow rowEmailSentRow = ((EmailSentRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        EmailDescription,
                        IsSubscribers,
                        IsEmailSent,
                        EmailDateTime,
                        EmailSentDateTime,
                        EmailSubject};
                rowEmailSentRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowEmailSentRow);
                return rowEmailSentRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmailSentRow FindBySendEmailId(int SendEmailId) {
                return ((EmailSentRow)(this.Rows.Find(new object[] {
                            SendEmailId})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                EmailSentDataTable cln = ((EmailSentDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new EmailSentDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnSendEmailId = base.Columns["SendEmailId"];
                this.columnEmailDescription = base.Columns["EmailDescription"];
                this.columnIsSubscribers = base.Columns["IsSubscribers"];
                this.columnIsEmailSent = base.Columns["IsEmailSent"];
                this.columnEmailDateTime = base.Columns["EmailDateTime"];
                this.columnEmailSentDateTime = base.Columns["EmailSentDateTime"];
                this.columnEmailSubject = base.Columns["EmailSubject"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnSendEmailId = new global::System.Data.DataColumn("SendEmailId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSendEmailId);
                this.columnEmailDescription = new global::System.Data.DataColumn("EmailDescription", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmailDescription);
                this.columnIsSubscribers = new global::System.Data.DataColumn("IsSubscribers", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsSubscribers);
                this.columnIsEmailSent = new global::System.Data.DataColumn("IsEmailSent", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsEmailSent);
                this.columnEmailDateTime = new global::System.Data.DataColumn("EmailDateTime", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmailDateTime);
                this.columnEmailSentDateTime = new global::System.Data.DataColumn("EmailSentDateTime", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmailSentDateTime);
                this.columnEmailSubject = new global::System.Data.DataColumn("EmailSubject", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmailSubject);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnSendEmailId}, true));
                this.columnSendEmailId.AutoIncrement = true;
                this.columnSendEmailId.AutoIncrementSeed = -1;
                this.columnSendEmailId.AutoIncrementStep = -1;
                this.columnSendEmailId.AllowDBNull = false;
                this.columnSendEmailId.ReadOnly = true;
                this.columnSendEmailId.Unique = true;
                this.columnEmailDescription.AllowDBNull = false;
                this.columnEmailDescription.MaxLength = 1073741823;
                this.columnIsSubscribers.AllowDBNull = false;
                this.columnIsEmailSent.AllowDBNull = false;
                this.columnEmailDateTime.AllowDBNull = false;
                this.columnEmailSubject.AllowDBNull = false;
                this.columnEmailSubject.MaxLength = 500;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmailSentRow NewEmailSentRow() {
                return ((EmailSentRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new EmailSentRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(EmailSentRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.EmailSentRowChanged != null)) {
                    this.EmailSentRowChanged(this, new EmailSentRowChangeEvent(((EmailSentRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.EmailSentRowChanging != null)) {
                    this.EmailSentRowChanging(this, new EmailSentRowChangeEvent(((EmailSentRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.EmailSentRowDeleted != null)) {
                    this.EmailSentRowDeleted(this, new EmailSentRowChangeEvent(((EmailSentRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.EmailSentRowDeleting != null)) {
                    this.EmailSentRowDeleting(this, new EmailSentRowChangeEvent(((EmailSentRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveEmailSentRow(EmailSentRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                USAdvisoryDataSet ds = new USAdvisoryDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "EmailSentDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class MarketCommentaryDataTable : global::System.Data.TypedTableBase<MarketCommentaryRow> {
            
            private global::System.Data.DataColumn columnMarketCommentaryId;
            
            private global::System.Data.DataColumn columnMarketCommentaryTitle;
            
            private global::System.Data.DataColumn columnMarketCommentaryDateTime;
            
            private global::System.Data.DataColumn columnMarketCommentaryDesc;
            
            private global::System.Data.DataColumn columnIsCommentaryActive;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MarketCommentaryDataTable() {
                this.TableName = "MarketCommentary";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal MarketCommentaryDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected MarketCommentaryDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MarketCommentaryIdColumn {
                get {
                    return this.columnMarketCommentaryId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MarketCommentaryTitleColumn {
                get {
                    return this.columnMarketCommentaryTitle;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MarketCommentaryDateTimeColumn {
                get {
                    return this.columnMarketCommentaryDateTime;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MarketCommentaryDescColumn {
                get {
                    return this.columnMarketCommentaryDesc;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsCommentaryActiveColumn {
                get {
                    return this.columnIsCommentaryActive;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MarketCommentaryRow this[int index] {
                get {
                    return ((MarketCommentaryRow)(this.Rows[index]));
                }
            }
            
            public event MarketCommentaryRowChangeEventHandler MarketCommentaryRowChanging;
            
            public event MarketCommentaryRowChangeEventHandler MarketCommentaryRowChanged;
            
            public event MarketCommentaryRowChangeEventHandler MarketCommentaryRowDeleting;
            
            public event MarketCommentaryRowChangeEventHandler MarketCommentaryRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddMarketCommentaryRow(MarketCommentaryRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MarketCommentaryRow AddMarketCommentaryRow(string MarketCommentaryTitle, System.DateTime MarketCommentaryDateTime, string MarketCommentaryDesc, bool IsCommentaryActive) {
                MarketCommentaryRow rowMarketCommentaryRow = ((MarketCommentaryRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        MarketCommentaryTitle,
                        MarketCommentaryDateTime,
                        MarketCommentaryDesc,
                        IsCommentaryActive};
                rowMarketCommentaryRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowMarketCommentaryRow);
                return rowMarketCommentaryRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MarketCommentaryRow FindByMarketCommentaryId(int MarketCommentaryId) {
                return ((MarketCommentaryRow)(this.Rows.Find(new object[] {
                            MarketCommentaryId})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                MarketCommentaryDataTable cln = ((MarketCommentaryDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new MarketCommentaryDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnMarketCommentaryId = base.Columns["MarketCommentaryId"];
                this.columnMarketCommentaryTitle = base.Columns["MarketCommentaryTitle"];
                this.columnMarketCommentaryDateTime = base.Columns["MarketCommentaryDateTime"];
                this.columnMarketCommentaryDesc = base.Columns["MarketCommentaryDesc"];
                this.columnIsCommentaryActive = base.Columns["IsCommentaryActive"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnMarketCommentaryId = new global::System.Data.DataColumn("MarketCommentaryId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMarketCommentaryId);
                this.columnMarketCommentaryTitle = new global::System.Data.DataColumn("MarketCommentaryTitle", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMarketCommentaryTitle);
                this.columnMarketCommentaryDateTime = new global::System.Data.DataColumn("MarketCommentaryDateTime", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMarketCommentaryDateTime);
                this.columnMarketCommentaryDesc = new global::System.Data.DataColumn("MarketCommentaryDesc", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMarketCommentaryDesc);
                this.columnIsCommentaryActive = new global::System.Data.DataColumn("IsCommentaryActive", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsCommentaryActive);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnMarketCommentaryId}, true));
                this.columnMarketCommentaryId.AutoIncrement = true;
                this.columnMarketCommentaryId.AutoIncrementSeed = -1;
                this.columnMarketCommentaryId.AutoIncrementStep = -1;
                this.columnMarketCommentaryId.AllowDBNull = false;
                this.columnMarketCommentaryId.ReadOnly = true;
                this.columnMarketCommentaryId.Unique = true;
                this.columnMarketCommentaryTitle.AllowDBNull = false;
                this.columnMarketCommentaryTitle.MaxLength = 5000;
                this.columnMarketCommentaryDateTime.AllowDBNull = false;
                this.columnMarketCommentaryDesc.AllowDBNull = false;
                this.columnMarketCommentaryDesc.MaxLength = 1073741823;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MarketCommentaryRow NewMarketCommentaryRow() {
                return ((MarketCommentaryRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new MarketCommentaryRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(MarketCommentaryRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.MarketCommentaryRowChanged != null)) {
                    this.MarketCommentaryRowChanged(this, new MarketCommentaryRowChangeEvent(((MarketCommentaryRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.MarketCommentaryRowChanging != null)) {
                    this.MarketCommentaryRowChanging(this, new MarketCommentaryRowChangeEvent(((MarketCommentaryRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.MarketCommentaryRowDeleted != null)) {
                    this.MarketCommentaryRowDeleted(this, new MarketCommentaryRowChangeEvent(((MarketCommentaryRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.MarketCommentaryRowDeleting != null)) {
                    this.MarketCommentaryRowDeleting(this, new MarketCommentaryRowChangeEvent(((MarketCommentaryRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveMarketCommentaryRow(MarketCommentaryRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                USAdvisoryDataSet ds = new USAdvisoryDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "MarketCommentaryDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class NewsAndViewsDataTable : global::System.Data.TypedTableBase<NewsAndViewsRow> {
            
            private global::System.Data.DataColumn columnNewsId;
            
            private global::System.Data.DataColumn columnNewsTitle;
            
            private global::System.Data.DataColumn columnNewsDateTime;
            
            private global::System.Data.DataColumn columnNewsDescription;
            
            private global::System.Data.DataColumn columnIsActive;
            
            private global::System.Data.DataColumn columnIsPaid;
            
            private global::System.Data.DataColumn columnTicker;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public NewsAndViewsDataTable() {
                this.TableName = "NewsAndViews";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal NewsAndViewsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected NewsAndViewsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NewsIdColumn {
                get {
                    return this.columnNewsId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NewsTitleColumn {
                get {
                    return this.columnNewsTitle;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NewsDateTimeColumn {
                get {
                    return this.columnNewsDateTime;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NewsDescriptionColumn {
                get {
                    return this.columnNewsDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsActiveColumn {
                get {
                    return this.columnIsActive;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsPaidColumn {
                get {
                    return this.columnIsPaid;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TickerColumn {
                get {
                    return this.columnTicker;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public NewsAndViewsRow this[int index] {
                get {
                    return ((NewsAndViewsRow)(this.Rows[index]));
                }
            }
            
            public event NewsAndViewsRowChangeEventHandler NewsAndViewsRowChanging;
            
            public event NewsAndViewsRowChangeEventHandler NewsAndViewsRowChanged;
            
            public event NewsAndViewsRowChangeEventHandler NewsAndViewsRowDeleting;
            
            public event NewsAndViewsRowChangeEventHandler NewsAndViewsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddNewsAndViewsRow(NewsAndViewsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public NewsAndViewsRow AddNewsAndViewsRow(string NewsTitle, System.DateTime NewsDateTime, string NewsDescription, bool IsActive, bool IsPaid, string Ticker) {
                NewsAndViewsRow rowNewsAndViewsRow = ((NewsAndViewsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        NewsTitle,
                        NewsDateTime,
                        NewsDescription,
                        IsActive,
                        IsPaid,
                        Ticker};
                rowNewsAndViewsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowNewsAndViewsRow);
                return rowNewsAndViewsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public NewsAndViewsRow FindByNewsId(int NewsId) {
                return ((NewsAndViewsRow)(this.Rows.Find(new object[] {
                            NewsId})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                NewsAndViewsDataTable cln = ((NewsAndViewsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new NewsAndViewsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnNewsId = base.Columns["NewsId"];
                this.columnNewsTitle = base.Columns["NewsTitle"];
                this.columnNewsDateTime = base.Columns["NewsDateTime"];
                this.columnNewsDescription = base.Columns["NewsDescription"];
                this.columnIsActive = base.Columns["IsActive"];
                this.columnIsPaid = base.Columns["IsPaid"];
                this.columnTicker = base.Columns["Ticker"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnNewsId = new global::System.Data.DataColumn("NewsId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNewsId);
                this.columnNewsTitle = new global::System.Data.DataColumn("NewsTitle", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNewsTitle);
                this.columnNewsDateTime = new global::System.Data.DataColumn("NewsDateTime", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNewsDateTime);
                this.columnNewsDescription = new global::System.Data.DataColumn("NewsDescription", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNewsDescription);
                this.columnIsActive = new global::System.Data.DataColumn("IsActive", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsActive);
                this.columnIsPaid = new global::System.Data.DataColumn("IsPaid", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsPaid);
                this.columnTicker = new global::System.Data.DataColumn("Ticker", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTicker);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnNewsId}, true));
                this.columnNewsId.AutoIncrement = true;
                this.columnNewsId.AutoIncrementSeed = -1;
                this.columnNewsId.AutoIncrementStep = -1;
                this.columnNewsId.AllowDBNull = false;
                this.columnNewsId.ReadOnly = true;
                this.columnNewsId.Unique = true;
                this.columnNewsTitle.AllowDBNull = false;
                this.columnNewsTitle.MaxLength = 5000;
                this.columnNewsDateTime.AllowDBNull = false;
                this.columnNewsDescription.AllowDBNull = false;
                this.columnNewsDescription.MaxLength = 1073741823;
                this.columnIsActive.AllowDBNull = false;
                this.columnIsPaid.AllowDBNull = false;
                this.columnTicker.AllowDBNull = false;
                this.columnTicker.MaxLength = 12;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public NewsAndViewsRow NewNewsAndViewsRow() {
                return ((NewsAndViewsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new NewsAndViewsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(NewsAndViewsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.NewsAndViewsRowChanged != null)) {
                    this.NewsAndViewsRowChanged(this, new NewsAndViewsRowChangeEvent(((NewsAndViewsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.NewsAndViewsRowChanging != null)) {
                    this.NewsAndViewsRowChanging(this, new NewsAndViewsRowChangeEvent(((NewsAndViewsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.NewsAndViewsRowDeleted != null)) {
                    this.NewsAndViewsRowDeleted(this, new NewsAndViewsRowChangeEvent(((NewsAndViewsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.NewsAndViewsRowDeleting != null)) {
                    this.NewsAndViewsRowDeleting(this, new NewsAndViewsRowChangeEvent(((NewsAndViewsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveNewsAndViewsRow(NewsAndViewsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                USAdvisoryDataSet ds = new USAdvisoryDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "NewsAndViewsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class OrdersDataTable : global::System.Data.TypedTableBase<OrdersRow> {
            
            private global::System.Data.DataColumn columnOrderId;
            
            private global::System.Data.DataColumn columnUniqueOrderId;
            
            private global::System.Data.DataColumn columnUserId;
            
            private global::System.Data.DataColumn columnMonthsOfSubscriptionId;
            
            private global::System.Data.DataColumn columnPaymentDate;
            
            private global::System.Data.DataColumn columnVendorReferenceId;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OrdersDataTable() {
                this.TableName = "Orders";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal OrdersDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected OrdersDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OrderIdColumn {
                get {
                    return this.columnOrderId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UniqueOrderIdColumn {
                get {
                    return this.columnUniqueOrderId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UserIdColumn {
                get {
                    return this.columnUserId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MonthsOfSubscriptionIdColumn {
                get {
                    return this.columnMonthsOfSubscriptionId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PaymentDateColumn {
                get {
                    return this.columnPaymentDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn VendorReferenceIdColumn {
                get {
                    return this.columnVendorReferenceId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OrdersRow this[int index] {
                get {
                    return ((OrdersRow)(this.Rows[index]));
                }
            }
            
            public event OrdersRowChangeEventHandler OrdersRowChanging;
            
            public event OrdersRowChangeEventHandler OrdersRowChanged;
            
            public event OrdersRowChangeEventHandler OrdersRowDeleting;
            
            public event OrdersRowChangeEventHandler OrdersRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddOrdersRow(OrdersRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OrdersRow AddOrdersRow(string UniqueOrderId, UsersRow parentUsersRowByFK_Orders_Users, SubscriptionLookUpRow parentSubscriptionLookUpRowByFK_Orders_SubscriptionLookUp, System.DateTime PaymentDate, string VendorReferenceId) {
                OrdersRow rowOrdersRow = ((OrdersRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        UniqueOrderId,
                        null,
                        null,
                        PaymentDate,
                        VendorReferenceId};
                if ((parentUsersRowByFK_Orders_Users != null)) {
                    columnValuesArray[2] = parentUsersRowByFK_Orders_Users[0];
                }
                if ((parentSubscriptionLookUpRowByFK_Orders_SubscriptionLookUp != null)) {
                    columnValuesArray[3] = parentSubscriptionLookUpRowByFK_Orders_SubscriptionLookUp[0];
                }
                rowOrdersRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowOrdersRow);
                return rowOrdersRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OrdersRow FindByOrderId(int OrderId) {
                return ((OrdersRow)(this.Rows.Find(new object[] {
                            OrderId})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                OrdersDataTable cln = ((OrdersDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new OrdersDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnOrderId = base.Columns["OrderId"];
                this.columnUniqueOrderId = base.Columns["UniqueOrderId"];
                this.columnUserId = base.Columns["UserId"];
                this.columnMonthsOfSubscriptionId = base.Columns["MonthsOfSubscriptionId"];
                this.columnPaymentDate = base.Columns["PaymentDate"];
                this.columnVendorReferenceId = base.Columns["VendorReferenceId"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnOrderId = new global::System.Data.DataColumn("OrderId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOrderId);
                this.columnUniqueOrderId = new global::System.Data.DataColumn("UniqueOrderId", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUniqueOrderId);
                this.columnUserId = new global::System.Data.DataColumn("UserId", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUserId);
                this.columnMonthsOfSubscriptionId = new global::System.Data.DataColumn("MonthsOfSubscriptionId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMonthsOfSubscriptionId);
                this.columnPaymentDate = new global::System.Data.DataColumn("PaymentDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPaymentDate);
                this.columnVendorReferenceId = new global::System.Data.DataColumn("VendorReferenceId", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnVendorReferenceId);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnOrderId}, true));
                this.columnOrderId.AutoIncrement = true;
                this.columnOrderId.AutoIncrementSeed = -1;
                this.columnOrderId.AutoIncrementStep = -1;
                this.columnOrderId.AllowDBNull = false;
                this.columnOrderId.ReadOnly = true;
                this.columnOrderId.Unique = true;
                this.columnUniqueOrderId.AllowDBNull = false;
                this.columnUniqueOrderId.MaxLength = 500;
                this.columnUserId.AllowDBNull = false;
                this.columnUserId.MaxLength = 500;
                this.columnMonthsOfSubscriptionId.AllowDBNull = false;
                this.columnPaymentDate.AllowDBNull = false;
                this.columnVendorReferenceId.MaxLength = 500;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OrdersRow NewOrdersRow() {
                return ((OrdersRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new OrdersRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(OrdersRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.OrdersRowChanged != null)) {
                    this.OrdersRowChanged(this, new OrdersRowChangeEvent(((OrdersRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.OrdersRowChanging != null)) {
                    this.OrdersRowChanging(this, new OrdersRowChangeEvent(((OrdersRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.OrdersRowDeleted != null)) {
                    this.OrdersRowDeleted(this, new OrdersRowChangeEvent(((OrdersRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.OrdersRowDeleting != null)) {
                    this.OrdersRowDeleting(this, new OrdersRowChangeEvent(((OrdersRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveOrdersRow(OrdersRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                USAdvisoryDataSet ds = new USAdvisoryDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "OrdersDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class PortfolioLookUpDataTable : global::System.Data.TypedTableBase<PortfolioLookUpRow> {
            
            private global::System.Data.DataColumn columnPortfolioId;
            
            private global::System.Data.DataColumn columnPortfolioName;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PortfolioLookUpDataTable() {
                this.TableName = "PortfolioLookUp";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PortfolioLookUpDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected PortfolioLookUpDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PortfolioIdColumn {
                get {
                    return this.columnPortfolioId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PortfolioNameColumn {
                get {
                    return this.columnPortfolioName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PortfolioLookUpRow this[int index] {
                get {
                    return ((PortfolioLookUpRow)(this.Rows[index]));
                }
            }
            
            public event PortfolioLookUpRowChangeEventHandler PortfolioLookUpRowChanging;
            
            public event PortfolioLookUpRowChangeEventHandler PortfolioLookUpRowChanged;
            
            public event PortfolioLookUpRowChangeEventHandler PortfolioLookUpRowDeleting;
            
            public event PortfolioLookUpRowChangeEventHandler PortfolioLookUpRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddPortfolioLookUpRow(PortfolioLookUpRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PortfolioLookUpRow AddPortfolioLookUpRow(string PortfolioName) {
                PortfolioLookUpRow rowPortfolioLookUpRow = ((PortfolioLookUpRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        PortfolioName};
                rowPortfolioLookUpRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowPortfolioLookUpRow);
                return rowPortfolioLookUpRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PortfolioLookUpRow FindByPortfolioId(int PortfolioId) {
                return ((PortfolioLookUpRow)(this.Rows.Find(new object[] {
                            PortfolioId})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                PortfolioLookUpDataTable cln = ((PortfolioLookUpDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new PortfolioLookUpDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnPortfolioId = base.Columns["PortfolioId"];
                this.columnPortfolioName = base.Columns["PortfolioName"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnPortfolioId = new global::System.Data.DataColumn("PortfolioId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPortfolioId);
                this.columnPortfolioName = new global::System.Data.DataColumn("PortfolioName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPortfolioName);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnPortfolioId}, true));
                this.columnPortfolioId.AutoIncrement = true;
                this.columnPortfolioId.AutoIncrementSeed = -1;
                this.columnPortfolioId.AutoIncrementStep = -1;
                this.columnPortfolioId.AllowDBNull = false;
                this.columnPortfolioId.ReadOnly = true;
                this.columnPortfolioId.Unique = true;
                this.columnPortfolioName.AllowDBNull = false;
                this.columnPortfolioName.MaxLength = 100;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PortfolioLookUpRow NewPortfolioLookUpRow() {
                return ((PortfolioLookUpRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new PortfolioLookUpRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(PortfolioLookUpRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.PortfolioLookUpRowChanged != null)) {
                    this.PortfolioLookUpRowChanged(this, new PortfolioLookUpRowChangeEvent(((PortfolioLookUpRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.PortfolioLookUpRowChanging != null)) {
                    this.PortfolioLookUpRowChanging(this, new PortfolioLookUpRowChangeEvent(((PortfolioLookUpRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.PortfolioLookUpRowDeleted != null)) {
                    this.PortfolioLookUpRowDeleted(this, new PortfolioLookUpRowChangeEvent(((PortfolioLookUpRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.PortfolioLookUpRowDeleting != null)) {
                    this.PortfolioLookUpRowDeleting(this, new PortfolioLookUpRowChangeEvent(((PortfolioLookUpRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovePortfolioLookUpRow(PortfolioLookUpRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                USAdvisoryDataSet ds = new USAdvisoryDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "PortfolioLookUpDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class PortfolioTransactionsDataTable : global::System.Data.TypedTableBase<PortfolioTransactionsRow> {
            
            private global::System.Data.DataColumn columnStockTransactionId;
            
            private global::System.Data.DataColumn columnPortfolioId;
            
            private global::System.Data.DataColumn columnCompanyName;
            
            private global::System.Data.DataColumn columnStockTicker;
            
            private global::System.Data.DataColumn columnBuyOrSellId;
            
            private global::System.Data.DataColumn columnEntryPrice;
            
            private global::System.Data.DataColumn columnExitPrice;
            
            private global::System.Data.DataColumn columnStopLoss;
            
            private global::System.Data.DataColumn columnUpdates;
            
            private global::System.Data.DataColumn columnUpdateDateTime;
            
            private global::System.Data.DataColumn columnPortfolioEntryDate;
            
            private global::System.Data.DataColumn columnCallStatus;
            
            private global::System.Data.DataColumn columnPortfolioExitDate;
            
            private global::System.Data.DataColumn columnIsPartiallyExited;
            
            private global::System.Data.DataColumn columnQty;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PortfolioTransactionsDataTable() {
                this.TableName = "PortfolioTransactions";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PortfolioTransactionsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected PortfolioTransactionsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StockTransactionIdColumn {
                get {
                    return this.columnStockTransactionId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PortfolioIdColumn {
                get {
                    return this.columnPortfolioId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CompanyNameColumn {
                get {
                    return this.columnCompanyName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StockTickerColumn {
                get {
                    return this.columnStockTicker;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BuyOrSellIdColumn {
                get {
                    return this.columnBuyOrSellId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EntryPriceColumn {
                get {
                    return this.columnEntryPrice;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ExitPriceColumn {
                get {
                    return this.columnExitPrice;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StopLossColumn {
                get {
                    return this.columnStopLoss;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UpdatesColumn {
                get {
                    return this.columnUpdates;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UpdateDateTimeColumn {
                get {
                    return this.columnUpdateDateTime;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PortfolioEntryDateColumn {
                get {
                    return this.columnPortfolioEntryDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CallStatusColumn {
                get {
                    return this.columnCallStatus;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PortfolioExitDateColumn {
                get {
                    return this.columnPortfolioExitDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsPartiallyExitedColumn {
                get {
                    return this.columnIsPartiallyExited;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn QtyColumn {
                get {
                    return this.columnQty;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PortfolioTransactionsRow this[int index] {
                get {
                    return ((PortfolioTransactionsRow)(this.Rows[index]));
                }
            }
            
            public event PortfolioTransactionsRowChangeEventHandler PortfolioTransactionsRowChanging;
            
            public event PortfolioTransactionsRowChangeEventHandler PortfolioTransactionsRowChanged;
            
            public event PortfolioTransactionsRowChangeEventHandler PortfolioTransactionsRowDeleting;
            
            public event PortfolioTransactionsRowChangeEventHandler PortfolioTransactionsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddPortfolioTransactionsRow(PortfolioTransactionsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PortfolioTransactionsRow AddPortfolioTransactionsRow(int PortfolioId, string CompanyName, string StockTicker, int BuyOrSellId, decimal EntryPrice, decimal ExitPrice, decimal StopLoss, string Updates, System.DateTime UpdateDateTime, System.DateTime PortfolioEntryDate, string CallStatus, System.DateTime PortfolioExitDate, bool IsPartiallyExited, int Qty) {
                PortfolioTransactionsRow rowPortfolioTransactionsRow = ((PortfolioTransactionsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        PortfolioId,
                        CompanyName,
                        StockTicker,
                        BuyOrSellId,
                        EntryPrice,
                        ExitPrice,
                        StopLoss,
                        Updates,
                        UpdateDateTime,
                        PortfolioEntryDate,
                        CallStatus,
                        PortfolioExitDate,
                        IsPartiallyExited,
                        Qty};
                rowPortfolioTransactionsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowPortfolioTransactionsRow);
                return rowPortfolioTransactionsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PortfolioTransactionsRow FindByStockTransactionId(int StockTransactionId) {
                return ((PortfolioTransactionsRow)(this.Rows.Find(new object[] {
                            StockTransactionId})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                PortfolioTransactionsDataTable cln = ((PortfolioTransactionsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new PortfolioTransactionsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnStockTransactionId = base.Columns["StockTransactionId"];
                this.columnPortfolioId = base.Columns["PortfolioId"];
                this.columnCompanyName = base.Columns["CompanyName"];
                this.columnStockTicker = base.Columns["StockTicker"];
                this.columnBuyOrSellId = base.Columns["BuyOrSellId"];
                this.columnEntryPrice = base.Columns["EntryPrice"];
                this.columnExitPrice = base.Columns["ExitPrice"];
                this.columnStopLoss = base.Columns["StopLoss"];
                this.columnUpdates = base.Columns["Updates"];
                this.columnUpdateDateTime = base.Columns["UpdateDateTime"];
                this.columnPortfolioEntryDate = base.Columns["PortfolioEntryDate"];
                this.columnCallStatus = base.Columns["CallStatus"];
                this.columnPortfolioExitDate = base.Columns["PortfolioExitDate"];
                this.columnIsPartiallyExited = base.Columns["IsPartiallyExited"];
                this.columnQty = base.Columns["Qty"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnStockTransactionId = new global::System.Data.DataColumn("StockTransactionId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStockTransactionId);
                this.columnPortfolioId = new global::System.Data.DataColumn("PortfolioId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPortfolioId);
                this.columnCompanyName = new global::System.Data.DataColumn("CompanyName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCompanyName);
                this.columnStockTicker = new global::System.Data.DataColumn("StockTicker", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStockTicker);
                this.columnBuyOrSellId = new global::System.Data.DataColumn("BuyOrSellId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBuyOrSellId);
                this.columnEntryPrice = new global::System.Data.DataColumn("EntryPrice", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEntryPrice);
                this.columnExitPrice = new global::System.Data.DataColumn("ExitPrice", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnExitPrice);
                this.columnStopLoss = new global::System.Data.DataColumn("StopLoss", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStopLoss);
                this.columnUpdates = new global::System.Data.DataColumn("Updates", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUpdates);
                this.columnUpdateDateTime = new global::System.Data.DataColumn("UpdateDateTime", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUpdateDateTime);
                this.columnPortfolioEntryDate = new global::System.Data.DataColumn("PortfolioEntryDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPortfolioEntryDate);
                this.columnCallStatus = new global::System.Data.DataColumn("CallStatus", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCallStatus);
                this.columnPortfolioExitDate = new global::System.Data.DataColumn("PortfolioExitDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPortfolioExitDate);
                this.columnIsPartiallyExited = new global::System.Data.DataColumn("IsPartiallyExited", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsPartiallyExited);
                this.columnQty = new global::System.Data.DataColumn("Qty", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnQty);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnStockTransactionId}, true));
                this.columnStockTransactionId.AutoIncrement = true;
                this.columnStockTransactionId.AutoIncrementSeed = -1;
                this.columnStockTransactionId.AutoIncrementStep = -1;
                this.columnStockTransactionId.AllowDBNull = false;
                this.columnStockTransactionId.ReadOnly = true;
                this.columnStockTransactionId.Unique = true;
                this.columnPortfolioId.AllowDBNull = false;
                this.columnCompanyName.AllowDBNull = false;
                this.columnCompanyName.MaxLength = 500;
                this.columnStockTicker.AllowDBNull = false;
                this.columnStockTicker.MaxLength = 100;
                this.columnBuyOrSellId.AllowDBNull = false;
                this.columnEntryPrice.AllowDBNull = false;
                this.columnExitPrice.AllowDBNull = false;
                this.columnStopLoss.AllowDBNull = false;
                this.columnUpdates.AllowDBNull = false;
                this.columnUpdates.MaxLength = 1073741823;
                this.columnUpdateDateTime.AllowDBNull = false;
                this.columnPortfolioEntryDate.AllowDBNull = false;
                this.columnCallStatus.AllowDBNull = false;
                this.columnCallStatus.MaxLength = 1;
                this.columnIsPartiallyExited.AllowDBNull = false;
                this.columnQty.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PortfolioTransactionsRow NewPortfolioTransactionsRow() {
                return ((PortfolioTransactionsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new PortfolioTransactionsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(PortfolioTransactionsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.PortfolioTransactionsRowChanged != null)) {
                    this.PortfolioTransactionsRowChanged(this, new PortfolioTransactionsRowChangeEvent(((PortfolioTransactionsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.PortfolioTransactionsRowChanging != null)) {
                    this.PortfolioTransactionsRowChanging(this, new PortfolioTransactionsRowChangeEvent(((PortfolioTransactionsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.PortfolioTransactionsRowDeleted != null)) {
                    this.PortfolioTransactionsRowDeleted(this, new PortfolioTransactionsRowChangeEvent(((PortfolioTransactionsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.PortfolioTransactionsRowDeleting != null)) {
                    this.PortfolioTransactionsRowDeleting(this, new PortfolioTransactionsRowChangeEvent(((PortfolioTransactionsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovePortfolioTransactionsRow(PortfolioTransactionsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                USAdvisoryDataSet ds = new USAdvisoryDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "PortfolioTransactionsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class PremiumServicesDataTable : global::System.Data.TypedTableBase<PremiumServicesRow> {
            
            private global::System.Data.DataColumn columnPremiumServiceId;
            
            private global::System.Data.DataColumn columnTicker;
            
            private global::System.Data.DataColumn columnPremiumServiceTitle;
            
            private global::System.Data.DataColumn columnPremiumServiceDescription;
            
            private global::System.Data.DataColumn columnIsActive;
            
            private global::System.Data.DataColumn columnIsPaid;
            
            private global::System.Data.DataColumn columnTypeOfTradeId;
            
            private global::System.Data.DataColumn columnPremiumServiceDate;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PremiumServicesDataTable() {
                this.TableName = "PremiumServices";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PremiumServicesDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected PremiumServicesDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PremiumServiceIdColumn {
                get {
                    return this.columnPremiumServiceId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TickerColumn {
                get {
                    return this.columnTicker;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PremiumServiceTitleColumn {
                get {
                    return this.columnPremiumServiceTitle;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PremiumServiceDescriptionColumn {
                get {
                    return this.columnPremiumServiceDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsActiveColumn {
                get {
                    return this.columnIsActive;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsPaidColumn {
                get {
                    return this.columnIsPaid;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TypeOfTradeIdColumn {
                get {
                    return this.columnTypeOfTradeId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PremiumServiceDateColumn {
                get {
                    return this.columnPremiumServiceDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PremiumServicesRow this[int index] {
                get {
                    return ((PremiumServicesRow)(this.Rows[index]));
                }
            }
            
            public event PremiumServicesRowChangeEventHandler PremiumServicesRowChanging;
            
            public event PremiumServicesRowChangeEventHandler PremiumServicesRowChanged;
            
            public event PremiumServicesRowChangeEventHandler PremiumServicesRowDeleting;
            
            public event PremiumServicesRowChangeEventHandler PremiumServicesRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddPremiumServicesRow(PremiumServicesRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PremiumServicesRow AddPremiumServicesRow(string Ticker, string PremiumServiceTitle, string PremiumServiceDescription, bool IsActive, bool IsPaid, TradeTypesRow parentTradeTypesRowByFK_PremiumServices_TradeTypes, System.DateTime PremiumServiceDate) {
                PremiumServicesRow rowPremiumServicesRow = ((PremiumServicesRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        Ticker,
                        PremiumServiceTitle,
                        PremiumServiceDescription,
                        IsActive,
                        IsPaid,
                        null,
                        PremiumServiceDate};
                if ((parentTradeTypesRowByFK_PremiumServices_TradeTypes != null)) {
                    columnValuesArray[6] = parentTradeTypesRowByFK_PremiumServices_TradeTypes[0];
                }
                rowPremiumServicesRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowPremiumServicesRow);
                return rowPremiumServicesRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PremiumServicesRow FindByPremiumServiceId(int PremiumServiceId) {
                return ((PremiumServicesRow)(this.Rows.Find(new object[] {
                            PremiumServiceId})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                PremiumServicesDataTable cln = ((PremiumServicesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new PremiumServicesDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnPremiumServiceId = base.Columns["PremiumServiceId"];
                this.columnTicker = base.Columns["Ticker"];
                this.columnPremiumServiceTitle = base.Columns["PremiumServiceTitle"];
                this.columnPremiumServiceDescription = base.Columns["PremiumServiceDescription"];
                this.columnIsActive = base.Columns["IsActive"];
                this.columnIsPaid = base.Columns["IsPaid"];
                this.columnTypeOfTradeId = base.Columns["TypeOfTradeId"];
                this.columnPremiumServiceDate = base.Columns["PremiumServiceDate"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnPremiumServiceId = new global::System.Data.DataColumn("PremiumServiceId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPremiumServiceId);
                this.columnTicker = new global::System.Data.DataColumn("Ticker", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTicker);
                this.columnPremiumServiceTitle = new global::System.Data.DataColumn("PremiumServiceTitle", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPremiumServiceTitle);
                this.columnPremiumServiceDescription = new global::System.Data.DataColumn("PremiumServiceDescription", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPremiumServiceDescription);
                this.columnIsActive = new global::System.Data.DataColumn("IsActive", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsActive);
                this.columnIsPaid = new global::System.Data.DataColumn("IsPaid", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsPaid);
                this.columnTypeOfTradeId = new global::System.Data.DataColumn("TypeOfTradeId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTypeOfTradeId);
                this.columnPremiumServiceDate = new global::System.Data.DataColumn("PremiumServiceDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPremiumServiceDate);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnPremiumServiceId}, true));
                this.columnPremiumServiceId.AutoIncrement = true;
                this.columnPremiumServiceId.AutoIncrementSeed = -1;
                this.columnPremiumServiceId.AutoIncrementStep = -1;
                this.columnPremiumServiceId.AllowDBNull = false;
                this.columnPremiumServiceId.ReadOnly = true;
                this.columnPremiumServiceId.Unique = true;
                this.columnTicker.AllowDBNull = false;
                this.columnTicker.MaxLength = 12;
                this.columnPremiumServiceTitle.AllowDBNull = false;
                this.columnPremiumServiceTitle.MaxLength = 500;
                this.columnPremiumServiceDescription.AllowDBNull = false;
                this.columnPremiumServiceDescription.MaxLength = 1073741823;
                this.columnIsActive.AllowDBNull = false;
                this.columnIsPaid.AllowDBNull = false;
                this.columnTypeOfTradeId.AllowDBNull = false;
                this.columnPremiumServiceDate.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PremiumServicesRow NewPremiumServicesRow() {
                return ((PremiumServicesRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new PremiumServicesRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(PremiumServicesRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.PremiumServicesRowChanged != null)) {
                    this.PremiumServicesRowChanged(this, new PremiumServicesRowChangeEvent(((PremiumServicesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.PremiumServicesRowChanging != null)) {
                    this.PremiumServicesRowChanging(this, new PremiumServicesRowChangeEvent(((PremiumServicesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.PremiumServicesRowDeleted != null)) {
                    this.PremiumServicesRowDeleted(this, new PremiumServicesRowChangeEvent(((PremiumServicesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.PremiumServicesRowDeleting != null)) {
                    this.PremiumServicesRowDeleting(this, new PremiumServicesRowChangeEvent(((PremiumServicesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovePremiumServicesRow(PremiumServicesRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                USAdvisoryDataSet ds = new USAdvisoryDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "PremiumServicesDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class RecommendationsDataTable : global::System.Data.TypedTableBase<RecommendationsRow> {
            
            private global::System.Data.DataColumn columnRecommendationId;
            
            private global::System.Data.DataColumn columnTradeTypeId;
            
            private global::System.Data.DataColumn columnCompanyName;
            
            private global::System.Data.DataColumn columnStockSymbol;
            
            private global::System.Data.DataColumn columnBuyOrSellId;
            
            private global::System.Data.DataColumn columnEntryPoint;
            
            private global::System.Data.DataColumn columnExitPoint;
            
            private global::System.Data.DataColumn columnStopLoss;
            
            private global::System.Data.DataColumn columnUpdates;
            
            private global::System.Data.DataColumn columnRecommendedDate;
            
            private global::System.Data.DataColumn columnRecommendationStatus;
            
            private global::System.Data.DataColumn columnPerformanceEnable;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RecommendationsDataTable() {
                this.TableName = "Recommendations";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal RecommendationsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected RecommendationsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RecommendationIdColumn {
                get {
                    return this.columnRecommendationId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TradeTypeIdColumn {
                get {
                    return this.columnTradeTypeId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CompanyNameColumn {
                get {
                    return this.columnCompanyName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StockSymbolColumn {
                get {
                    return this.columnStockSymbol;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BuyOrSellIdColumn {
                get {
                    return this.columnBuyOrSellId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EntryPointColumn {
                get {
                    return this.columnEntryPoint;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ExitPointColumn {
                get {
                    return this.columnExitPoint;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StopLossColumn {
                get {
                    return this.columnStopLoss;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UpdatesColumn {
                get {
                    return this.columnUpdates;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RecommendedDateColumn {
                get {
                    return this.columnRecommendedDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RecommendationStatusColumn {
                get {
                    return this.columnRecommendationStatus;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PerformanceEnableColumn {
                get {
                    return this.columnPerformanceEnable;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RecommendationsRow this[int index] {
                get {
                    return ((RecommendationsRow)(this.Rows[index]));
                }
            }
            
            public event RecommendationsRowChangeEventHandler RecommendationsRowChanging;
            
            public event RecommendationsRowChangeEventHandler RecommendationsRowChanged;
            
            public event RecommendationsRowChangeEventHandler RecommendationsRowDeleting;
            
            public event RecommendationsRowChangeEventHandler RecommendationsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddRecommendationsRow(RecommendationsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RecommendationsRow AddRecommendationsRow(int RecommendationId, TradeTypesRow parentTradeTypesRowByFK_Recommendations_TradeTypes, string CompanyName, string StockSymbol, BuyOrSellLookUpRow parentBuyOrSellLookUpRowByFK_Recommendations_BuyOrSellLookUp, decimal EntryPoint, decimal ExitPoint, decimal StopLoss, string Updates, System.DateTime RecommendedDate, bool RecommendationStatus, bool PerformanceEnable) {
                RecommendationsRow rowRecommendationsRow = ((RecommendationsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        RecommendationId,
                        null,
                        CompanyName,
                        StockSymbol,
                        null,
                        EntryPoint,
                        ExitPoint,
                        StopLoss,
                        Updates,
                        RecommendedDate,
                        RecommendationStatus,
                        PerformanceEnable};
                if ((parentTradeTypesRowByFK_Recommendations_TradeTypes != null)) {
                    columnValuesArray[1] = parentTradeTypesRowByFK_Recommendations_TradeTypes[0];
                }
                if ((parentBuyOrSellLookUpRowByFK_Recommendations_BuyOrSellLookUp != null)) {
                    columnValuesArray[4] = parentBuyOrSellLookUpRowByFK_Recommendations_BuyOrSellLookUp[0];
                }
                rowRecommendationsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowRecommendationsRow);
                return rowRecommendationsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RecommendationsRow FindByRecommendationId(int RecommendationId) {
                return ((RecommendationsRow)(this.Rows.Find(new object[] {
                            RecommendationId})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                RecommendationsDataTable cln = ((RecommendationsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new RecommendationsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnRecommendationId = base.Columns["RecommendationId"];
                this.columnTradeTypeId = base.Columns["TradeTypeId"];
                this.columnCompanyName = base.Columns["CompanyName"];
                this.columnStockSymbol = base.Columns["StockSymbol"];
                this.columnBuyOrSellId = base.Columns["BuyOrSellId"];
                this.columnEntryPoint = base.Columns["EntryPoint"];
                this.columnExitPoint = base.Columns["ExitPoint"];
                this.columnStopLoss = base.Columns["StopLoss"];
                this.columnUpdates = base.Columns["Updates"];
                this.columnRecommendedDate = base.Columns["RecommendedDate"];
                this.columnRecommendationStatus = base.Columns["RecommendationStatus"];
                this.columnPerformanceEnable = base.Columns["PerformanceEnable"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnRecommendationId = new global::System.Data.DataColumn("RecommendationId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRecommendationId);
                this.columnTradeTypeId = new global::System.Data.DataColumn("TradeTypeId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTradeTypeId);
                this.columnCompanyName = new global::System.Data.DataColumn("CompanyName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCompanyName);
                this.columnStockSymbol = new global::System.Data.DataColumn("StockSymbol", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStockSymbol);
                this.columnBuyOrSellId = new global::System.Data.DataColumn("BuyOrSellId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBuyOrSellId);
                this.columnEntryPoint = new global::System.Data.DataColumn("EntryPoint", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEntryPoint);
                this.columnExitPoint = new global::System.Data.DataColumn("ExitPoint", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnExitPoint);
                this.columnStopLoss = new global::System.Data.DataColumn("StopLoss", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStopLoss);
                this.columnUpdates = new global::System.Data.DataColumn("Updates", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUpdates);
                this.columnRecommendedDate = new global::System.Data.DataColumn("RecommendedDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRecommendedDate);
                this.columnRecommendationStatus = new global::System.Data.DataColumn("RecommendationStatus", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRecommendationStatus);
                this.columnPerformanceEnable = new global::System.Data.DataColumn("PerformanceEnable", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPerformanceEnable);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnRecommendationId}, true));
                this.columnRecommendationId.AllowDBNull = false;
                this.columnRecommendationId.Unique = true;
                this.columnTradeTypeId.AllowDBNull = false;
                this.columnCompanyName.AllowDBNull = false;
                this.columnCompanyName.MaxLength = 1000;
                this.columnStockSymbol.AllowDBNull = false;
                this.columnStockSymbol.MaxLength = 50;
                this.columnBuyOrSellId.AllowDBNull = false;
                this.columnEntryPoint.AllowDBNull = false;
                this.columnExitPoint.AllowDBNull = false;
                this.columnUpdates.MaxLength = 1073741823;
                this.columnRecommendationStatus.AllowDBNull = false;
                this.columnPerformanceEnable.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RecommendationsRow NewRecommendationsRow() {
                return ((RecommendationsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new RecommendationsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(RecommendationsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.RecommendationsRowChanged != null)) {
                    this.RecommendationsRowChanged(this, new RecommendationsRowChangeEvent(((RecommendationsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.RecommendationsRowChanging != null)) {
                    this.RecommendationsRowChanging(this, new RecommendationsRowChangeEvent(((RecommendationsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.RecommendationsRowDeleted != null)) {
                    this.RecommendationsRowDeleted(this, new RecommendationsRowChangeEvent(((RecommendationsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.RecommendationsRowDeleting != null)) {
                    this.RecommendationsRowDeleting(this, new RecommendationsRowChangeEvent(((RecommendationsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveRecommendationsRow(RecommendationsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                USAdvisoryDataSet ds = new USAdvisoryDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "RecommendationsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class SubscriptionDataTable : global::System.Data.TypedTableBase<SubscriptionRow> {
            
            private global::System.Data.DataColumn columnUserId;
            
            private global::System.Data.DataColumn columnSubscriptionStartDate;
            
            private global::System.Data.DataColumn columnSubscriptionEndDate;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SubscriptionDataTable() {
                this.TableName = "Subscription";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SubscriptionDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected SubscriptionDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UserIdColumn {
                get {
                    return this.columnUserId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SubscriptionStartDateColumn {
                get {
                    return this.columnSubscriptionStartDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SubscriptionEndDateColumn {
                get {
                    return this.columnSubscriptionEndDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SubscriptionRow this[int index] {
                get {
                    return ((SubscriptionRow)(this.Rows[index]));
                }
            }
            
            public event SubscriptionRowChangeEventHandler SubscriptionRowChanging;
            
            public event SubscriptionRowChangeEventHandler SubscriptionRowChanged;
            
            public event SubscriptionRowChangeEventHandler SubscriptionRowDeleting;
            
            public event SubscriptionRowChangeEventHandler SubscriptionRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddSubscriptionRow(SubscriptionRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SubscriptionRow AddSubscriptionRow(UsersRow parentUsersRowByFK_Subscription_Users, System.DateTime SubscriptionStartDate, System.DateTime SubscriptionEndDate) {
                SubscriptionRow rowSubscriptionRow = ((SubscriptionRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        SubscriptionStartDate,
                        SubscriptionEndDate};
                if ((parentUsersRowByFK_Subscription_Users != null)) {
                    columnValuesArray[0] = parentUsersRowByFK_Subscription_Users[0];
                }
                rowSubscriptionRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowSubscriptionRow);
                return rowSubscriptionRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                SubscriptionDataTable cln = ((SubscriptionDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new SubscriptionDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnUserId = base.Columns["UserId"];
                this.columnSubscriptionStartDate = base.Columns["SubscriptionStartDate"];
                this.columnSubscriptionEndDate = base.Columns["SubscriptionEndDate"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnUserId = new global::System.Data.DataColumn("UserId", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUserId);
                this.columnSubscriptionStartDate = new global::System.Data.DataColumn("SubscriptionStartDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSubscriptionStartDate);
                this.columnSubscriptionEndDate = new global::System.Data.DataColumn("SubscriptionEndDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSubscriptionEndDate);
                this.columnUserId.AllowDBNull = false;
                this.columnUserId.MaxLength = 500;
                this.columnSubscriptionStartDate.AllowDBNull = false;
                this.columnSubscriptionEndDate.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SubscriptionRow NewSubscriptionRow() {
                return ((SubscriptionRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new SubscriptionRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(SubscriptionRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SubscriptionRowChanged != null)) {
                    this.SubscriptionRowChanged(this, new SubscriptionRowChangeEvent(((SubscriptionRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SubscriptionRowChanging != null)) {
                    this.SubscriptionRowChanging(this, new SubscriptionRowChangeEvent(((SubscriptionRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SubscriptionRowDeleted != null)) {
                    this.SubscriptionRowDeleted(this, new SubscriptionRowChangeEvent(((SubscriptionRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SubscriptionRowDeleting != null)) {
                    this.SubscriptionRowDeleting(this, new SubscriptionRowChangeEvent(((SubscriptionRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveSubscriptionRow(SubscriptionRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                USAdvisoryDataSet ds = new USAdvisoryDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "SubscriptionDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class SubscriptionLookUpDataTable : global::System.Data.TypedTableBase<SubscriptionLookUpRow> {
            
            private global::System.Data.DataColumn columnNoOfMonthsSubscriptionId;
            
            private global::System.Data.DataColumn columnNoOfMonthsSubscriptionDesc;
            
            private global::System.Data.DataColumn columnAmount;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SubscriptionLookUpDataTable() {
                this.TableName = "SubscriptionLookUp";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SubscriptionLookUpDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected SubscriptionLookUpDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NoOfMonthsSubscriptionIdColumn {
                get {
                    return this.columnNoOfMonthsSubscriptionId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NoOfMonthsSubscriptionDescColumn {
                get {
                    return this.columnNoOfMonthsSubscriptionDesc;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AmountColumn {
                get {
                    return this.columnAmount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SubscriptionLookUpRow this[int index] {
                get {
                    return ((SubscriptionLookUpRow)(this.Rows[index]));
                }
            }
            
            public event SubscriptionLookUpRowChangeEventHandler SubscriptionLookUpRowChanging;
            
            public event SubscriptionLookUpRowChangeEventHandler SubscriptionLookUpRowChanged;
            
            public event SubscriptionLookUpRowChangeEventHandler SubscriptionLookUpRowDeleting;
            
            public event SubscriptionLookUpRowChangeEventHandler SubscriptionLookUpRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddSubscriptionLookUpRow(SubscriptionLookUpRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SubscriptionLookUpRow AddSubscriptionLookUpRow(string NoOfMonthsSubscriptionDesc, decimal Amount) {
                SubscriptionLookUpRow rowSubscriptionLookUpRow = ((SubscriptionLookUpRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        NoOfMonthsSubscriptionDesc,
                        Amount};
                rowSubscriptionLookUpRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowSubscriptionLookUpRow);
                return rowSubscriptionLookUpRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SubscriptionLookUpRow FindByNoOfMonthsSubscriptionId(int NoOfMonthsSubscriptionId) {
                return ((SubscriptionLookUpRow)(this.Rows.Find(new object[] {
                            NoOfMonthsSubscriptionId})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                SubscriptionLookUpDataTable cln = ((SubscriptionLookUpDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new SubscriptionLookUpDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnNoOfMonthsSubscriptionId = base.Columns["NoOfMonthsSubscriptionId"];
                this.columnNoOfMonthsSubscriptionDesc = base.Columns["NoOfMonthsSubscriptionDesc"];
                this.columnAmount = base.Columns["Amount"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnNoOfMonthsSubscriptionId = new global::System.Data.DataColumn("NoOfMonthsSubscriptionId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNoOfMonthsSubscriptionId);
                this.columnNoOfMonthsSubscriptionDesc = new global::System.Data.DataColumn("NoOfMonthsSubscriptionDesc", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNoOfMonthsSubscriptionDesc);
                this.columnAmount = new global::System.Data.DataColumn("Amount", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAmount);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnNoOfMonthsSubscriptionId}, true));
                this.columnNoOfMonthsSubscriptionId.AutoIncrement = true;
                this.columnNoOfMonthsSubscriptionId.AutoIncrementSeed = -1;
                this.columnNoOfMonthsSubscriptionId.AutoIncrementStep = -1;
                this.columnNoOfMonthsSubscriptionId.AllowDBNull = false;
                this.columnNoOfMonthsSubscriptionId.ReadOnly = true;
                this.columnNoOfMonthsSubscriptionId.Unique = true;
                this.columnNoOfMonthsSubscriptionDesc.AllowDBNull = false;
                this.columnNoOfMonthsSubscriptionDesc.MaxLength = 5000;
                this.columnAmount.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SubscriptionLookUpRow NewSubscriptionLookUpRow() {
                return ((SubscriptionLookUpRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new SubscriptionLookUpRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(SubscriptionLookUpRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SubscriptionLookUpRowChanged != null)) {
                    this.SubscriptionLookUpRowChanged(this, new SubscriptionLookUpRowChangeEvent(((SubscriptionLookUpRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SubscriptionLookUpRowChanging != null)) {
                    this.SubscriptionLookUpRowChanging(this, new SubscriptionLookUpRowChangeEvent(((SubscriptionLookUpRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SubscriptionLookUpRowDeleted != null)) {
                    this.SubscriptionLookUpRowDeleted(this, new SubscriptionLookUpRowChangeEvent(((SubscriptionLookUpRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SubscriptionLookUpRowDeleting != null)) {
                    this.SubscriptionLookUpRowDeleting(this, new SubscriptionLookUpRowChangeEvent(((SubscriptionLookUpRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveSubscriptionLookUpRow(SubscriptionLookUpRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                USAdvisoryDataSet ds = new USAdvisoryDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "SubscriptionLookUpDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class TradeTypesDataTable : global::System.Data.TypedTableBase<TradeTypesRow> {
            
            private global::System.Data.DataColumn columnTypeOfTradeId;
            
            private global::System.Data.DataColumn columnTradeType;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TradeTypesDataTable() {
                this.TableName = "TradeTypes";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TradeTypesDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected TradeTypesDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TypeOfTradeIdColumn {
                get {
                    return this.columnTypeOfTradeId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TradeTypeColumn {
                get {
                    return this.columnTradeType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TradeTypesRow this[int index] {
                get {
                    return ((TradeTypesRow)(this.Rows[index]));
                }
            }
            
            public event TradeTypesRowChangeEventHandler TradeTypesRowChanging;
            
            public event TradeTypesRowChangeEventHandler TradeTypesRowChanged;
            
            public event TradeTypesRowChangeEventHandler TradeTypesRowDeleting;
            
            public event TradeTypesRowChangeEventHandler TradeTypesRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddTradeTypesRow(TradeTypesRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TradeTypesRow AddTradeTypesRow(string TradeType) {
                TradeTypesRow rowTradeTypesRow = ((TradeTypesRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        TradeType};
                rowTradeTypesRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowTradeTypesRow);
                return rowTradeTypesRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TradeTypesRow FindByTypeOfTradeId(int TypeOfTradeId) {
                return ((TradeTypesRow)(this.Rows.Find(new object[] {
                            TypeOfTradeId})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                TradeTypesDataTable cln = ((TradeTypesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new TradeTypesDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnTypeOfTradeId = base.Columns["TypeOfTradeId"];
                this.columnTradeType = base.Columns["TradeType"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnTypeOfTradeId = new global::System.Data.DataColumn("TypeOfTradeId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTypeOfTradeId);
                this.columnTradeType = new global::System.Data.DataColumn("TradeType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTradeType);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnTypeOfTradeId}, true));
                this.columnTypeOfTradeId.AutoIncrement = true;
                this.columnTypeOfTradeId.AutoIncrementSeed = -1;
                this.columnTypeOfTradeId.AutoIncrementStep = -1;
                this.columnTypeOfTradeId.AllowDBNull = false;
                this.columnTypeOfTradeId.ReadOnly = true;
                this.columnTypeOfTradeId.Unique = true;
                this.columnTradeType.AllowDBNull = false;
                this.columnTradeType.MaxLength = 100;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TradeTypesRow NewTradeTypesRow() {
                return ((TradeTypesRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new TradeTypesRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(TradeTypesRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.TradeTypesRowChanged != null)) {
                    this.TradeTypesRowChanged(this, new TradeTypesRowChangeEvent(((TradeTypesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.TradeTypesRowChanging != null)) {
                    this.TradeTypesRowChanging(this, new TradeTypesRowChangeEvent(((TradeTypesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.TradeTypesRowDeleted != null)) {
                    this.TradeTypesRowDeleted(this, new TradeTypesRowChangeEvent(((TradeTypesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.TradeTypesRowDeleting != null)) {
                    this.TradeTypesRowDeleting(this, new TradeTypesRowChangeEvent(((TradeTypesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveTradeTypesRow(TradeTypesRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                USAdvisoryDataSet ds = new USAdvisoryDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "TradeTypesDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class UsersDataTable : global::System.Data.TypedTableBase<UsersRow> {
            
            private global::System.Data.DataColumn columnUserId;
            
            private global::System.Data.DataColumn columnPassword;
            
            private global::System.Data.DataColumn columnFirstName;
            
            private global::System.Data.DataColumn columnLastName;
            
            private global::System.Data.DataColumn columnPhoneNumber;
            
            private global::System.Data.DataColumn columnAddress;
            
            private global::System.Data.DataColumn columnState;
            
            private global::System.Data.DataColumn columnCountry;
            
            private global::System.Data.DataColumn columnZipCode;
            
            private global::System.Data.DataColumn columnIsPaidSubscriber;
            
            private global::System.Data.DataColumn columnIsAutoRenewal;
            
            private global::System.Data.DataColumn columnRegistrationDate;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UsersDataTable() {
                this.TableName = "Users";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal UsersDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected UsersDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UserIdColumn {
                get {
                    return this.columnUserId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PasswordColumn {
                get {
                    return this.columnPassword;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FirstNameColumn {
                get {
                    return this.columnFirstName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LastNameColumn {
                get {
                    return this.columnLastName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PhoneNumberColumn {
                get {
                    return this.columnPhoneNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AddressColumn {
                get {
                    return this.columnAddress;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StateColumn {
                get {
                    return this.columnState;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CountryColumn {
                get {
                    return this.columnCountry;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ZipCodeColumn {
                get {
                    return this.columnZipCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsPaidSubscriberColumn {
                get {
                    return this.columnIsPaidSubscriber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsAutoRenewalColumn {
                get {
                    return this.columnIsAutoRenewal;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RegistrationDateColumn {
                get {
                    return this.columnRegistrationDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UsersRow this[int index] {
                get {
                    return ((UsersRow)(this.Rows[index]));
                }
            }
            
            public event UsersRowChangeEventHandler UsersRowChanging;
            
            public event UsersRowChangeEventHandler UsersRowChanged;
            
            public event UsersRowChangeEventHandler UsersRowDeleting;
            
            public event UsersRowChangeEventHandler UsersRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddUsersRow(UsersRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UsersRow AddUsersRow(string UserId, string Password, string FirstName, string LastName, string PhoneNumber, string Address, string State, string Country, int ZipCode, bool IsPaidSubscriber, bool IsAutoRenewal, System.DateTime RegistrationDate) {
                UsersRow rowUsersRow = ((UsersRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        UserId,
                        Password,
                        FirstName,
                        LastName,
                        PhoneNumber,
                        Address,
                        State,
                        Country,
                        ZipCode,
                        IsPaidSubscriber,
                        IsAutoRenewal,
                        RegistrationDate};
                rowUsersRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowUsersRow);
                return rowUsersRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UsersRow FindByUserId(string UserId) {
                return ((UsersRow)(this.Rows.Find(new object[] {
                            UserId})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                UsersDataTable cln = ((UsersDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new UsersDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnUserId = base.Columns["UserId"];
                this.columnPassword = base.Columns["Password"];
                this.columnFirstName = base.Columns["FirstName"];
                this.columnLastName = base.Columns["LastName"];
                this.columnPhoneNumber = base.Columns["PhoneNumber"];
                this.columnAddress = base.Columns["Address"];
                this.columnState = base.Columns["State"];
                this.columnCountry = base.Columns["Country"];
                this.columnZipCode = base.Columns["ZipCode"];
                this.columnIsPaidSubscriber = base.Columns["IsPaidSubscriber"];
                this.columnIsAutoRenewal = base.Columns["IsAutoRenewal"];
                this.columnRegistrationDate = base.Columns["RegistrationDate"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnUserId = new global::System.Data.DataColumn("UserId", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUserId);
                this.columnPassword = new global::System.Data.DataColumn("Password", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPassword);
                this.columnFirstName = new global::System.Data.DataColumn("FirstName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFirstName);
                this.columnLastName = new global::System.Data.DataColumn("LastName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLastName);
                this.columnPhoneNumber = new global::System.Data.DataColumn("PhoneNumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPhoneNumber);
                this.columnAddress = new global::System.Data.DataColumn("Address", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAddress);
                this.columnState = new global::System.Data.DataColumn("State", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnState);
                this.columnCountry = new global::System.Data.DataColumn("Country", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCountry);
                this.columnZipCode = new global::System.Data.DataColumn("ZipCode", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnZipCode);
                this.columnIsPaidSubscriber = new global::System.Data.DataColumn("IsPaidSubscriber", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsPaidSubscriber);
                this.columnIsAutoRenewal = new global::System.Data.DataColumn("IsAutoRenewal", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsAutoRenewal);
                this.columnRegistrationDate = new global::System.Data.DataColumn("RegistrationDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRegistrationDate);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnUserId}, true));
                this.columnUserId.AllowDBNull = false;
                this.columnUserId.Unique = true;
                this.columnUserId.MaxLength = 500;
                this.columnPassword.AllowDBNull = false;
                this.columnPassword.MaxLength = 50;
                this.columnFirstName.AllowDBNull = false;
                this.columnFirstName.MaxLength = 500;
                this.columnLastName.AllowDBNull = false;
                this.columnLastName.MaxLength = 500;
                this.columnPhoneNumber.AllowDBNull = false;
                this.columnPhoneNumber.MaxLength = 50;
                this.columnAddress.AllowDBNull = false;
                this.columnAddress.MaxLength = 500;
                this.columnState.AllowDBNull = false;
                this.columnState.MaxLength = 10;
                this.columnCountry.AllowDBNull = false;
                this.columnCountry.MaxLength = 10;
                this.columnZipCode.AllowDBNull = false;
                this.columnIsPaidSubscriber.AllowDBNull = false;
                this.columnIsAutoRenewal.AllowDBNull = false;
                this.columnRegistrationDate.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UsersRow NewUsersRow() {
                return ((UsersRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new UsersRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(UsersRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.UsersRowChanged != null)) {
                    this.UsersRowChanged(this, new UsersRowChangeEvent(((UsersRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.UsersRowChanging != null)) {
                    this.UsersRowChanging(this, new UsersRowChangeEvent(((UsersRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.UsersRowDeleted != null)) {
                    this.UsersRowDeleted(this, new UsersRowChangeEvent(((UsersRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.UsersRowDeleting != null)) {
                    this.UsersRowDeleting(this, new UsersRowChangeEvent(((UsersRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveUsersRow(UsersRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                USAdvisoryDataSet ds = new USAdvisoryDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "UsersDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class WatchOutDataTable : global::System.Data.TypedTableBase<WatchOutRow> {
            
            private global::System.Data.DataColumn columnWatchOutId;
            
            private global::System.Data.DataColumn columnWatchOutDateTime;
            
            private global::System.Data.DataColumn columnWatchOutText;
            
            private global::System.Data.DataColumn columnWatchOutTitle;
            
            private global::System.Data.DataColumn columnIsPaid;
            
            private global::System.Data.DataColumn columnTicker;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public WatchOutDataTable() {
                this.TableName = "WatchOut";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal WatchOutDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected WatchOutDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WatchOutIdColumn {
                get {
                    return this.columnWatchOutId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WatchOutDateTimeColumn {
                get {
                    return this.columnWatchOutDateTime;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WatchOutTextColumn {
                get {
                    return this.columnWatchOutText;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WatchOutTitleColumn {
                get {
                    return this.columnWatchOutTitle;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsPaidColumn {
                get {
                    return this.columnIsPaid;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TickerColumn {
                get {
                    return this.columnTicker;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public WatchOutRow this[int index] {
                get {
                    return ((WatchOutRow)(this.Rows[index]));
                }
            }
            
            public event WatchOutRowChangeEventHandler WatchOutRowChanging;
            
            public event WatchOutRowChangeEventHandler WatchOutRowChanged;
            
            public event WatchOutRowChangeEventHandler WatchOutRowDeleting;
            
            public event WatchOutRowChangeEventHandler WatchOutRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddWatchOutRow(WatchOutRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public WatchOutRow AddWatchOutRow(System.DateTime WatchOutDateTime, string WatchOutText, string WatchOutTitle, bool IsPaid, string Ticker) {
                WatchOutRow rowWatchOutRow = ((WatchOutRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        WatchOutDateTime,
                        WatchOutText,
                        WatchOutTitle,
                        IsPaid,
                        Ticker};
                rowWatchOutRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowWatchOutRow);
                return rowWatchOutRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public WatchOutRow FindByWatchOutId(int WatchOutId) {
                return ((WatchOutRow)(this.Rows.Find(new object[] {
                            WatchOutId})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                WatchOutDataTable cln = ((WatchOutDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new WatchOutDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnWatchOutId = base.Columns["WatchOutId"];
                this.columnWatchOutDateTime = base.Columns["WatchOutDateTime"];
                this.columnWatchOutText = base.Columns["WatchOutText"];
                this.columnWatchOutTitle = base.Columns["WatchOutTitle"];
                this.columnIsPaid = base.Columns["IsPaid"];
                this.columnTicker = base.Columns["Ticker"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnWatchOutId = new global::System.Data.DataColumn("WatchOutId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWatchOutId);
                this.columnWatchOutDateTime = new global::System.Data.DataColumn("WatchOutDateTime", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWatchOutDateTime);
                this.columnWatchOutText = new global::System.Data.DataColumn("WatchOutText", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWatchOutText);
                this.columnWatchOutTitle = new global::System.Data.DataColumn("WatchOutTitle", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWatchOutTitle);
                this.columnIsPaid = new global::System.Data.DataColumn("IsPaid", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsPaid);
                this.columnTicker = new global::System.Data.DataColumn("Ticker", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTicker);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnWatchOutId}, true));
                this.columnWatchOutId.AutoIncrement = true;
                this.columnWatchOutId.AutoIncrementSeed = -1;
                this.columnWatchOutId.AutoIncrementStep = -1;
                this.columnWatchOutId.AllowDBNull = false;
                this.columnWatchOutId.ReadOnly = true;
                this.columnWatchOutId.Unique = true;
                this.columnWatchOutDateTime.AllowDBNull = false;
                this.columnWatchOutText.AllowDBNull = false;
                this.columnWatchOutText.MaxLength = 1073741823;
                this.columnWatchOutTitle.AllowDBNull = false;
                this.columnWatchOutTitle.MaxLength = 5000;
                this.columnIsPaid.AllowDBNull = false;
                this.columnTicker.AllowDBNull = false;
                this.columnTicker.MaxLength = 10;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public WatchOutRow NewWatchOutRow() {
                return ((WatchOutRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new WatchOutRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(WatchOutRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.WatchOutRowChanged != null)) {
                    this.WatchOutRowChanged(this, new WatchOutRowChangeEvent(((WatchOutRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.WatchOutRowChanging != null)) {
                    this.WatchOutRowChanging(this, new WatchOutRowChangeEvent(((WatchOutRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.WatchOutRowDeleted != null)) {
                    this.WatchOutRowDeleted(this, new WatchOutRowChangeEvent(((WatchOutRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.WatchOutRowDeleting != null)) {
                    this.WatchOutRowDeleting(this, new WatchOutRowChangeEvent(((WatchOutRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveWatchOutRow(WatchOutRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                USAdvisoryDataSet ds = new USAdvisoryDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "WatchOutDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class GetAllClosedPortfolioDataTable : global::System.Data.TypedTableBase<GetAllClosedPortfolioRow> {
            
            private global::System.Data.DataColumn columnStockTransactionId;
            
            private global::System.Data.DataColumn columnPortfolioId;
            
            private global::System.Data.DataColumn columnStockTicker;
            
            private global::System.Data.DataColumn columnCallStatus;
            
            private global::System.Data.DataColumn columnPortfolioEntryDate;
            
            private global::System.Data.DataColumn columnPortfolioExitDate;
            
            private global::System.Data.DataColumn columnIsPartiallyExited;
            
            private global::System.Data.DataColumn columnQty;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetAllClosedPortfolioDataTable() {
                this.TableName = "GetAllClosedPortfolio";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GetAllClosedPortfolioDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected GetAllClosedPortfolioDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StockTransactionIdColumn {
                get {
                    return this.columnStockTransactionId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PortfolioIdColumn {
                get {
                    return this.columnPortfolioId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StockTickerColumn {
                get {
                    return this.columnStockTicker;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CallStatusColumn {
                get {
                    return this.columnCallStatus;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PortfolioEntryDateColumn {
                get {
                    return this.columnPortfolioEntryDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PortfolioExitDateColumn {
                get {
                    return this.columnPortfolioExitDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsPartiallyExitedColumn {
                get {
                    return this.columnIsPartiallyExited;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn QtyColumn {
                get {
                    return this.columnQty;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetAllClosedPortfolioRow this[int index] {
                get {
                    return ((GetAllClosedPortfolioRow)(this.Rows[index]));
                }
            }
            
            public event GetAllClosedPortfolioRowChangeEventHandler GetAllClosedPortfolioRowChanging;
            
            public event GetAllClosedPortfolioRowChangeEventHandler GetAllClosedPortfolioRowChanged;
            
            public event GetAllClosedPortfolioRowChangeEventHandler GetAllClosedPortfolioRowDeleting;
            
            public event GetAllClosedPortfolioRowChangeEventHandler GetAllClosedPortfolioRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddGetAllClosedPortfolioRow(GetAllClosedPortfolioRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetAllClosedPortfolioRow AddGetAllClosedPortfolioRow(int PortfolioId, string StockTicker, string CallStatus, System.DateTime PortfolioEntryDate, System.DateTime PortfolioExitDate, bool IsPartiallyExited, int Qty) {
                GetAllClosedPortfolioRow rowGetAllClosedPortfolioRow = ((GetAllClosedPortfolioRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        PortfolioId,
                        StockTicker,
                        CallStatus,
                        PortfolioEntryDate,
                        PortfolioExitDate,
                        IsPartiallyExited,
                        Qty};
                rowGetAllClosedPortfolioRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowGetAllClosedPortfolioRow);
                return rowGetAllClosedPortfolioRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetAllClosedPortfolioRow FindByStockTransactionId(int StockTransactionId) {
                return ((GetAllClosedPortfolioRow)(this.Rows.Find(new object[] {
                            StockTransactionId})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                GetAllClosedPortfolioDataTable cln = ((GetAllClosedPortfolioDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new GetAllClosedPortfolioDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnStockTransactionId = base.Columns["StockTransactionId"];
                this.columnPortfolioId = base.Columns["PortfolioId"];
                this.columnStockTicker = base.Columns["StockTicker"];
                this.columnCallStatus = base.Columns["CallStatus"];
                this.columnPortfolioEntryDate = base.Columns["PortfolioEntryDate"];
                this.columnPortfolioExitDate = base.Columns["PortfolioExitDate"];
                this.columnIsPartiallyExited = base.Columns["IsPartiallyExited"];
                this.columnQty = base.Columns["Qty"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnStockTransactionId = new global::System.Data.DataColumn("StockTransactionId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStockTransactionId);
                this.columnPortfolioId = new global::System.Data.DataColumn("PortfolioId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPortfolioId);
                this.columnStockTicker = new global::System.Data.DataColumn("StockTicker", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStockTicker);
                this.columnCallStatus = new global::System.Data.DataColumn("CallStatus", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCallStatus);
                this.columnPortfolioEntryDate = new global::System.Data.DataColumn("PortfolioEntryDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPortfolioEntryDate);
                this.columnPortfolioExitDate = new global::System.Data.DataColumn("PortfolioExitDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPortfolioExitDate);
                this.columnIsPartiallyExited = new global::System.Data.DataColumn("IsPartiallyExited", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsPartiallyExited);
                this.columnQty = new global::System.Data.DataColumn("Qty", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnQty);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnStockTransactionId}, true));
                this.columnStockTransactionId.AutoIncrement = true;
                this.columnStockTransactionId.AllowDBNull = false;
                this.columnStockTransactionId.ReadOnly = true;
                this.columnStockTransactionId.Unique = true;
                this.columnPortfolioId.AllowDBNull = false;
                this.columnStockTicker.AllowDBNull = false;
                this.columnStockTicker.MaxLength = 100;
                this.columnCallStatus.AllowDBNull = false;
                this.columnCallStatus.MaxLength = 1;
                this.columnPortfolioEntryDate.AllowDBNull = false;
                this.columnIsPartiallyExited.AllowDBNull = false;
                this.columnQty.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetAllClosedPortfolioRow NewGetAllClosedPortfolioRow() {
                return ((GetAllClosedPortfolioRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new GetAllClosedPortfolioRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(GetAllClosedPortfolioRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.GetAllClosedPortfolioRowChanged != null)) {
                    this.GetAllClosedPortfolioRowChanged(this, new GetAllClosedPortfolioRowChangeEvent(((GetAllClosedPortfolioRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.GetAllClosedPortfolioRowChanging != null)) {
                    this.GetAllClosedPortfolioRowChanging(this, new GetAllClosedPortfolioRowChangeEvent(((GetAllClosedPortfolioRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.GetAllClosedPortfolioRowDeleted != null)) {
                    this.GetAllClosedPortfolioRowDeleted(this, new GetAllClosedPortfolioRowChangeEvent(((GetAllClosedPortfolioRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.GetAllClosedPortfolioRowDeleting != null)) {
                    this.GetAllClosedPortfolioRowDeleting(this, new GetAllClosedPortfolioRowChangeEvent(((GetAllClosedPortfolioRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveGetAllClosedPortfolioRow(GetAllClosedPortfolioRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                USAdvisoryDataSet ds = new USAdvisoryDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "GetAllClosedPortfolioDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class GetAllEmailAddressDataTable : global::System.Data.TypedTableBase<GetAllEmailAddressRow> {
            
            private global::System.Data.DataColumn columnEmailAddress;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetAllEmailAddressDataTable() {
                this.TableName = "GetAllEmailAddress";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GetAllEmailAddressDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected GetAllEmailAddressDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EmailAddressColumn {
                get {
                    return this.columnEmailAddress;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetAllEmailAddressRow this[int index] {
                get {
                    return ((GetAllEmailAddressRow)(this.Rows[index]));
                }
            }
            
            public event GetAllEmailAddressRowChangeEventHandler GetAllEmailAddressRowChanging;
            
            public event GetAllEmailAddressRowChangeEventHandler GetAllEmailAddressRowChanged;
            
            public event GetAllEmailAddressRowChangeEventHandler GetAllEmailAddressRowDeleting;
            
            public event GetAllEmailAddressRowChangeEventHandler GetAllEmailAddressRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddGetAllEmailAddressRow(GetAllEmailAddressRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetAllEmailAddressRow AddGetAllEmailAddressRow(string EmailAddress) {
                GetAllEmailAddressRow rowGetAllEmailAddressRow = ((GetAllEmailAddressRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        EmailAddress};
                rowGetAllEmailAddressRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowGetAllEmailAddressRow);
                return rowGetAllEmailAddressRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                GetAllEmailAddressDataTable cln = ((GetAllEmailAddressDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new GetAllEmailAddressDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnEmailAddress = base.Columns["EmailAddress"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnEmailAddress = new global::System.Data.DataColumn("EmailAddress", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmailAddress);
                this.columnEmailAddress.AllowDBNull = false;
                this.columnEmailAddress.MaxLength = 5000;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetAllEmailAddressRow NewGetAllEmailAddressRow() {
                return ((GetAllEmailAddressRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new GetAllEmailAddressRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(GetAllEmailAddressRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.GetAllEmailAddressRowChanged != null)) {
                    this.GetAllEmailAddressRowChanged(this, new GetAllEmailAddressRowChangeEvent(((GetAllEmailAddressRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.GetAllEmailAddressRowChanging != null)) {
                    this.GetAllEmailAddressRowChanging(this, new GetAllEmailAddressRowChangeEvent(((GetAllEmailAddressRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.GetAllEmailAddressRowDeleted != null)) {
                    this.GetAllEmailAddressRowDeleted(this, new GetAllEmailAddressRowChangeEvent(((GetAllEmailAddressRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.GetAllEmailAddressRowDeleting != null)) {
                    this.GetAllEmailAddressRowDeleting(this, new GetAllEmailAddressRowChangeEvent(((GetAllEmailAddressRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveGetAllEmailAddressRow(GetAllEmailAddressRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                USAdvisoryDataSet ds = new USAdvisoryDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "GetAllEmailAddressDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class GetAllEmailToSendDataTable : global::System.Data.TypedTableBase<GetAllEmailToSendRow> {
            
            private global::System.Data.DataColumn columnSendEmailId;
            
            private global::System.Data.DataColumn columnEmailSubject;
            
            private global::System.Data.DataColumn columnEmaildatetime;
            
            private global::System.Data.DataColumn columnIsEmailSent;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetAllEmailToSendDataTable() {
                this.TableName = "GetAllEmailToSend";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GetAllEmailToSendDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected GetAllEmailToSendDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SendEmailIdColumn {
                get {
                    return this.columnSendEmailId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EmailSubjectColumn {
                get {
                    return this.columnEmailSubject;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EmaildatetimeColumn {
                get {
                    return this.columnEmaildatetime;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsEmailSentColumn {
                get {
                    return this.columnIsEmailSent;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetAllEmailToSendRow this[int index] {
                get {
                    return ((GetAllEmailToSendRow)(this.Rows[index]));
                }
            }
            
            public event GetAllEmailToSendRowChangeEventHandler GetAllEmailToSendRowChanging;
            
            public event GetAllEmailToSendRowChangeEventHandler GetAllEmailToSendRowChanged;
            
            public event GetAllEmailToSendRowChangeEventHandler GetAllEmailToSendRowDeleting;
            
            public event GetAllEmailToSendRowChangeEventHandler GetAllEmailToSendRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddGetAllEmailToSendRow(GetAllEmailToSendRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetAllEmailToSendRow AddGetAllEmailToSendRow(string EmailSubject, System.DateTime Emaildatetime, bool IsEmailSent) {
                GetAllEmailToSendRow rowGetAllEmailToSendRow = ((GetAllEmailToSendRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        EmailSubject,
                        Emaildatetime,
                        IsEmailSent};
                rowGetAllEmailToSendRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowGetAllEmailToSendRow);
                return rowGetAllEmailToSendRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetAllEmailToSendRow FindBySendEmailId(int SendEmailId) {
                return ((GetAllEmailToSendRow)(this.Rows.Find(new object[] {
                            SendEmailId})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                GetAllEmailToSendDataTable cln = ((GetAllEmailToSendDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new GetAllEmailToSendDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnSendEmailId = base.Columns["SendEmailId"];
                this.columnEmailSubject = base.Columns["EmailSubject"];
                this.columnEmaildatetime = base.Columns["Emaildatetime"];
                this.columnIsEmailSent = base.Columns["IsEmailSent"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnSendEmailId = new global::System.Data.DataColumn("SendEmailId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSendEmailId);
                this.columnEmailSubject = new global::System.Data.DataColumn("EmailSubject", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmailSubject);
                this.columnEmaildatetime = new global::System.Data.DataColumn("Emaildatetime", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmaildatetime);
                this.columnIsEmailSent = new global::System.Data.DataColumn("IsEmailSent", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsEmailSent);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnSendEmailId}, true));
                this.columnSendEmailId.AutoIncrement = true;
                this.columnSendEmailId.AllowDBNull = false;
                this.columnSendEmailId.ReadOnly = true;
                this.columnSendEmailId.Unique = true;
                this.columnEmailSubject.AllowDBNull = false;
                this.columnEmailSubject.MaxLength = 500;
                this.columnEmaildatetime.AllowDBNull = false;
                this.columnIsEmailSent.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetAllEmailToSendRow NewGetAllEmailToSendRow() {
                return ((GetAllEmailToSendRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new GetAllEmailToSendRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(GetAllEmailToSendRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.GetAllEmailToSendRowChanged != null)) {
                    this.GetAllEmailToSendRowChanged(this, new GetAllEmailToSendRowChangeEvent(((GetAllEmailToSendRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.GetAllEmailToSendRowChanging != null)) {
                    this.GetAllEmailToSendRowChanging(this, new GetAllEmailToSendRowChangeEvent(((GetAllEmailToSendRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.GetAllEmailToSendRowDeleted != null)) {
                    this.GetAllEmailToSendRowDeleted(this, new GetAllEmailToSendRowChangeEvent(((GetAllEmailToSendRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.GetAllEmailToSendRowDeleting != null)) {
                    this.GetAllEmailToSendRowDeleting(this, new GetAllEmailToSendRowChangeEvent(((GetAllEmailToSendRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveGetAllEmailToSendRow(GetAllEmailToSendRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                USAdvisoryDataSet ds = new USAdvisoryDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "GetAllEmailToSendDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class GetAllMarketCommentariesDataTable : global::System.Data.TypedTableBase<GetAllMarketCommentariesRow> {
            
            private global::System.Data.DataColumn columnMarketCommentaryId;
            
            private global::System.Data.DataColumn columnMarketCommentaryTitle;
            
            private global::System.Data.DataColumn columnMarketCommentaryDesc;
            
            private global::System.Data.DataColumn columnMarketCommentaryDateTime;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetAllMarketCommentariesDataTable() {
                this.TableName = "GetAllMarketCommentaries";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GetAllMarketCommentariesDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected GetAllMarketCommentariesDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MarketCommentaryIdColumn {
                get {
                    return this.columnMarketCommentaryId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MarketCommentaryTitleColumn {
                get {
                    return this.columnMarketCommentaryTitle;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MarketCommentaryDescColumn {
                get {
                    return this.columnMarketCommentaryDesc;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MarketCommentaryDateTimeColumn {
                get {
                    return this.columnMarketCommentaryDateTime;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetAllMarketCommentariesRow this[int index] {
                get {
                    return ((GetAllMarketCommentariesRow)(this.Rows[index]));
                }
            }
            
            public event GetAllMarketCommentariesRowChangeEventHandler GetAllMarketCommentariesRowChanging;
            
            public event GetAllMarketCommentariesRowChangeEventHandler GetAllMarketCommentariesRowChanged;
            
            public event GetAllMarketCommentariesRowChangeEventHandler GetAllMarketCommentariesRowDeleting;
            
            public event GetAllMarketCommentariesRowChangeEventHandler GetAllMarketCommentariesRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddGetAllMarketCommentariesRow(GetAllMarketCommentariesRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetAllMarketCommentariesRow AddGetAllMarketCommentariesRow(string MarketCommentaryTitle, string MarketCommentaryDesc, System.DateTime MarketCommentaryDateTime) {
                GetAllMarketCommentariesRow rowGetAllMarketCommentariesRow = ((GetAllMarketCommentariesRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        MarketCommentaryTitle,
                        MarketCommentaryDesc,
                        MarketCommentaryDateTime};
                rowGetAllMarketCommentariesRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowGetAllMarketCommentariesRow);
                return rowGetAllMarketCommentariesRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetAllMarketCommentariesRow FindByMarketCommentaryId(int MarketCommentaryId) {
                return ((GetAllMarketCommentariesRow)(this.Rows.Find(new object[] {
                            MarketCommentaryId})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                GetAllMarketCommentariesDataTable cln = ((GetAllMarketCommentariesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new GetAllMarketCommentariesDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnMarketCommentaryId = base.Columns["MarketCommentaryId"];
                this.columnMarketCommentaryTitle = base.Columns["MarketCommentaryTitle"];
                this.columnMarketCommentaryDesc = base.Columns["MarketCommentaryDesc"];
                this.columnMarketCommentaryDateTime = base.Columns["MarketCommentaryDateTime"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnMarketCommentaryId = new global::System.Data.DataColumn("MarketCommentaryId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMarketCommentaryId);
                this.columnMarketCommentaryTitle = new global::System.Data.DataColumn("MarketCommentaryTitle", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMarketCommentaryTitle);
                this.columnMarketCommentaryDesc = new global::System.Data.DataColumn("MarketCommentaryDesc", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMarketCommentaryDesc);
                this.columnMarketCommentaryDateTime = new global::System.Data.DataColumn("MarketCommentaryDateTime", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMarketCommentaryDateTime);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnMarketCommentaryId}, true));
                this.columnMarketCommentaryId.AutoIncrement = true;
                this.columnMarketCommentaryId.AllowDBNull = false;
                this.columnMarketCommentaryId.ReadOnly = true;
                this.columnMarketCommentaryId.Unique = true;
                this.columnMarketCommentaryTitle.AllowDBNull = false;
                this.columnMarketCommentaryTitle.MaxLength = 5000;
                this.columnMarketCommentaryDesc.AllowDBNull = false;
                this.columnMarketCommentaryDesc.MaxLength = 1073741823;
                this.columnMarketCommentaryDateTime.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetAllMarketCommentariesRow NewGetAllMarketCommentariesRow() {
                return ((GetAllMarketCommentariesRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new GetAllMarketCommentariesRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(GetAllMarketCommentariesRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.GetAllMarketCommentariesRowChanged != null)) {
                    this.GetAllMarketCommentariesRowChanged(this, new GetAllMarketCommentariesRowChangeEvent(((GetAllMarketCommentariesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.GetAllMarketCommentariesRowChanging != null)) {
                    this.GetAllMarketCommentariesRowChanging(this, new GetAllMarketCommentariesRowChangeEvent(((GetAllMarketCommentariesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.GetAllMarketCommentariesRowDeleted != null)) {
                    this.GetAllMarketCommentariesRowDeleted(this, new GetAllMarketCommentariesRowChangeEvent(((GetAllMarketCommentariesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.GetAllMarketCommentariesRowDeleting != null)) {
                    this.GetAllMarketCommentariesRowDeleting(this, new GetAllMarketCommentariesRowChangeEvent(((GetAllMarketCommentariesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveGetAllMarketCommentariesRow(GetAllMarketCommentariesRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                USAdvisoryDataSet ds = new USAdvisoryDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "GetAllMarketCommentariesDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class GetAllNewsAndViewsDataTable : global::System.Data.TypedTableBase<GetAllNewsAndViewsRow> {
            
            private global::System.Data.DataColumn columnNewsId;
            
            private global::System.Data.DataColumn columnNewsTitle;
            
            private global::System.Data.DataColumn columnNewsDescription;
            
            private global::System.Data.DataColumn columnNewsdatetime;
            
            private global::System.Data.DataColumn columnIsActive;
            
            private global::System.Data.DataColumn columnIsPaid;
            
            private global::System.Data.DataColumn columnTicker;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetAllNewsAndViewsDataTable() {
                this.TableName = "GetAllNewsAndViews";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GetAllNewsAndViewsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected GetAllNewsAndViewsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NewsIdColumn {
                get {
                    return this.columnNewsId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NewsTitleColumn {
                get {
                    return this.columnNewsTitle;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NewsDescriptionColumn {
                get {
                    return this.columnNewsDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NewsdatetimeColumn {
                get {
                    return this.columnNewsdatetime;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsActiveColumn {
                get {
                    return this.columnIsActive;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsPaidColumn {
                get {
                    return this.columnIsPaid;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TickerColumn {
                get {
                    return this.columnTicker;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetAllNewsAndViewsRow this[int index] {
                get {
                    return ((GetAllNewsAndViewsRow)(this.Rows[index]));
                }
            }
            
            public event GetAllNewsAndViewsRowChangeEventHandler GetAllNewsAndViewsRowChanging;
            
            public event GetAllNewsAndViewsRowChangeEventHandler GetAllNewsAndViewsRowChanged;
            
            public event GetAllNewsAndViewsRowChangeEventHandler GetAllNewsAndViewsRowDeleting;
            
            public event GetAllNewsAndViewsRowChangeEventHandler GetAllNewsAndViewsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddGetAllNewsAndViewsRow(GetAllNewsAndViewsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetAllNewsAndViewsRow AddGetAllNewsAndViewsRow(string NewsTitle, string NewsDescription, System.DateTime Newsdatetime, bool IsActive, bool IsPaid, string Ticker) {
                GetAllNewsAndViewsRow rowGetAllNewsAndViewsRow = ((GetAllNewsAndViewsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        NewsTitle,
                        NewsDescription,
                        Newsdatetime,
                        IsActive,
                        IsPaid,
                        Ticker};
                rowGetAllNewsAndViewsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowGetAllNewsAndViewsRow);
                return rowGetAllNewsAndViewsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetAllNewsAndViewsRow FindByNewsId(int NewsId) {
                return ((GetAllNewsAndViewsRow)(this.Rows.Find(new object[] {
                            NewsId})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                GetAllNewsAndViewsDataTable cln = ((GetAllNewsAndViewsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new GetAllNewsAndViewsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnNewsId = base.Columns["NewsId"];
                this.columnNewsTitle = base.Columns["NewsTitle"];
                this.columnNewsDescription = base.Columns["NewsDescription"];
                this.columnNewsdatetime = base.Columns["Newsdatetime"];
                this.columnIsActive = base.Columns["IsActive"];
                this.columnIsPaid = base.Columns["IsPaid"];
                this.columnTicker = base.Columns["Ticker"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnNewsId = new global::System.Data.DataColumn("NewsId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNewsId);
                this.columnNewsTitle = new global::System.Data.DataColumn("NewsTitle", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNewsTitle);
                this.columnNewsDescription = new global::System.Data.DataColumn("NewsDescription", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNewsDescription);
                this.columnNewsdatetime = new global::System.Data.DataColumn("Newsdatetime", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNewsdatetime);
                this.columnIsActive = new global::System.Data.DataColumn("IsActive", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsActive);
                this.columnIsPaid = new global::System.Data.DataColumn("IsPaid", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsPaid);
                this.columnTicker = new global::System.Data.DataColumn("Ticker", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTicker);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnNewsId}, true));
                this.columnNewsId.AutoIncrement = true;
                this.columnNewsId.AllowDBNull = false;
                this.columnNewsId.ReadOnly = true;
                this.columnNewsId.Unique = true;
                this.columnNewsTitle.AllowDBNull = false;
                this.columnNewsTitle.MaxLength = 5000;
                this.columnNewsDescription.AllowDBNull = false;
                this.columnNewsDescription.MaxLength = 1073741823;
                this.columnNewsdatetime.AllowDBNull = false;
                this.columnIsActive.AllowDBNull = false;
                this.columnIsPaid.AllowDBNull = false;
                this.columnTicker.AllowDBNull = false;
                this.columnTicker.MaxLength = 12;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetAllNewsAndViewsRow NewGetAllNewsAndViewsRow() {
                return ((GetAllNewsAndViewsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new GetAllNewsAndViewsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(GetAllNewsAndViewsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.GetAllNewsAndViewsRowChanged != null)) {
                    this.GetAllNewsAndViewsRowChanged(this, new GetAllNewsAndViewsRowChangeEvent(((GetAllNewsAndViewsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.GetAllNewsAndViewsRowChanging != null)) {
                    this.GetAllNewsAndViewsRowChanging(this, new GetAllNewsAndViewsRowChangeEvent(((GetAllNewsAndViewsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.GetAllNewsAndViewsRowDeleted != null)) {
                    this.GetAllNewsAndViewsRowDeleted(this, new GetAllNewsAndViewsRowChangeEvent(((GetAllNewsAndViewsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.GetAllNewsAndViewsRowDeleting != null)) {
                    this.GetAllNewsAndViewsRowDeleting(this, new GetAllNewsAndViewsRowChangeEvent(((GetAllNewsAndViewsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveGetAllNewsAndViewsRow(GetAllNewsAndViewsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                USAdvisoryDataSet ds = new USAdvisoryDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "GetAllNewsAndViewsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class GetAllOpenPortfolioDataTable : global::System.Data.TypedTableBase<GetAllOpenPortfolioRow> {
            
            private global::System.Data.DataColumn columnStockTransactionId;
            
            private global::System.Data.DataColumn columnPortfolioId;
            
            private global::System.Data.DataColumn columnStockTicker;
            
            private global::System.Data.DataColumn columnCallStatus;
            
            private global::System.Data.DataColumn columnPortfolioEntryDate;
            
            private global::System.Data.DataColumn columnPortfolioExitDate;
            
            private global::System.Data.DataColumn columnIsPartiallyExited;
            
            private global::System.Data.DataColumn columnQty;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetAllOpenPortfolioDataTable() {
                this.TableName = "GetAllOpenPortfolio";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GetAllOpenPortfolioDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected GetAllOpenPortfolioDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StockTransactionIdColumn {
                get {
                    return this.columnStockTransactionId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PortfolioIdColumn {
                get {
                    return this.columnPortfolioId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StockTickerColumn {
                get {
                    return this.columnStockTicker;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CallStatusColumn {
                get {
                    return this.columnCallStatus;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PortfolioEntryDateColumn {
                get {
                    return this.columnPortfolioEntryDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PortfolioExitDateColumn {
                get {
                    return this.columnPortfolioExitDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsPartiallyExitedColumn {
                get {
                    return this.columnIsPartiallyExited;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn QtyColumn {
                get {
                    return this.columnQty;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetAllOpenPortfolioRow this[int index] {
                get {
                    return ((GetAllOpenPortfolioRow)(this.Rows[index]));
                }
            }
            
            public event GetAllOpenPortfolioRowChangeEventHandler GetAllOpenPortfolioRowChanging;
            
            public event GetAllOpenPortfolioRowChangeEventHandler GetAllOpenPortfolioRowChanged;
            
            public event GetAllOpenPortfolioRowChangeEventHandler GetAllOpenPortfolioRowDeleting;
            
            public event GetAllOpenPortfolioRowChangeEventHandler GetAllOpenPortfolioRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddGetAllOpenPortfolioRow(GetAllOpenPortfolioRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetAllOpenPortfolioRow AddGetAllOpenPortfolioRow(int PortfolioId, string StockTicker, string CallStatus, System.DateTime PortfolioEntryDate, System.DateTime PortfolioExitDate, bool IsPartiallyExited, int Qty) {
                GetAllOpenPortfolioRow rowGetAllOpenPortfolioRow = ((GetAllOpenPortfolioRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        PortfolioId,
                        StockTicker,
                        CallStatus,
                        PortfolioEntryDate,
                        PortfolioExitDate,
                        IsPartiallyExited,
                        Qty};
                rowGetAllOpenPortfolioRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowGetAllOpenPortfolioRow);
                return rowGetAllOpenPortfolioRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetAllOpenPortfolioRow FindByStockTransactionId(int StockTransactionId) {
                return ((GetAllOpenPortfolioRow)(this.Rows.Find(new object[] {
                            StockTransactionId})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                GetAllOpenPortfolioDataTable cln = ((GetAllOpenPortfolioDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new GetAllOpenPortfolioDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnStockTransactionId = base.Columns["StockTransactionId"];
                this.columnPortfolioId = base.Columns["PortfolioId"];
                this.columnStockTicker = base.Columns["StockTicker"];
                this.columnCallStatus = base.Columns["CallStatus"];
                this.columnPortfolioEntryDate = base.Columns["PortfolioEntryDate"];
                this.columnPortfolioExitDate = base.Columns["PortfolioExitDate"];
                this.columnIsPartiallyExited = base.Columns["IsPartiallyExited"];
                this.columnQty = base.Columns["Qty"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnStockTransactionId = new global::System.Data.DataColumn("StockTransactionId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStockTransactionId);
                this.columnPortfolioId = new global::System.Data.DataColumn("PortfolioId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPortfolioId);
                this.columnStockTicker = new global::System.Data.DataColumn("StockTicker", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStockTicker);
                this.columnCallStatus = new global::System.Data.DataColumn("CallStatus", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCallStatus);
                this.columnPortfolioEntryDate = new global::System.Data.DataColumn("PortfolioEntryDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPortfolioEntryDate);
                this.columnPortfolioExitDate = new global::System.Data.DataColumn("PortfolioExitDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPortfolioExitDate);
                this.columnIsPartiallyExited = new global::System.Data.DataColumn("IsPartiallyExited", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsPartiallyExited);
                this.columnQty = new global::System.Data.DataColumn("Qty", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnQty);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnStockTransactionId}, true));
                this.columnStockTransactionId.AutoIncrement = true;
                this.columnStockTransactionId.AllowDBNull = false;
                this.columnStockTransactionId.ReadOnly = true;
                this.columnStockTransactionId.Unique = true;
                this.columnPortfolioId.AllowDBNull = false;
                this.columnStockTicker.AllowDBNull = false;
                this.columnStockTicker.MaxLength = 100;
                this.columnCallStatus.AllowDBNull = false;
                this.columnCallStatus.MaxLength = 1;
                this.columnPortfolioEntryDate.AllowDBNull = false;
                this.columnIsPartiallyExited.AllowDBNull = false;
                this.columnQty.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetAllOpenPortfolioRow NewGetAllOpenPortfolioRow() {
                return ((GetAllOpenPortfolioRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new GetAllOpenPortfolioRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(GetAllOpenPortfolioRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.GetAllOpenPortfolioRowChanged != null)) {
                    this.GetAllOpenPortfolioRowChanged(this, new GetAllOpenPortfolioRowChangeEvent(((GetAllOpenPortfolioRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.GetAllOpenPortfolioRowChanging != null)) {
                    this.GetAllOpenPortfolioRowChanging(this, new GetAllOpenPortfolioRowChangeEvent(((GetAllOpenPortfolioRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.GetAllOpenPortfolioRowDeleted != null)) {
                    this.GetAllOpenPortfolioRowDeleted(this, new GetAllOpenPortfolioRowChangeEvent(((GetAllOpenPortfolioRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.GetAllOpenPortfolioRowDeleting != null)) {
                    this.GetAllOpenPortfolioRowDeleting(this, new GetAllOpenPortfolioRowChangeEvent(((GetAllOpenPortfolioRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveGetAllOpenPortfolioRow(GetAllOpenPortfolioRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                USAdvisoryDataSet ds = new USAdvisoryDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "GetAllOpenPortfolioDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class GetAllOrdersDataTable : global::System.Data.TypedTableBase<GetAllOrdersRow> {
            
            private global::System.Data.DataColumn columnOrderId;
            
            private global::System.Data.DataColumn columnUserId;
            
            private global::System.Data.DataColumn columnNoOfMonthsSubscriptionDesc;
            
            private global::System.Data.DataColumn columnSubscriptionStartDate;
            
            private global::System.Data.DataColumn columnSubscriptionEndDate;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetAllOrdersDataTable() {
                this.TableName = "GetAllOrders";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GetAllOrdersDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected GetAllOrdersDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OrderIdColumn {
                get {
                    return this.columnOrderId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UserIdColumn {
                get {
                    return this.columnUserId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NoOfMonthsSubscriptionDescColumn {
                get {
                    return this.columnNoOfMonthsSubscriptionDesc;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SubscriptionStartDateColumn {
                get {
                    return this.columnSubscriptionStartDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SubscriptionEndDateColumn {
                get {
                    return this.columnSubscriptionEndDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetAllOrdersRow this[int index] {
                get {
                    return ((GetAllOrdersRow)(this.Rows[index]));
                }
            }
            
            public event GetAllOrdersRowChangeEventHandler GetAllOrdersRowChanging;
            
            public event GetAllOrdersRowChangeEventHandler GetAllOrdersRowChanged;
            
            public event GetAllOrdersRowChangeEventHandler GetAllOrdersRowDeleting;
            
            public event GetAllOrdersRowChangeEventHandler GetAllOrdersRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddGetAllOrdersRow(GetAllOrdersRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetAllOrdersRow AddGetAllOrdersRow(string UserId, string NoOfMonthsSubscriptionDesc, System.DateTime SubscriptionStartDate, System.DateTime SubscriptionEndDate) {
                GetAllOrdersRow rowGetAllOrdersRow = ((GetAllOrdersRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        UserId,
                        NoOfMonthsSubscriptionDesc,
                        SubscriptionStartDate,
                        SubscriptionEndDate};
                rowGetAllOrdersRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowGetAllOrdersRow);
                return rowGetAllOrdersRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetAllOrdersRow FindByOrderId(int OrderId) {
                return ((GetAllOrdersRow)(this.Rows.Find(new object[] {
                            OrderId})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                GetAllOrdersDataTable cln = ((GetAllOrdersDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new GetAllOrdersDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnOrderId = base.Columns["OrderId"];
                this.columnUserId = base.Columns["UserId"];
                this.columnNoOfMonthsSubscriptionDesc = base.Columns["NoOfMonthsSubscriptionDesc"];
                this.columnSubscriptionStartDate = base.Columns["SubscriptionStartDate"];
                this.columnSubscriptionEndDate = base.Columns["SubscriptionEndDate"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnOrderId = new global::System.Data.DataColumn("OrderId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOrderId);
                this.columnUserId = new global::System.Data.DataColumn("UserId", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUserId);
                this.columnNoOfMonthsSubscriptionDesc = new global::System.Data.DataColumn("NoOfMonthsSubscriptionDesc", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNoOfMonthsSubscriptionDesc);
                this.columnSubscriptionStartDate = new global::System.Data.DataColumn("SubscriptionStartDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSubscriptionStartDate);
                this.columnSubscriptionEndDate = new global::System.Data.DataColumn("SubscriptionEndDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSubscriptionEndDate);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnOrderId}, true));
                this.columnOrderId.AutoIncrement = true;
                this.columnOrderId.AllowDBNull = false;
                this.columnOrderId.ReadOnly = true;
                this.columnOrderId.Unique = true;
                this.columnUserId.AllowDBNull = false;
                this.columnUserId.MaxLength = 500;
                this.columnNoOfMonthsSubscriptionDesc.AllowDBNull = false;
                this.columnNoOfMonthsSubscriptionDesc.MaxLength = 5000;
                this.columnSubscriptionStartDate.AllowDBNull = false;
                this.columnSubscriptionEndDate.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetAllOrdersRow NewGetAllOrdersRow() {
                return ((GetAllOrdersRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new GetAllOrdersRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(GetAllOrdersRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.GetAllOrdersRowChanged != null)) {
                    this.GetAllOrdersRowChanged(this, new GetAllOrdersRowChangeEvent(((GetAllOrdersRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.GetAllOrdersRowChanging != null)) {
                    this.GetAllOrdersRowChanging(this, new GetAllOrdersRowChangeEvent(((GetAllOrdersRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.GetAllOrdersRowDeleted != null)) {
                    this.GetAllOrdersRowDeleted(this, new GetAllOrdersRowChangeEvent(((GetAllOrdersRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.GetAllOrdersRowDeleting != null)) {
                    this.GetAllOrdersRowDeleting(this, new GetAllOrdersRowChangeEvent(((GetAllOrdersRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveGetAllOrdersRow(GetAllOrdersRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                USAdvisoryDataSet ds = new USAdvisoryDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "GetAllOrdersDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class GetAllPortfolioDataTable : global::System.Data.TypedTableBase<GetAllPortfolioRow> {
            
            private global::System.Data.DataColumn columnStockTransactionId;
            
            private global::System.Data.DataColumn columnPortfolioId;
            
            private global::System.Data.DataColumn columnStockTicker;
            
            private global::System.Data.DataColumn columnCallStatus;
            
            private global::System.Data.DataColumn columnPortfolioEntryDate;
            
            private global::System.Data.DataColumn columnPortfolioExitDate;
            
            private global::System.Data.DataColumn columnIsPartiallyExited;
            
            private global::System.Data.DataColumn columnQty;
            
            private global::System.Data.DataColumn columnEntryPrice;
            
            private global::System.Data.DataColumn columnExitPrice;
            
            private global::System.Data.DataColumn columnStopLoss;
            
            private global::System.Data.DataColumn columnUpdates;
            
            private global::System.Data.DataColumn columnUpdateDateTime;
            
            private global::System.Data.DataColumn columnBuyOrSellId;
            
            private global::System.Data.DataColumn columnCompanyName;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetAllPortfolioDataTable() {
                this.TableName = "GetAllPortfolio";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GetAllPortfolioDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected GetAllPortfolioDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StockTransactionIdColumn {
                get {
                    return this.columnStockTransactionId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PortfolioIdColumn {
                get {
                    return this.columnPortfolioId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StockTickerColumn {
                get {
                    return this.columnStockTicker;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CallStatusColumn {
                get {
                    return this.columnCallStatus;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PortfolioEntryDateColumn {
                get {
                    return this.columnPortfolioEntryDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PortfolioExitDateColumn {
                get {
                    return this.columnPortfolioExitDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsPartiallyExitedColumn {
                get {
                    return this.columnIsPartiallyExited;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn QtyColumn {
                get {
                    return this.columnQty;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EntryPriceColumn {
                get {
                    return this.columnEntryPrice;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ExitPriceColumn {
                get {
                    return this.columnExitPrice;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StopLossColumn {
                get {
                    return this.columnStopLoss;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UpdatesColumn {
                get {
                    return this.columnUpdates;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UpdateDateTimeColumn {
                get {
                    return this.columnUpdateDateTime;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BuyOrSellIdColumn {
                get {
                    return this.columnBuyOrSellId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CompanyNameColumn {
                get {
                    return this.columnCompanyName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetAllPortfolioRow this[int index] {
                get {
                    return ((GetAllPortfolioRow)(this.Rows[index]));
                }
            }
            
            public event GetAllPortfolioRowChangeEventHandler GetAllPortfolioRowChanging;
            
            public event GetAllPortfolioRowChangeEventHandler GetAllPortfolioRowChanged;
            
            public event GetAllPortfolioRowChangeEventHandler GetAllPortfolioRowDeleting;
            
            public event GetAllPortfolioRowChangeEventHandler GetAllPortfolioRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddGetAllPortfolioRow(GetAllPortfolioRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetAllPortfolioRow AddGetAllPortfolioRow(int PortfolioId, string StockTicker, string CallStatus, System.DateTime PortfolioEntryDate, System.DateTime PortfolioExitDate, bool IsPartiallyExited, int Qty, decimal EntryPrice, decimal ExitPrice, decimal StopLoss, string Updates, System.DateTime UpdateDateTime, int BuyOrSellId, string CompanyName) {
                GetAllPortfolioRow rowGetAllPortfolioRow = ((GetAllPortfolioRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        PortfolioId,
                        StockTicker,
                        CallStatus,
                        PortfolioEntryDate,
                        PortfolioExitDate,
                        IsPartiallyExited,
                        Qty,
                        EntryPrice,
                        ExitPrice,
                        StopLoss,
                        Updates,
                        UpdateDateTime,
                        BuyOrSellId,
                        CompanyName};
                rowGetAllPortfolioRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowGetAllPortfolioRow);
                return rowGetAllPortfolioRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetAllPortfolioRow FindByStockTransactionId(int StockTransactionId) {
                return ((GetAllPortfolioRow)(this.Rows.Find(new object[] {
                            StockTransactionId})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                GetAllPortfolioDataTable cln = ((GetAllPortfolioDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new GetAllPortfolioDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnStockTransactionId = base.Columns["StockTransactionId"];
                this.columnPortfolioId = base.Columns["PortfolioId"];
                this.columnStockTicker = base.Columns["StockTicker"];
                this.columnCallStatus = base.Columns["CallStatus"];
                this.columnPortfolioEntryDate = base.Columns["PortfolioEntryDate"];
                this.columnPortfolioExitDate = base.Columns["PortfolioExitDate"];
                this.columnIsPartiallyExited = base.Columns["IsPartiallyExited"];
                this.columnQty = base.Columns["Qty"];
                this.columnEntryPrice = base.Columns["EntryPrice"];
                this.columnExitPrice = base.Columns["ExitPrice"];
                this.columnStopLoss = base.Columns["StopLoss"];
                this.columnUpdates = base.Columns["Updates"];
                this.columnUpdateDateTime = base.Columns["UpdateDateTime"];
                this.columnBuyOrSellId = base.Columns["BuyOrSellId"];
                this.columnCompanyName = base.Columns["CompanyName"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnStockTransactionId = new global::System.Data.DataColumn("StockTransactionId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStockTransactionId);
                this.columnPortfolioId = new global::System.Data.DataColumn("PortfolioId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPortfolioId);
                this.columnStockTicker = new global::System.Data.DataColumn("StockTicker", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStockTicker);
                this.columnCallStatus = new global::System.Data.DataColumn("CallStatus", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCallStatus);
                this.columnPortfolioEntryDate = new global::System.Data.DataColumn("PortfolioEntryDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPortfolioEntryDate);
                this.columnPortfolioExitDate = new global::System.Data.DataColumn("PortfolioExitDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPortfolioExitDate);
                this.columnIsPartiallyExited = new global::System.Data.DataColumn("IsPartiallyExited", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsPartiallyExited);
                this.columnQty = new global::System.Data.DataColumn("Qty", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnQty);
                this.columnEntryPrice = new global::System.Data.DataColumn("EntryPrice", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEntryPrice);
                this.columnExitPrice = new global::System.Data.DataColumn("ExitPrice", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnExitPrice);
                this.columnStopLoss = new global::System.Data.DataColumn("StopLoss", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStopLoss);
                this.columnUpdates = new global::System.Data.DataColumn("Updates", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUpdates);
                this.columnUpdateDateTime = new global::System.Data.DataColumn("UpdateDateTime", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUpdateDateTime);
                this.columnBuyOrSellId = new global::System.Data.DataColumn("BuyOrSellId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBuyOrSellId);
                this.columnCompanyName = new global::System.Data.DataColumn("CompanyName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCompanyName);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnStockTransactionId}, true));
                this.columnStockTransactionId.AutoIncrement = true;
                this.columnStockTransactionId.AllowDBNull = false;
                this.columnStockTransactionId.ReadOnly = true;
                this.columnStockTransactionId.Unique = true;
                this.columnPortfolioId.AllowDBNull = false;
                this.columnStockTicker.AllowDBNull = false;
                this.columnStockTicker.MaxLength = 100;
                this.columnCallStatus.AllowDBNull = false;
                this.columnCallStatus.MaxLength = 1;
                this.columnPortfolioEntryDate.AllowDBNull = false;
                this.columnIsPartiallyExited.AllowDBNull = false;
                this.columnQty.AllowDBNull = false;
                this.columnEntryPrice.AllowDBNull = false;
                this.columnExitPrice.AllowDBNull = false;
                this.columnStopLoss.AllowDBNull = false;
                this.columnUpdates.AllowDBNull = false;
                this.columnUpdates.MaxLength = 1073741823;
                this.columnUpdateDateTime.AllowDBNull = false;
                this.columnBuyOrSellId.AllowDBNull = false;
                this.columnCompanyName.AllowDBNull = false;
                this.columnCompanyName.MaxLength = 500;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetAllPortfolioRow NewGetAllPortfolioRow() {
                return ((GetAllPortfolioRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new GetAllPortfolioRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(GetAllPortfolioRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.GetAllPortfolioRowChanged != null)) {
                    this.GetAllPortfolioRowChanged(this, new GetAllPortfolioRowChangeEvent(((GetAllPortfolioRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.GetAllPortfolioRowChanging != null)) {
                    this.GetAllPortfolioRowChanging(this, new GetAllPortfolioRowChangeEvent(((GetAllPortfolioRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.GetAllPortfolioRowDeleted != null)) {
                    this.GetAllPortfolioRowDeleted(this, new GetAllPortfolioRowChangeEvent(((GetAllPortfolioRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.GetAllPortfolioRowDeleting != null)) {
                    this.GetAllPortfolioRowDeleting(this, new GetAllPortfolioRowChangeEvent(((GetAllPortfolioRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveGetAllPortfolioRow(GetAllPortfolioRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                USAdvisoryDataSet ds = new USAdvisoryDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "GetAllPortfolioDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class GetAllUsersDataTable : global::System.Data.TypedTableBase<GetAllUsersRow> {
            
            private global::System.Data.DataColumn columnUserId;
            
            private global::System.Data.DataColumn columnPassword;
            
            private global::System.Data.DataColumn columnFirstName;
            
            private global::System.Data.DataColumn columnLastName;
            
            private global::System.Data.DataColumn columnPhoneNumber;
            
            private global::System.Data.DataColumn columnAddress;
            
            private global::System.Data.DataColumn columnState;
            
            private global::System.Data.DataColumn columnCountry;
            
            private global::System.Data.DataColumn columnZipCode;
            
            private global::System.Data.DataColumn columnIsPaidSubscriber;
            
            private global::System.Data.DataColumn columnIsAutoRenewal;
            
            private global::System.Data.DataColumn columnRegistrationDate;
            
            private global::System.Data.DataColumn columnSubscriptionStartDate;
            
            private global::System.Data.DataColumn columnSubscriptionEndDate;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetAllUsersDataTable() {
                this.TableName = "GetAllUsers";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GetAllUsersDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected GetAllUsersDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UserIdColumn {
                get {
                    return this.columnUserId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PasswordColumn {
                get {
                    return this.columnPassword;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FirstNameColumn {
                get {
                    return this.columnFirstName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LastNameColumn {
                get {
                    return this.columnLastName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PhoneNumberColumn {
                get {
                    return this.columnPhoneNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AddressColumn {
                get {
                    return this.columnAddress;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StateColumn {
                get {
                    return this.columnState;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CountryColumn {
                get {
                    return this.columnCountry;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ZipCodeColumn {
                get {
                    return this.columnZipCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsPaidSubscriberColumn {
                get {
                    return this.columnIsPaidSubscriber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsAutoRenewalColumn {
                get {
                    return this.columnIsAutoRenewal;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RegistrationDateColumn {
                get {
                    return this.columnRegistrationDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SubscriptionStartDateColumn {
                get {
                    return this.columnSubscriptionStartDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SubscriptionEndDateColumn {
                get {
                    return this.columnSubscriptionEndDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetAllUsersRow this[int index] {
                get {
                    return ((GetAllUsersRow)(this.Rows[index]));
                }
            }
            
            public event GetAllUsersRowChangeEventHandler GetAllUsersRowChanging;
            
            public event GetAllUsersRowChangeEventHandler GetAllUsersRowChanged;
            
            public event GetAllUsersRowChangeEventHandler GetAllUsersRowDeleting;
            
            public event GetAllUsersRowChangeEventHandler GetAllUsersRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddGetAllUsersRow(GetAllUsersRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetAllUsersRow AddGetAllUsersRow(string UserId, string Password, string FirstName, string LastName, string PhoneNumber, string Address, string State, string Country, int ZipCode, bool IsPaidSubscriber, bool IsAutoRenewal, System.DateTime RegistrationDate, System.DateTime SubscriptionStartDate, System.DateTime SubscriptionEndDate) {
                GetAllUsersRow rowGetAllUsersRow = ((GetAllUsersRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        UserId,
                        Password,
                        FirstName,
                        LastName,
                        PhoneNumber,
                        Address,
                        State,
                        Country,
                        ZipCode,
                        IsPaidSubscriber,
                        IsAutoRenewal,
                        RegistrationDate,
                        SubscriptionStartDate,
                        SubscriptionEndDate};
                rowGetAllUsersRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowGetAllUsersRow);
                return rowGetAllUsersRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetAllUsersRow FindByUserId(string UserId) {
                return ((GetAllUsersRow)(this.Rows.Find(new object[] {
                            UserId})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                GetAllUsersDataTable cln = ((GetAllUsersDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new GetAllUsersDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnUserId = base.Columns["UserId"];
                this.columnPassword = base.Columns["Password"];
                this.columnFirstName = base.Columns["FirstName"];
                this.columnLastName = base.Columns["LastName"];
                this.columnPhoneNumber = base.Columns["PhoneNumber"];
                this.columnAddress = base.Columns["Address"];
                this.columnState = base.Columns["State"];
                this.columnCountry = base.Columns["Country"];
                this.columnZipCode = base.Columns["ZipCode"];
                this.columnIsPaidSubscriber = base.Columns["IsPaidSubscriber"];
                this.columnIsAutoRenewal = base.Columns["IsAutoRenewal"];
                this.columnRegistrationDate = base.Columns["RegistrationDate"];
                this.columnSubscriptionStartDate = base.Columns["SubscriptionStartDate"];
                this.columnSubscriptionEndDate = base.Columns["SubscriptionEndDate"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnUserId = new global::System.Data.DataColumn("UserId", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUserId);
                this.columnPassword = new global::System.Data.DataColumn("Password", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPassword);
                this.columnFirstName = new global::System.Data.DataColumn("FirstName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFirstName);
                this.columnLastName = new global::System.Data.DataColumn("LastName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLastName);
                this.columnPhoneNumber = new global::System.Data.DataColumn("PhoneNumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPhoneNumber);
                this.columnAddress = new global::System.Data.DataColumn("Address", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAddress);
                this.columnState = new global::System.Data.DataColumn("State", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnState);
                this.columnCountry = new global::System.Data.DataColumn("Country", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCountry);
                this.columnZipCode = new global::System.Data.DataColumn("ZipCode", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnZipCode);
                this.columnIsPaidSubscriber = new global::System.Data.DataColumn("IsPaidSubscriber", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsPaidSubscriber);
                this.columnIsAutoRenewal = new global::System.Data.DataColumn("IsAutoRenewal", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsAutoRenewal);
                this.columnRegistrationDate = new global::System.Data.DataColumn("RegistrationDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRegistrationDate);
                this.columnSubscriptionStartDate = new global::System.Data.DataColumn("SubscriptionStartDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSubscriptionStartDate);
                this.columnSubscriptionEndDate = new global::System.Data.DataColumn("SubscriptionEndDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSubscriptionEndDate);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnUserId}, true));
                this.columnUserId.AllowDBNull = false;
                this.columnUserId.Unique = true;
                this.columnUserId.MaxLength = 500;
                this.columnPassword.AllowDBNull = false;
                this.columnPassword.MaxLength = 50;
                this.columnFirstName.AllowDBNull = false;
                this.columnFirstName.MaxLength = 500;
                this.columnLastName.AllowDBNull = false;
                this.columnLastName.MaxLength = 500;
                this.columnPhoneNumber.AllowDBNull = false;
                this.columnPhoneNumber.MaxLength = 50;
                this.columnAddress.AllowDBNull = false;
                this.columnAddress.MaxLength = 500;
                this.columnState.AllowDBNull = false;
                this.columnState.MaxLength = 10;
                this.columnCountry.AllowDBNull = false;
                this.columnCountry.MaxLength = 10;
                this.columnZipCode.AllowDBNull = false;
                this.columnIsPaidSubscriber.AllowDBNull = false;
                this.columnIsAutoRenewal.AllowDBNull = false;
                this.columnRegistrationDate.AllowDBNull = false;
                this.columnSubscriptionStartDate.AllowDBNull = false;
                this.columnSubscriptionEndDate.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetAllUsersRow NewGetAllUsersRow() {
                return ((GetAllUsersRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new GetAllUsersRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(GetAllUsersRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.GetAllUsersRowChanged != null)) {
                    this.GetAllUsersRowChanged(this, new GetAllUsersRowChangeEvent(((GetAllUsersRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.GetAllUsersRowChanging != null)) {
                    this.GetAllUsersRowChanging(this, new GetAllUsersRowChangeEvent(((GetAllUsersRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.GetAllUsersRowDeleted != null)) {
                    this.GetAllUsersRowDeleted(this, new GetAllUsersRowChangeEvent(((GetAllUsersRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.GetAllUsersRowDeleting != null)) {
                    this.GetAllUsersRowDeleting(this, new GetAllUsersRowChangeEvent(((GetAllUsersRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveGetAllUsersRow(GetAllUsersRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                USAdvisoryDataSet ds = new USAdvisoryDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "GetAllUsersDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class GetAllWatchOutNewsDataTable : global::System.Data.TypedTableBase<GetAllWatchOutNewsRow> {
            
            private global::System.Data.DataColumn columnWatchOutId;
            
            private global::System.Data.DataColumn columnWatchOuttitle;
            
            private global::System.Data.DataColumn columnWatchOutText;
            
            private global::System.Data.DataColumn columnWatchOutDateTime;
            
            private global::System.Data.DataColumn columnTicker;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetAllWatchOutNewsDataTable() {
                this.TableName = "GetAllWatchOutNews";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GetAllWatchOutNewsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected GetAllWatchOutNewsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WatchOutIdColumn {
                get {
                    return this.columnWatchOutId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WatchOuttitleColumn {
                get {
                    return this.columnWatchOuttitle;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WatchOutTextColumn {
                get {
                    return this.columnWatchOutText;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WatchOutDateTimeColumn {
                get {
                    return this.columnWatchOutDateTime;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TickerColumn {
                get {
                    return this.columnTicker;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetAllWatchOutNewsRow this[int index] {
                get {
                    return ((GetAllWatchOutNewsRow)(this.Rows[index]));
                }
            }
            
            public event GetAllWatchOutNewsRowChangeEventHandler GetAllWatchOutNewsRowChanging;
            
            public event GetAllWatchOutNewsRowChangeEventHandler GetAllWatchOutNewsRowChanged;
            
            public event GetAllWatchOutNewsRowChangeEventHandler GetAllWatchOutNewsRowDeleting;
            
            public event GetAllWatchOutNewsRowChangeEventHandler GetAllWatchOutNewsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddGetAllWatchOutNewsRow(GetAllWatchOutNewsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetAllWatchOutNewsRow AddGetAllWatchOutNewsRow(string WatchOuttitle, string WatchOutText, System.DateTime WatchOutDateTime, string Ticker) {
                GetAllWatchOutNewsRow rowGetAllWatchOutNewsRow = ((GetAllWatchOutNewsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        WatchOuttitle,
                        WatchOutText,
                        WatchOutDateTime,
                        Ticker};
                rowGetAllWatchOutNewsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowGetAllWatchOutNewsRow);
                return rowGetAllWatchOutNewsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetAllWatchOutNewsRow FindByWatchOutId(int WatchOutId) {
                return ((GetAllWatchOutNewsRow)(this.Rows.Find(new object[] {
                            WatchOutId})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                GetAllWatchOutNewsDataTable cln = ((GetAllWatchOutNewsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new GetAllWatchOutNewsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnWatchOutId = base.Columns["WatchOutId"];
                this.columnWatchOuttitle = base.Columns["WatchOuttitle"];
                this.columnWatchOutText = base.Columns["WatchOutText"];
                this.columnWatchOutDateTime = base.Columns["WatchOutDateTime"];
                this.columnTicker = base.Columns["Ticker"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnWatchOutId = new global::System.Data.DataColumn("WatchOutId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWatchOutId);
                this.columnWatchOuttitle = new global::System.Data.DataColumn("WatchOuttitle", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWatchOuttitle);
                this.columnWatchOutText = new global::System.Data.DataColumn("WatchOutText", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWatchOutText);
                this.columnWatchOutDateTime = new global::System.Data.DataColumn("WatchOutDateTime", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWatchOutDateTime);
                this.columnTicker = new global::System.Data.DataColumn("Ticker", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTicker);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnWatchOutId}, true));
                this.columnWatchOutId.AutoIncrement = true;
                this.columnWatchOutId.AllowDBNull = false;
                this.columnWatchOutId.ReadOnly = true;
                this.columnWatchOutId.Unique = true;
                this.columnWatchOuttitle.AllowDBNull = false;
                this.columnWatchOuttitle.MaxLength = 5000;
                this.columnWatchOutText.AllowDBNull = false;
                this.columnWatchOutText.MaxLength = 1073741823;
                this.columnWatchOutDateTime.AllowDBNull = false;
                this.columnTicker.AllowDBNull = false;
                this.columnTicker.MaxLength = 10;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetAllWatchOutNewsRow NewGetAllWatchOutNewsRow() {
                return ((GetAllWatchOutNewsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new GetAllWatchOutNewsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(GetAllWatchOutNewsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.GetAllWatchOutNewsRowChanged != null)) {
                    this.GetAllWatchOutNewsRowChanged(this, new GetAllWatchOutNewsRowChangeEvent(((GetAllWatchOutNewsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.GetAllWatchOutNewsRowChanging != null)) {
                    this.GetAllWatchOutNewsRowChanging(this, new GetAllWatchOutNewsRowChangeEvent(((GetAllWatchOutNewsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.GetAllWatchOutNewsRowDeleted != null)) {
                    this.GetAllWatchOutNewsRowDeleted(this, new GetAllWatchOutNewsRowChangeEvent(((GetAllWatchOutNewsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.GetAllWatchOutNewsRowDeleting != null)) {
                    this.GetAllWatchOutNewsRowDeleting(this, new GetAllWatchOutNewsRowChangeEvent(((GetAllWatchOutNewsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveGetAllWatchOutNewsRow(GetAllWatchOutNewsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                USAdvisoryDataSet ds = new USAdvisoryDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "GetAllWatchOutNewsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class GetEmailBySendEmailIdDataTable : global::System.Data.TypedTableBase<GetEmailBySendEmailIdRow> {
            
            private global::System.Data.DataColumn columnEmailDescription;
            
            private global::System.Data.DataColumn columnEmailSubject;
            
            private global::System.Data.DataColumn columnEmaildatetime;
            
            private global::System.Data.DataColumn columnIsEmailSent;
            
            private global::System.Data.DataColumn columnIsSubscribers;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetEmailBySendEmailIdDataTable() {
                this.TableName = "GetEmailBySendEmailId";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GetEmailBySendEmailIdDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected GetEmailBySendEmailIdDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EmailDescriptionColumn {
                get {
                    return this.columnEmailDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EmailSubjectColumn {
                get {
                    return this.columnEmailSubject;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EmaildatetimeColumn {
                get {
                    return this.columnEmaildatetime;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsEmailSentColumn {
                get {
                    return this.columnIsEmailSent;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsSubscribersColumn {
                get {
                    return this.columnIsSubscribers;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetEmailBySendEmailIdRow this[int index] {
                get {
                    return ((GetEmailBySendEmailIdRow)(this.Rows[index]));
                }
            }
            
            public event GetEmailBySendEmailIdRowChangeEventHandler GetEmailBySendEmailIdRowChanging;
            
            public event GetEmailBySendEmailIdRowChangeEventHandler GetEmailBySendEmailIdRowChanged;
            
            public event GetEmailBySendEmailIdRowChangeEventHandler GetEmailBySendEmailIdRowDeleting;
            
            public event GetEmailBySendEmailIdRowChangeEventHandler GetEmailBySendEmailIdRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddGetEmailBySendEmailIdRow(GetEmailBySendEmailIdRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetEmailBySendEmailIdRow AddGetEmailBySendEmailIdRow(string EmailDescription, string EmailSubject, System.DateTime Emaildatetime, bool IsEmailSent, bool IsSubscribers) {
                GetEmailBySendEmailIdRow rowGetEmailBySendEmailIdRow = ((GetEmailBySendEmailIdRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        EmailDescription,
                        EmailSubject,
                        Emaildatetime,
                        IsEmailSent,
                        IsSubscribers};
                rowGetEmailBySendEmailIdRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowGetEmailBySendEmailIdRow);
                return rowGetEmailBySendEmailIdRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                GetEmailBySendEmailIdDataTable cln = ((GetEmailBySendEmailIdDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new GetEmailBySendEmailIdDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnEmailDescription = base.Columns["EmailDescription"];
                this.columnEmailSubject = base.Columns["EmailSubject"];
                this.columnEmaildatetime = base.Columns["Emaildatetime"];
                this.columnIsEmailSent = base.Columns["IsEmailSent"];
                this.columnIsSubscribers = base.Columns["IsSubscribers"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnEmailDescription = new global::System.Data.DataColumn("EmailDescription", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmailDescription);
                this.columnEmailSubject = new global::System.Data.DataColumn("EmailSubject", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmailSubject);
                this.columnEmaildatetime = new global::System.Data.DataColumn("Emaildatetime", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmaildatetime);
                this.columnIsEmailSent = new global::System.Data.DataColumn("IsEmailSent", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsEmailSent);
                this.columnIsSubscribers = new global::System.Data.DataColumn("IsSubscribers", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsSubscribers);
                this.columnEmailDescription.AllowDBNull = false;
                this.columnEmailDescription.MaxLength = 1073741823;
                this.columnEmailSubject.AllowDBNull = false;
                this.columnEmailSubject.MaxLength = 500;
                this.columnEmaildatetime.AllowDBNull = false;
                this.columnIsEmailSent.AllowDBNull = false;
                this.columnIsSubscribers.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetEmailBySendEmailIdRow NewGetEmailBySendEmailIdRow() {
                return ((GetEmailBySendEmailIdRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new GetEmailBySendEmailIdRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(GetEmailBySendEmailIdRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.GetEmailBySendEmailIdRowChanged != null)) {
                    this.GetEmailBySendEmailIdRowChanged(this, new GetEmailBySendEmailIdRowChangeEvent(((GetEmailBySendEmailIdRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.GetEmailBySendEmailIdRowChanging != null)) {
                    this.GetEmailBySendEmailIdRowChanging(this, new GetEmailBySendEmailIdRowChangeEvent(((GetEmailBySendEmailIdRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.GetEmailBySendEmailIdRowDeleted != null)) {
                    this.GetEmailBySendEmailIdRowDeleted(this, new GetEmailBySendEmailIdRowChangeEvent(((GetEmailBySendEmailIdRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.GetEmailBySendEmailIdRowDeleting != null)) {
                    this.GetEmailBySendEmailIdRowDeleting(this, new GetEmailBySendEmailIdRowChangeEvent(((GetEmailBySendEmailIdRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveGetEmailBySendEmailIdRow(GetEmailBySendEmailIdRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                USAdvisoryDataSet ds = new USAdvisoryDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "GetEmailBySendEmailIdDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class GetMarketCommentaryByArticleDataTable : global::System.Data.TypedTableBase<GetMarketCommentaryByArticleRow> {
            
            private global::System.Data.DataColumn columnMarketCommentaryTitle;
            
            private global::System.Data.DataColumn columnMarketCommentaryDesc;
            
            private global::System.Data.DataColumn columnIsCommentaryactive;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetMarketCommentaryByArticleDataTable() {
                this.TableName = "GetMarketCommentaryByArticle";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GetMarketCommentaryByArticleDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected GetMarketCommentaryByArticleDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MarketCommentaryTitleColumn {
                get {
                    return this.columnMarketCommentaryTitle;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MarketCommentaryDescColumn {
                get {
                    return this.columnMarketCommentaryDesc;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsCommentaryactiveColumn {
                get {
                    return this.columnIsCommentaryactive;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetMarketCommentaryByArticleRow this[int index] {
                get {
                    return ((GetMarketCommentaryByArticleRow)(this.Rows[index]));
                }
            }
            
            public event GetMarketCommentaryByArticleRowChangeEventHandler GetMarketCommentaryByArticleRowChanging;
            
            public event GetMarketCommentaryByArticleRowChangeEventHandler GetMarketCommentaryByArticleRowChanged;
            
            public event GetMarketCommentaryByArticleRowChangeEventHandler GetMarketCommentaryByArticleRowDeleting;
            
            public event GetMarketCommentaryByArticleRowChangeEventHandler GetMarketCommentaryByArticleRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddGetMarketCommentaryByArticleRow(GetMarketCommentaryByArticleRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetMarketCommentaryByArticleRow AddGetMarketCommentaryByArticleRow(string MarketCommentaryTitle, string MarketCommentaryDesc, bool IsCommentaryactive) {
                GetMarketCommentaryByArticleRow rowGetMarketCommentaryByArticleRow = ((GetMarketCommentaryByArticleRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        MarketCommentaryTitle,
                        MarketCommentaryDesc,
                        IsCommentaryactive};
                rowGetMarketCommentaryByArticleRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowGetMarketCommentaryByArticleRow);
                return rowGetMarketCommentaryByArticleRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                GetMarketCommentaryByArticleDataTable cln = ((GetMarketCommentaryByArticleDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new GetMarketCommentaryByArticleDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnMarketCommentaryTitle = base.Columns["MarketCommentaryTitle"];
                this.columnMarketCommentaryDesc = base.Columns["MarketCommentaryDesc"];
                this.columnIsCommentaryactive = base.Columns["IsCommentaryactive"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnMarketCommentaryTitle = new global::System.Data.DataColumn("MarketCommentaryTitle", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMarketCommentaryTitle);
                this.columnMarketCommentaryDesc = new global::System.Data.DataColumn("MarketCommentaryDesc", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMarketCommentaryDesc);
                this.columnIsCommentaryactive = new global::System.Data.DataColumn("IsCommentaryactive", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsCommentaryactive);
                this.columnMarketCommentaryTitle.AllowDBNull = false;
                this.columnMarketCommentaryTitle.MaxLength = 5000;
                this.columnMarketCommentaryDesc.AllowDBNull = false;
                this.columnMarketCommentaryDesc.MaxLength = 1073741823;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetMarketCommentaryByArticleRow NewGetMarketCommentaryByArticleRow() {
                return ((GetMarketCommentaryByArticleRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new GetMarketCommentaryByArticleRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(GetMarketCommentaryByArticleRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.GetMarketCommentaryByArticleRowChanged != null)) {
                    this.GetMarketCommentaryByArticleRowChanged(this, new GetMarketCommentaryByArticleRowChangeEvent(((GetMarketCommentaryByArticleRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.GetMarketCommentaryByArticleRowChanging != null)) {
                    this.GetMarketCommentaryByArticleRowChanging(this, new GetMarketCommentaryByArticleRowChangeEvent(((GetMarketCommentaryByArticleRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.GetMarketCommentaryByArticleRowDeleted != null)) {
                    this.GetMarketCommentaryByArticleRowDeleted(this, new GetMarketCommentaryByArticleRowChangeEvent(((GetMarketCommentaryByArticleRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.GetMarketCommentaryByArticleRowDeleting != null)) {
                    this.GetMarketCommentaryByArticleRowDeleting(this, new GetMarketCommentaryByArticleRowChangeEvent(((GetMarketCommentaryByArticleRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveGetMarketCommentaryByArticleRow(GetMarketCommentaryByArticleRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                USAdvisoryDataSet ds = new USAdvisoryDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "GetMarketCommentaryByArticleDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class GetNewsAndViewsByArticleDataTable : global::System.Data.TypedTableBase<GetNewsAndViewsByArticleRow> {
            
            private global::System.Data.DataColumn columnNewsId;
            
            private global::System.Data.DataColumn columnNewsTitle;
            
            private global::System.Data.DataColumn columnNewsDescription;
            
            private global::System.Data.DataColumn columnNewsDateTime;
            
            private global::System.Data.DataColumn columnIsActive;
            
            private global::System.Data.DataColumn columnIsPaid;
            
            private global::System.Data.DataColumn columnTicker;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetNewsAndViewsByArticleDataTable() {
                this.TableName = "GetNewsAndViewsByArticle";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GetNewsAndViewsByArticleDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected GetNewsAndViewsByArticleDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NewsIdColumn {
                get {
                    return this.columnNewsId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NewsTitleColumn {
                get {
                    return this.columnNewsTitle;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NewsDescriptionColumn {
                get {
                    return this.columnNewsDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NewsDateTimeColumn {
                get {
                    return this.columnNewsDateTime;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsActiveColumn {
                get {
                    return this.columnIsActive;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsPaidColumn {
                get {
                    return this.columnIsPaid;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TickerColumn {
                get {
                    return this.columnTicker;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetNewsAndViewsByArticleRow this[int index] {
                get {
                    return ((GetNewsAndViewsByArticleRow)(this.Rows[index]));
                }
            }
            
            public event GetNewsAndViewsByArticleRowChangeEventHandler GetNewsAndViewsByArticleRowChanging;
            
            public event GetNewsAndViewsByArticleRowChangeEventHandler GetNewsAndViewsByArticleRowChanged;
            
            public event GetNewsAndViewsByArticleRowChangeEventHandler GetNewsAndViewsByArticleRowDeleting;
            
            public event GetNewsAndViewsByArticleRowChangeEventHandler GetNewsAndViewsByArticleRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddGetNewsAndViewsByArticleRow(GetNewsAndViewsByArticleRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetNewsAndViewsByArticleRow AddGetNewsAndViewsByArticleRow(string NewsTitle, string NewsDescription, System.DateTime NewsDateTime, bool IsActive, bool IsPaid, string Ticker) {
                GetNewsAndViewsByArticleRow rowGetNewsAndViewsByArticleRow = ((GetNewsAndViewsByArticleRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        NewsTitle,
                        NewsDescription,
                        NewsDateTime,
                        IsActive,
                        IsPaid,
                        Ticker};
                rowGetNewsAndViewsByArticleRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowGetNewsAndViewsByArticleRow);
                return rowGetNewsAndViewsByArticleRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetNewsAndViewsByArticleRow FindByNewsId(int NewsId) {
                return ((GetNewsAndViewsByArticleRow)(this.Rows.Find(new object[] {
                            NewsId})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                GetNewsAndViewsByArticleDataTable cln = ((GetNewsAndViewsByArticleDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new GetNewsAndViewsByArticleDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnNewsId = base.Columns["NewsId"];
                this.columnNewsTitle = base.Columns["NewsTitle"];
                this.columnNewsDescription = base.Columns["NewsDescription"];
                this.columnNewsDateTime = base.Columns["NewsDateTime"];
                this.columnIsActive = base.Columns["IsActive"];
                this.columnIsPaid = base.Columns["IsPaid"];
                this.columnTicker = base.Columns["Ticker"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnNewsId = new global::System.Data.DataColumn("NewsId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNewsId);
                this.columnNewsTitle = new global::System.Data.DataColumn("NewsTitle", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNewsTitle);
                this.columnNewsDescription = new global::System.Data.DataColumn("NewsDescription", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNewsDescription);
                this.columnNewsDateTime = new global::System.Data.DataColumn("NewsDateTime", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNewsDateTime);
                this.columnIsActive = new global::System.Data.DataColumn("IsActive", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsActive);
                this.columnIsPaid = new global::System.Data.DataColumn("IsPaid", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsPaid);
                this.columnTicker = new global::System.Data.DataColumn("Ticker", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTicker);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnNewsId}, true));
                this.columnNewsId.AutoIncrement = true;
                this.columnNewsId.AllowDBNull = false;
                this.columnNewsId.ReadOnly = true;
                this.columnNewsId.Unique = true;
                this.columnNewsTitle.AllowDBNull = false;
                this.columnNewsTitle.MaxLength = 5000;
                this.columnNewsDescription.AllowDBNull = false;
                this.columnNewsDescription.MaxLength = 1073741823;
                this.columnNewsDateTime.AllowDBNull = false;
                this.columnIsActive.AllowDBNull = false;
                this.columnIsPaid.AllowDBNull = false;
                this.columnTicker.AllowDBNull = false;
                this.columnTicker.MaxLength = 12;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetNewsAndViewsByArticleRow NewGetNewsAndViewsByArticleRow() {
                return ((GetNewsAndViewsByArticleRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new GetNewsAndViewsByArticleRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(GetNewsAndViewsByArticleRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.GetNewsAndViewsByArticleRowChanged != null)) {
                    this.GetNewsAndViewsByArticleRowChanged(this, new GetNewsAndViewsByArticleRowChangeEvent(((GetNewsAndViewsByArticleRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.GetNewsAndViewsByArticleRowChanging != null)) {
                    this.GetNewsAndViewsByArticleRowChanging(this, new GetNewsAndViewsByArticleRowChangeEvent(((GetNewsAndViewsByArticleRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.GetNewsAndViewsByArticleRowDeleted != null)) {
                    this.GetNewsAndViewsByArticleRowDeleted(this, new GetNewsAndViewsByArticleRowChangeEvent(((GetNewsAndViewsByArticleRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.GetNewsAndViewsByArticleRowDeleting != null)) {
                    this.GetNewsAndViewsByArticleRowDeleting(this, new GetNewsAndViewsByArticleRowChangeEvent(((GetNewsAndViewsByArticleRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveGetNewsAndViewsByArticleRow(GetNewsAndViewsByArticleRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                USAdvisoryDataSet ds = new USAdvisoryDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "GetNewsAndViewsByArticleDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class GetOrdesrByUserIdOrderIdDataTable : global::System.Data.TypedTableBase<GetOrdesrByUserIdOrderIdRow> {
            
            private global::System.Data.DataColumn columnUserId;
            
            private global::System.Data.DataColumn columnUniqueOrderId;
            
            private global::System.Data.DataColumn columnNoOfMonthsSubscriptionDesc;
            
            private global::System.Data.DataColumn columnPaymentDate;
            
            private global::System.Data.DataColumn columnVendorReferenceId;
            
            private global::System.Data.DataColumn columnSubscriptionStartDate;
            
            private global::System.Data.DataColumn columnSubscriptionEndDate;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetOrdesrByUserIdOrderIdDataTable() {
                this.TableName = "GetOrdesrByUserIdOrderId";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GetOrdesrByUserIdOrderIdDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected GetOrdesrByUserIdOrderIdDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UserIdColumn {
                get {
                    return this.columnUserId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UniqueOrderIdColumn {
                get {
                    return this.columnUniqueOrderId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NoOfMonthsSubscriptionDescColumn {
                get {
                    return this.columnNoOfMonthsSubscriptionDesc;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PaymentDateColumn {
                get {
                    return this.columnPaymentDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn VendorReferenceIdColumn {
                get {
                    return this.columnVendorReferenceId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SubscriptionStartDateColumn {
                get {
                    return this.columnSubscriptionStartDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SubscriptionEndDateColumn {
                get {
                    return this.columnSubscriptionEndDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetOrdesrByUserIdOrderIdRow this[int index] {
                get {
                    return ((GetOrdesrByUserIdOrderIdRow)(this.Rows[index]));
                }
            }
            
            public event GetOrdesrByUserIdOrderIdRowChangeEventHandler GetOrdesrByUserIdOrderIdRowChanging;
            
            public event GetOrdesrByUserIdOrderIdRowChangeEventHandler GetOrdesrByUserIdOrderIdRowChanged;
            
            public event GetOrdesrByUserIdOrderIdRowChangeEventHandler GetOrdesrByUserIdOrderIdRowDeleting;
            
            public event GetOrdesrByUserIdOrderIdRowChangeEventHandler GetOrdesrByUserIdOrderIdRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddGetOrdesrByUserIdOrderIdRow(GetOrdesrByUserIdOrderIdRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetOrdesrByUserIdOrderIdRow AddGetOrdesrByUserIdOrderIdRow(string UserId, string UniqueOrderId, string NoOfMonthsSubscriptionDesc, System.DateTime PaymentDate, string VendorReferenceId, System.DateTime SubscriptionStartDate, System.DateTime SubscriptionEndDate) {
                GetOrdesrByUserIdOrderIdRow rowGetOrdesrByUserIdOrderIdRow = ((GetOrdesrByUserIdOrderIdRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        UserId,
                        UniqueOrderId,
                        NoOfMonthsSubscriptionDesc,
                        PaymentDate,
                        VendorReferenceId,
                        SubscriptionStartDate,
                        SubscriptionEndDate};
                rowGetOrdesrByUserIdOrderIdRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowGetOrdesrByUserIdOrderIdRow);
                return rowGetOrdesrByUserIdOrderIdRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                GetOrdesrByUserIdOrderIdDataTable cln = ((GetOrdesrByUserIdOrderIdDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new GetOrdesrByUserIdOrderIdDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnUserId = base.Columns["UserId"];
                this.columnUniqueOrderId = base.Columns["UniqueOrderId"];
                this.columnNoOfMonthsSubscriptionDesc = base.Columns["NoOfMonthsSubscriptionDesc"];
                this.columnPaymentDate = base.Columns["PaymentDate"];
                this.columnVendorReferenceId = base.Columns["VendorReferenceId"];
                this.columnSubscriptionStartDate = base.Columns["SubscriptionStartDate"];
                this.columnSubscriptionEndDate = base.Columns["SubscriptionEndDate"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnUserId = new global::System.Data.DataColumn("UserId", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUserId);
                this.columnUniqueOrderId = new global::System.Data.DataColumn("UniqueOrderId", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUniqueOrderId);
                this.columnNoOfMonthsSubscriptionDesc = new global::System.Data.DataColumn("NoOfMonthsSubscriptionDesc", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNoOfMonthsSubscriptionDesc);
                this.columnPaymentDate = new global::System.Data.DataColumn("PaymentDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPaymentDate);
                this.columnVendorReferenceId = new global::System.Data.DataColumn("VendorReferenceId", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnVendorReferenceId);
                this.columnSubscriptionStartDate = new global::System.Data.DataColumn("SubscriptionStartDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSubscriptionStartDate);
                this.columnSubscriptionEndDate = new global::System.Data.DataColumn("SubscriptionEndDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSubscriptionEndDate);
                this.columnUserId.AllowDBNull = false;
                this.columnUserId.MaxLength = 500;
                this.columnUniqueOrderId.AllowDBNull = false;
                this.columnUniqueOrderId.MaxLength = 500;
                this.columnNoOfMonthsSubscriptionDesc.AllowDBNull = false;
                this.columnNoOfMonthsSubscriptionDesc.MaxLength = 5000;
                this.columnPaymentDate.AllowDBNull = false;
                this.columnVendorReferenceId.MaxLength = 500;
                this.columnSubscriptionStartDate.AllowDBNull = false;
                this.columnSubscriptionEndDate.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetOrdesrByUserIdOrderIdRow NewGetOrdesrByUserIdOrderIdRow() {
                return ((GetOrdesrByUserIdOrderIdRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new GetOrdesrByUserIdOrderIdRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(GetOrdesrByUserIdOrderIdRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.GetOrdesrByUserIdOrderIdRowChanged != null)) {
                    this.GetOrdesrByUserIdOrderIdRowChanged(this, new GetOrdesrByUserIdOrderIdRowChangeEvent(((GetOrdesrByUserIdOrderIdRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.GetOrdesrByUserIdOrderIdRowChanging != null)) {
                    this.GetOrdesrByUserIdOrderIdRowChanging(this, new GetOrdesrByUserIdOrderIdRowChangeEvent(((GetOrdesrByUserIdOrderIdRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.GetOrdesrByUserIdOrderIdRowDeleted != null)) {
                    this.GetOrdesrByUserIdOrderIdRowDeleted(this, new GetOrdesrByUserIdOrderIdRowChangeEvent(((GetOrdesrByUserIdOrderIdRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.GetOrdesrByUserIdOrderIdRowDeleting != null)) {
                    this.GetOrdesrByUserIdOrderIdRowDeleting(this, new GetOrdesrByUserIdOrderIdRowChangeEvent(((GetOrdesrByUserIdOrderIdRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveGetOrdesrByUserIdOrderIdRow(GetOrdesrByUserIdOrderIdRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                USAdvisoryDataSet ds = new USAdvisoryDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "GetOrdesrByUserIdOrderIdDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class GetPortfolioByTransactionIdDataTable : global::System.Data.TypedTableBase<GetPortfolioByTransactionIdRow> {
            
            private global::System.Data.DataColumn columnStockTransactionId;
            
            private global::System.Data.DataColumn columnPortfolioId;
            
            private global::System.Data.DataColumn columnCompanyName;
            
            private global::System.Data.DataColumn columnStockTicker;
            
            private global::System.Data.DataColumn columnBuyOrSellId;
            
            private global::System.Data.DataColumn columnEntryPrice;
            
            private global::System.Data.DataColumn columnExitPrice;
            
            private global::System.Data.DataColumn columnStopLoss;
            
            private global::System.Data.DataColumn columnUpdates;
            
            private global::System.Data.DataColumn columnUpdateDateTime;
            
            private global::System.Data.DataColumn columnPortfolioEntryDate;
            
            private global::System.Data.DataColumn columnCallStatus;
            
            private global::System.Data.DataColumn columnPortfolioExitDate;
            
            private global::System.Data.DataColumn columnIsPartiallyExited;
            
            private global::System.Data.DataColumn columnQty;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetPortfolioByTransactionIdDataTable() {
                this.TableName = "GetPortfolioByTransactionId";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GetPortfolioByTransactionIdDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected GetPortfolioByTransactionIdDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StockTransactionIdColumn {
                get {
                    return this.columnStockTransactionId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PortfolioIdColumn {
                get {
                    return this.columnPortfolioId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CompanyNameColumn {
                get {
                    return this.columnCompanyName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StockTickerColumn {
                get {
                    return this.columnStockTicker;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BuyOrSellIdColumn {
                get {
                    return this.columnBuyOrSellId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EntryPriceColumn {
                get {
                    return this.columnEntryPrice;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ExitPriceColumn {
                get {
                    return this.columnExitPrice;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StopLossColumn {
                get {
                    return this.columnStopLoss;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UpdatesColumn {
                get {
                    return this.columnUpdates;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UpdateDateTimeColumn {
                get {
                    return this.columnUpdateDateTime;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PortfolioEntryDateColumn {
                get {
                    return this.columnPortfolioEntryDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CallStatusColumn {
                get {
                    return this.columnCallStatus;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PortfolioExitDateColumn {
                get {
                    return this.columnPortfolioExitDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsPartiallyExitedColumn {
                get {
                    return this.columnIsPartiallyExited;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn QtyColumn {
                get {
                    return this.columnQty;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetPortfolioByTransactionIdRow this[int index] {
                get {
                    return ((GetPortfolioByTransactionIdRow)(this.Rows[index]));
                }
            }
            
            public event GetPortfolioByTransactionIdRowChangeEventHandler GetPortfolioByTransactionIdRowChanging;
            
            public event GetPortfolioByTransactionIdRowChangeEventHandler GetPortfolioByTransactionIdRowChanged;
            
            public event GetPortfolioByTransactionIdRowChangeEventHandler GetPortfolioByTransactionIdRowDeleting;
            
            public event GetPortfolioByTransactionIdRowChangeEventHandler GetPortfolioByTransactionIdRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddGetPortfolioByTransactionIdRow(GetPortfolioByTransactionIdRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetPortfolioByTransactionIdRow AddGetPortfolioByTransactionIdRow(int PortfolioId, string CompanyName, string StockTicker, int BuyOrSellId, decimal EntryPrice, decimal ExitPrice, decimal StopLoss, string Updates, System.DateTime UpdateDateTime, System.DateTime PortfolioEntryDate, string CallStatus, System.DateTime PortfolioExitDate, bool IsPartiallyExited, int Qty) {
                GetPortfolioByTransactionIdRow rowGetPortfolioByTransactionIdRow = ((GetPortfolioByTransactionIdRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        PortfolioId,
                        CompanyName,
                        StockTicker,
                        BuyOrSellId,
                        EntryPrice,
                        ExitPrice,
                        StopLoss,
                        Updates,
                        UpdateDateTime,
                        PortfolioEntryDate,
                        CallStatus,
                        PortfolioExitDate,
                        IsPartiallyExited,
                        Qty};
                rowGetPortfolioByTransactionIdRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowGetPortfolioByTransactionIdRow);
                return rowGetPortfolioByTransactionIdRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetPortfolioByTransactionIdRow FindByStockTransactionId(int StockTransactionId) {
                return ((GetPortfolioByTransactionIdRow)(this.Rows.Find(new object[] {
                            StockTransactionId})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                GetPortfolioByTransactionIdDataTable cln = ((GetPortfolioByTransactionIdDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new GetPortfolioByTransactionIdDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnStockTransactionId = base.Columns["StockTransactionId"];
                this.columnPortfolioId = base.Columns["PortfolioId"];
                this.columnCompanyName = base.Columns["CompanyName"];
                this.columnStockTicker = base.Columns["StockTicker"];
                this.columnBuyOrSellId = base.Columns["BuyOrSellId"];
                this.columnEntryPrice = base.Columns["EntryPrice"];
                this.columnExitPrice = base.Columns["ExitPrice"];
                this.columnStopLoss = base.Columns["StopLoss"];
                this.columnUpdates = base.Columns["Updates"];
                this.columnUpdateDateTime = base.Columns["UpdateDateTime"];
                this.columnPortfolioEntryDate = base.Columns["PortfolioEntryDate"];
                this.columnCallStatus = base.Columns["CallStatus"];
                this.columnPortfolioExitDate = base.Columns["PortfolioExitDate"];
                this.columnIsPartiallyExited = base.Columns["IsPartiallyExited"];
                this.columnQty = base.Columns["Qty"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnStockTransactionId = new global::System.Data.DataColumn("StockTransactionId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStockTransactionId);
                this.columnPortfolioId = new global::System.Data.DataColumn("PortfolioId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPortfolioId);
                this.columnCompanyName = new global::System.Data.DataColumn("CompanyName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCompanyName);
                this.columnStockTicker = new global::System.Data.DataColumn("StockTicker", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStockTicker);
                this.columnBuyOrSellId = new global::System.Data.DataColumn("BuyOrSellId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBuyOrSellId);
                this.columnEntryPrice = new global::System.Data.DataColumn("EntryPrice", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEntryPrice);
                this.columnExitPrice = new global::System.Data.DataColumn("ExitPrice", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnExitPrice);
                this.columnStopLoss = new global::System.Data.DataColumn("StopLoss", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStopLoss);
                this.columnUpdates = new global::System.Data.DataColumn("Updates", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUpdates);
                this.columnUpdateDateTime = new global::System.Data.DataColumn("UpdateDateTime", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUpdateDateTime);
                this.columnPortfolioEntryDate = new global::System.Data.DataColumn("PortfolioEntryDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPortfolioEntryDate);
                this.columnCallStatus = new global::System.Data.DataColumn("CallStatus", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCallStatus);
                this.columnPortfolioExitDate = new global::System.Data.DataColumn("PortfolioExitDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPortfolioExitDate);
                this.columnIsPartiallyExited = new global::System.Data.DataColumn("IsPartiallyExited", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsPartiallyExited);
                this.columnQty = new global::System.Data.DataColumn("Qty", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnQty);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnStockTransactionId}, true));
                this.columnStockTransactionId.AutoIncrement = true;
                this.columnStockTransactionId.AllowDBNull = false;
                this.columnStockTransactionId.ReadOnly = true;
                this.columnStockTransactionId.Unique = true;
                this.columnPortfolioId.AllowDBNull = false;
                this.columnCompanyName.AllowDBNull = false;
                this.columnCompanyName.MaxLength = 500;
                this.columnStockTicker.AllowDBNull = false;
                this.columnStockTicker.MaxLength = 100;
                this.columnBuyOrSellId.AllowDBNull = false;
                this.columnEntryPrice.AllowDBNull = false;
                this.columnExitPrice.AllowDBNull = false;
                this.columnStopLoss.AllowDBNull = false;
                this.columnUpdates.AllowDBNull = false;
                this.columnUpdates.MaxLength = 1073741823;
                this.columnUpdateDateTime.AllowDBNull = false;
                this.columnPortfolioEntryDate.AllowDBNull = false;
                this.columnCallStatus.AllowDBNull = false;
                this.columnCallStatus.MaxLength = 1;
                this.columnIsPartiallyExited.AllowDBNull = false;
                this.columnQty.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetPortfolioByTransactionIdRow NewGetPortfolioByTransactionIdRow() {
                return ((GetPortfolioByTransactionIdRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new GetPortfolioByTransactionIdRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(GetPortfolioByTransactionIdRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.GetPortfolioByTransactionIdRowChanged != null)) {
                    this.GetPortfolioByTransactionIdRowChanged(this, new GetPortfolioByTransactionIdRowChangeEvent(((GetPortfolioByTransactionIdRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.GetPortfolioByTransactionIdRowChanging != null)) {
                    this.GetPortfolioByTransactionIdRowChanging(this, new GetPortfolioByTransactionIdRowChangeEvent(((GetPortfolioByTransactionIdRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.GetPortfolioByTransactionIdRowDeleted != null)) {
                    this.GetPortfolioByTransactionIdRowDeleted(this, new GetPortfolioByTransactionIdRowChangeEvent(((GetPortfolioByTransactionIdRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.GetPortfolioByTransactionIdRowDeleting != null)) {
                    this.GetPortfolioByTransactionIdRowDeleting(this, new GetPortfolioByTransactionIdRowChangeEvent(((GetPortfolioByTransactionIdRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveGetPortfolioByTransactionIdRow(GetPortfolioByTransactionIdRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                USAdvisoryDataSet ds = new USAdvisoryDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "GetPortfolioByTransactionIdDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class GetPremiumServiceByArticleDataTable : global::System.Data.TypedTableBase<GetPremiumServiceByArticleRow> {
            
            private global::System.Data.DataColumn columnPremiumServiceTitle;
            
            private global::System.Data.DataColumn columnPremiumServiceDescription;
            
            private global::System.Data.DataColumn columnPremiumServiceDate;
            
            private global::System.Data.DataColumn columnIsActive;
            
            private global::System.Data.DataColumn columnIsPaid;
            
            private global::System.Data.DataColumn columnTicker;
            
            private global::System.Data.DataColumn columnTypeOfTradeId;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetPremiumServiceByArticleDataTable() {
                this.TableName = "GetPremiumServiceByArticle";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GetPremiumServiceByArticleDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected GetPremiumServiceByArticleDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PremiumServiceTitleColumn {
                get {
                    return this.columnPremiumServiceTitle;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PremiumServiceDescriptionColumn {
                get {
                    return this.columnPremiumServiceDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PremiumServiceDateColumn {
                get {
                    return this.columnPremiumServiceDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsActiveColumn {
                get {
                    return this.columnIsActive;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsPaidColumn {
                get {
                    return this.columnIsPaid;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TickerColumn {
                get {
                    return this.columnTicker;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TypeOfTradeIdColumn {
                get {
                    return this.columnTypeOfTradeId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetPremiumServiceByArticleRow this[int index] {
                get {
                    return ((GetPremiumServiceByArticleRow)(this.Rows[index]));
                }
            }
            
            public event GetPremiumServiceByArticleRowChangeEventHandler GetPremiumServiceByArticleRowChanging;
            
            public event GetPremiumServiceByArticleRowChangeEventHandler GetPremiumServiceByArticleRowChanged;
            
            public event GetPremiumServiceByArticleRowChangeEventHandler GetPremiumServiceByArticleRowDeleting;
            
            public event GetPremiumServiceByArticleRowChangeEventHandler GetPremiumServiceByArticleRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddGetPremiumServiceByArticleRow(GetPremiumServiceByArticleRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetPremiumServiceByArticleRow AddGetPremiumServiceByArticleRow(string PremiumServiceTitle, string PremiumServiceDescription, System.DateTime PremiumServiceDate, bool IsActive, bool IsPaid, string Ticker, int TypeOfTradeId) {
                GetPremiumServiceByArticleRow rowGetPremiumServiceByArticleRow = ((GetPremiumServiceByArticleRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        PremiumServiceTitle,
                        PremiumServiceDescription,
                        PremiumServiceDate,
                        IsActive,
                        IsPaid,
                        Ticker,
                        TypeOfTradeId};
                rowGetPremiumServiceByArticleRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowGetPremiumServiceByArticleRow);
                return rowGetPremiumServiceByArticleRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                GetPremiumServiceByArticleDataTable cln = ((GetPremiumServiceByArticleDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new GetPremiumServiceByArticleDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnPremiumServiceTitle = base.Columns["PremiumServiceTitle"];
                this.columnPremiumServiceDescription = base.Columns["PremiumServiceDescription"];
                this.columnPremiumServiceDate = base.Columns["PremiumServiceDate"];
                this.columnIsActive = base.Columns["IsActive"];
                this.columnIsPaid = base.Columns["IsPaid"];
                this.columnTicker = base.Columns["Ticker"];
                this.columnTypeOfTradeId = base.Columns["TypeOfTradeId"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnPremiumServiceTitle = new global::System.Data.DataColumn("PremiumServiceTitle", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPremiumServiceTitle);
                this.columnPremiumServiceDescription = new global::System.Data.DataColumn("PremiumServiceDescription", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPremiumServiceDescription);
                this.columnPremiumServiceDate = new global::System.Data.DataColumn("PremiumServiceDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPremiumServiceDate);
                this.columnIsActive = new global::System.Data.DataColumn("IsActive", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsActive);
                this.columnIsPaid = new global::System.Data.DataColumn("IsPaid", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsPaid);
                this.columnTicker = new global::System.Data.DataColumn("Ticker", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTicker);
                this.columnTypeOfTradeId = new global::System.Data.DataColumn("TypeOfTradeId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTypeOfTradeId);
                this.columnPremiumServiceTitle.AllowDBNull = false;
                this.columnPremiumServiceTitle.MaxLength = 500;
                this.columnPremiumServiceDescription.AllowDBNull = false;
                this.columnPremiumServiceDescription.MaxLength = 1073741823;
                this.columnPremiumServiceDate.AllowDBNull = false;
                this.columnIsActive.AllowDBNull = false;
                this.columnIsPaid.AllowDBNull = false;
                this.columnTicker.AllowDBNull = false;
                this.columnTicker.MaxLength = 12;
                this.columnTypeOfTradeId.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetPremiumServiceByArticleRow NewGetPremiumServiceByArticleRow() {
                return ((GetPremiumServiceByArticleRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new GetPremiumServiceByArticleRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(GetPremiumServiceByArticleRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.GetPremiumServiceByArticleRowChanged != null)) {
                    this.GetPremiumServiceByArticleRowChanged(this, new GetPremiumServiceByArticleRowChangeEvent(((GetPremiumServiceByArticleRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.GetPremiumServiceByArticleRowChanging != null)) {
                    this.GetPremiumServiceByArticleRowChanging(this, new GetPremiumServiceByArticleRowChangeEvent(((GetPremiumServiceByArticleRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.GetPremiumServiceByArticleRowDeleted != null)) {
                    this.GetPremiumServiceByArticleRowDeleted(this, new GetPremiumServiceByArticleRowChangeEvent(((GetPremiumServiceByArticleRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.GetPremiumServiceByArticleRowDeleting != null)) {
                    this.GetPremiumServiceByArticleRowDeleting(this, new GetPremiumServiceByArticleRowChangeEvent(((GetPremiumServiceByArticleRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveGetPremiumServiceByArticleRow(GetPremiumServiceByArticleRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                USAdvisoryDataSet ds = new USAdvisoryDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "GetPremiumServiceByArticleDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class GetPremiumServicesDataTable : global::System.Data.TypedTableBase<GetPremiumServicesRow> {
            
            private global::System.Data.DataColumn columnPremiumServiceId;
            
            private global::System.Data.DataColumn columnPremiumServiceTitle;
            
            private global::System.Data.DataColumn columnPremiumServiceDescription;
            
            private global::System.Data.DataColumn columnPremiumServicedate;
            
            private global::System.Data.DataColumn columnIsActive;
            
            private global::System.Data.DataColumn columnIsPaid;
            
            private global::System.Data.DataColumn columnTicker;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetPremiumServicesDataTable() {
                this.TableName = "GetPremiumServices";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GetPremiumServicesDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected GetPremiumServicesDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PremiumServiceIdColumn {
                get {
                    return this.columnPremiumServiceId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PremiumServiceTitleColumn {
                get {
                    return this.columnPremiumServiceTitle;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PremiumServiceDescriptionColumn {
                get {
                    return this.columnPremiumServiceDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PremiumServicedateColumn {
                get {
                    return this.columnPremiumServicedate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsActiveColumn {
                get {
                    return this.columnIsActive;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsPaidColumn {
                get {
                    return this.columnIsPaid;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TickerColumn {
                get {
                    return this.columnTicker;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetPremiumServicesRow this[int index] {
                get {
                    return ((GetPremiumServicesRow)(this.Rows[index]));
                }
            }
            
            public event GetPremiumServicesRowChangeEventHandler GetPremiumServicesRowChanging;
            
            public event GetPremiumServicesRowChangeEventHandler GetPremiumServicesRowChanged;
            
            public event GetPremiumServicesRowChangeEventHandler GetPremiumServicesRowDeleting;
            
            public event GetPremiumServicesRowChangeEventHandler GetPremiumServicesRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddGetPremiumServicesRow(GetPremiumServicesRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetPremiumServicesRow AddGetPremiumServicesRow(string PremiumServiceTitle, string PremiumServiceDescription, System.DateTime PremiumServicedate, bool IsActive, bool IsPaid, string Ticker) {
                GetPremiumServicesRow rowGetPremiumServicesRow = ((GetPremiumServicesRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        PremiumServiceTitle,
                        PremiumServiceDescription,
                        PremiumServicedate,
                        IsActive,
                        IsPaid,
                        Ticker};
                rowGetPremiumServicesRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowGetPremiumServicesRow);
                return rowGetPremiumServicesRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetPremiumServicesRow FindByPremiumServiceId(int PremiumServiceId) {
                return ((GetPremiumServicesRow)(this.Rows.Find(new object[] {
                            PremiumServiceId})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                GetPremiumServicesDataTable cln = ((GetPremiumServicesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new GetPremiumServicesDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnPremiumServiceId = base.Columns["PremiumServiceId"];
                this.columnPremiumServiceTitle = base.Columns["PremiumServiceTitle"];
                this.columnPremiumServiceDescription = base.Columns["PremiumServiceDescription"];
                this.columnPremiumServicedate = base.Columns["PremiumServicedate"];
                this.columnIsActive = base.Columns["IsActive"];
                this.columnIsPaid = base.Columns["IsPaid"];
                this.columnTicker = base.Columns["Ticker"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnPremiumServiceId = new global::System.Data.DataColumn("PremiumServiceId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPremiumServiceId);
                this.columnPremiumServiceTitle = new global::System.Data.DataColumn("PremiumServiceTitle", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPremiumServiceTitle);
                this.columnPremiumServiceDescription = new global::System.Data.DataColumn("PremiumServiceDescription", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPremiumServiceDescription);
                this.columnPremiumServicedate = new global::System.Data.DataColumn("PremiumServicedate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPremiumServicedate);
                this.columnIsActive = new global::System.Data.DataColumn("IsActive", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsActive);
                this.columnIsPaid = new global::System.Data.DataColumn("IsPaid", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsPaid);
                this.columnTicker = new global::System.Data.DataColumn("Ticker", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTicker);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnPremiumServiceId}, true));
                this.columnPremiumServiceId.AutoIncrement = true;
                this.columnPremiumServiceId.AllowDBNull = false;
                this.columnPremiumServiceId.ReadOnly = true;
                this.columnPremiumServiceId.Unique = true;
                this.columnPremiumServiceTitle.AllowDBNull = false;
                this.columnPremiumServiceTitle.MaxLength = 500;
                this.columnPremiumServiceDescription.AllowDBNull = false;
                this.columnPremiumServiceDescription.MaxLength = 1073741823;
                this.columnPremiumServicedate.AllowDBNull = false;
                this.columnIsActive.AllowDBNull = false;
                this.columnIsPaid.AllowDBNull = false;
                this.columnTicker.AllowDBNull = false;
                this.columnTicker.MaxLength = 12;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetPremiumServicesRow NewGetPremiumServicesRow() {
                return ((GetPremiumServicesRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new GetPremiumServicesRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(GetPremiumServicesRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.GetPremiumServicesRowChanged != null)) {
                    this.GetPremiumServicesRowChanged(this, new GetPremiumServicesRowChangeEvent(((GetPremiumServicesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.GetPremiumServicesRowChanging != null)) {
                    this.GetPremiumServicesRowChanging(this, new GetPremiumServicesRowChangeEvent(((GetPremiumServicesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.GetPremiumServicesRowDeleted != null)) {
                    this.GetPremiumServicesRowDeleted(this, new GetPremiumServicesRowChangeEvent(((GetPremiumServicesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.GetPremiumServicesRowDeleting != null)) {
                    this.GetPremiumServicesRowDeleting(this, new GetPremiumServicesRowChangeEvent(((GetPremiumServicesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveGetPremiumServicesRow(GetPremiumServicesRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                USAdvisoryDataSet ds = new USAdvisoryDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "GetPremiumServicesDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class GetUserByUserIdDataTable : global::System.Data.TypedTableBase<GetUserByUserIdRow> {
            
            private global::System.Data.DataColumn columnUserId;
            
            private global::System.Data.DataColumn columnPassword;
            
            private global::System.Data.DataColumn columnFirstName;
            
            private global::System.Data.DataColumn columnLastName;
            
            private global::System.Data.DataColumn columnPhoneNumber;
            
            private global::System.Data.DataColumn columnAddress;
            
            private global::System.Data.DataColumn columnState;
            
            private global::System.Data.DataColumn columnCountry;
            
            private global::System.Data.DataColumn columnZipCode;
            
            private global::System.Data.DataColumn columnIsPaidSubscriber;
            
            private global::System.Data.DataColumn columnIsAutoRenewal;
            
            private global::System.Data.DataColumn columnRegistrationDate;
            
            private global::System.Data.DataColumn columnSubscriptionStartDate;
            
            private global::System.Data.DataColumn columnSubscriptionEndDate;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetUserByUserIdDataTable() {
                this.TableName = "GetUserByUserId";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GetUserByUserIdDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected GetUserByUserIdDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UserIdColumn {
                get {
                    return this.columnUserId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PasswordColumn {
                get {
                    return this.columnPassword;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FirstNameColumn {
                get {
                    return this.columnFirstName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LastNameColumn {
                get {
                    return this.columnLastName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PhoneNumberColumn {
                get {
                    return this.columnPhoneNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AddressColumn {
                get {
                    return this.columnAddress;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StateColumn {
                get {
                    return this.columnState;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CountryColumn {
                get {
                    return this.columnCountry;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ZipCodeColumn {
                get {
                    return this.columnZipCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsPaidSubscriberColumn {
                get {
                    return this.columnIsPaidSubscriber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsAutoRenewalColumn {
                get {
                    return this.columnIsAutoRenewal;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RegistrationDateColumn {
                get {
                    return this.columnRegistrationDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SubscriptionStartDateColumn {
                get {
                    return this.columnSubscriptionStartDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SubscriptionEndDateColumn {
                get {
                    return this.columnSubscriptionEndDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetUserByUserIdRow this[int index] {
                get {
                    return ((GetUserByUserIdRow)(this.Rows[index]));
                }
            }
            
            public event GetUserByUserIdRowChangeEventHandler GetUserByUserIdRowChanging;
            
            public event GetUserByUserIdRowChangeEventHandler GetUserByUserIdRowChanged;
            
            public event GetUserByUserIdRowChangeEventHandler GetUserByUserIdRowDeleting;
            
            public event GetUserByUserIdRowChangeEventHandler GetUserByUserIdRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddGetUserByUserIdRow(GetUserByUserIdRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetUserByUserIdRow AddGetUserByUserIdRow(string UserId, string Password, string FirstName, string LastName, string PhoneNumber, string Address, string State, string Country, int ZipCode, bool IsPaidSubscriber, bool IsAutoRenewal, System.DateTime RegistrationDate, System.DateTime SubscriptionStartDate, System.DateTime SubscriptionEndDate) {
                GetUserByUserIdRow rowGetUserByUserIdRow = ((GetUserByUserIdRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        UserId,
                        Password,
                        FirstName,
                        LastName,
                        PhoneNumber,
                        Address,
                        State,
                        Country,
                        ZipCode,
                        IsPaidSubscriber,
                        IsAutoRenewal,
                        RegistrationDate,
                        SubscriptionStartDate,
                        SubscriptionEndDate};
                rowGetUserByUserIdRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowGetUserByUserIdRow);
                return rowGetUserByUserIdRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetUserByUserIdRow FindByUserId(string UserId) {
                return ((GetUserByUserIdRow)(this.Rows.Find(new object[] {
                            UserId})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                GetUserByUserIdDataTable cln = ((GetUserByUserIdDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new GetUserByUserIdDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnUserId = base.Columns["UserId"];
                this.columnPassword = base.Columns["Password"];
                this.columnFirstName = base.Columns["FirstName"];
                this.columnLastName = base.Columns["LastName"];
                this.columnPhoneNumber = base.Columns["PhoneNumber"];
                this.columnAddress = base.Columns["Address"];
                this.columnState = base.Columns["State"];
                this.columnCountry = base.Columns["Country"];
                this.columnZipCode = base.Columns["ZipCode"];
                this.columnIsPaidSubscriber = base.Columns["IsPaidSubscriber"];
                this.columnIsAutoRenewal = base.Columns["IsAutoRenewal"];
                this.columnRegistrationDate = base.Columns["RegistrationDate"];
                this.columnSubscriptionStartDate = base.Columns["SubscriptionStartDate"];
                this.columnSubscriptionEndDate = base.Columns["SubscriptionEndDate"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnUserId = new global::System.Data.DataColumn("UserId", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUserId);
                this.columnPassword = new global::System.Data.DataColumn("Password", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPassword);
                this.columnFirstName = new global::System.Data.DataColumn("FirstName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFirstName);
                this.columnLastName = new global::System.Data.DataColumn("LastName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLastName);
                this.columnPhoneNumber = new global::System.Data.DataColumn("PhoneNumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPhoneNumber);
                this.columnAddress = new global::System.Data.DataColumn("Address", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAddress);
                this.columnState = new global::System.Data.DataColumn("State", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnState);
                this.columnCountry = new global::System.Data.DataColumn("Country", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCountry);
                this.columnZipCode = new global::System.Data.DataColumn("ZipCode", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnZipCode);
                this.columnIsPaidSubscriber = new global::System.Data.DataColumn("IsPaidSubscriber", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsPaidSubscriber);
                this.columnIsAutoRenewal = new global::System.Data.DataColumn("IsAutoRenewal", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsAutoRenewal);
                this.columnRegistrationDate = new global::System.Data.DataColumn("RegistrationDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRegistrationDate);
                this.columnSubscriptionStartDate = new global::System.Data.DataColumn("SubscriptionStartDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSubscriptionStartDate);
                this.columnSubscriptionEndDate = new global::System.Data.DataColumn("SubscriptionEndDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSubscriptionEndDate);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnUserId}, true));
                this.columnUserId.AllowDBNull = false;
                this.columnUserId.Unique = true;
                this.columnUserId.MaxLength = 500;
                this.columnPassword.AllowDBNull = false;
                this.columnPassword.MaxLength = 50;
                this.columnFirstName.AllowDBNull = false;
                this.columnFirstName.MaxLength = 500;
                this.columnLastName.AllowDBNull = false;
                this.columnLastName.MaxLength = 500;
                this.columnPhoneNumber.AllowDBNull = false;
                this.columnPhoneNumber.MaxLength = 50;
                this.columnAddress.AllowDBNull = false;
                this.columnAddress.MaxLength = 500;
                this.columnState.AllowDBNull = false;
                this.columnState.MaxLength = 10;
                this.columnCountry.AllowDBNull = false;
                this.columnCountry.MaxLength = 10;
                this.columnZipCode.AllowDBNull = false;
                this.columnIsPaidSubscriber.AllowDBNull = false;
                this.columnIsAutoRenewal.AllowDBNull = false;
                this.columnRegistrationDate.AllowDBNull = false;
                this.columnSubscriptionStartDate.AllowDBNull = false;
                this.columnSubscriptionEndDate.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetUserByUserIdRow NewGetUserByUserIdRow() {
                return ((GetUserByUserIdRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new GetUserByUserIdRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(GetUserByUserIdRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.GetUserByUserIdRowChanged != null)) {
                    this.GetUserByUserIdRowChanged(this, new GetUserByUserIdRowChangeEvent(((GetUserByUserIdRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.GetUserByUserIdRowChanging != null)) {
                    this.GetUserByUserIdRowChanging(this, new GetUserByUserIdRowChangeEvent(((GetUserByUserIdRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.GetUserByUserIdRowDeleted != null)) {
                    this.GetUserByUserIdRowDeleted(this, new GetUserByUserIdRowChangeEvent(((GetUserByUserIdRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.GetUserByUserIdRowDeleting != null)) {
                    this.GetUserByUserIdRowDeleting(this, new GetUserByUserIdRowChangeEvent(((GetUserByUserIdRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveGetUserByUserIdRow(GetUserByUserIdRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                USAdvisoryDataSet ds = new USAdvisoryDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "GetUserByUserIdDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class GetWatchOutNewsByArticleDataTable : global::System.Data.TypedTableBase<GetWatchOutNewsByArticleRow> {
            
            private global::System.Data.DataColumn columnWatchouttitle;
            
            private global::System.Data.DataColumn columnWatchOutText;
            
            private global::System.Data.DataColumn columnIsPaid;
            
            private global::System.Data.DataColumn columnTicker;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetWatchOutNewsByArticleDataTable() {
                this.TableName = "GetWatchOutNewsByArticle";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GetWatchOutNewsByArticleDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected GetWatchOutNewsByArticleDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WatchouttitleColumn {
                get {
                    return this.columnWatchouttitle;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WatchOutTextColumn {
                get {
                    return this.columnWatchOutText;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsPaidColumn {
                get {
                    return this.columnIsPaid;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TickerColumn {
                get {
                    return this.columnTicker;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetWatchOutNewsByArticleRow this[int index] {
                get {
                    return ((GetWatchOutNewsByArticleRow)(this.Rows[index]));
                }
            }
            
            public event GetWatchOutNewsByArticleRowChangeEventHandler GetWatchOutNewsByArticleRowChanging;
            
            public event GetWatchOutNewsByArticleRowChangeEventHandler GetWatchOutNewsByArticleRowChanged;
            
            public event GetWatchOutNewsByArticleRowChangeEventHandler GetWatchOutNewsByArticleRowDeleting;
            
            public event GetWatchOutNewsByArticleRowChangeEventHandler GetWatchOutNewsByArticleRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddGetWatchOutNewsByArticleRow(GetWatchOutNewsByArticleRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetWatchOutNewsByArticleRow AddGetWatchOutNewsByArticleRow(string Watchouttitle, string WatchOutText, bool IsPaid, string Ticker) {
                GetWatchOutNewsByArticleRow rowGetWatchOutNewsByArticleRow = ((GetWatchOutNewsByArticleRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Watchouttitle,
                        WatchOutText,
                        IsPaid,
                        Ticker};
                rowGetWatchOutNewsByArticleRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowGetWatchOutNewsByArticleRow);
                return rowGetWatchOutNewsByArticleRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                GetWatchOutNewsByArticleDataTable cln = ((GetWatchOutNewsByArticleDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new GetWatchOutNewsByArticleDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnWatchouttitle = base.Columns["Watchouttitle"];
                this.columnWatchOutText = base.Columns["WatchOutText"];
                this.columnIsPaid = base.Columns["IsPaid"];
                this.columnTicker = base.Columns["Ticker"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnWatchouttitle = new global::System.Data.DataColumn("Watchouttitle", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWatchouttitle);
                this.columnWatchOutText = new global::System.Data.DataColumn("WatchOutText", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWatchOutText);
                this.columnIsPaid = new global::System.Data.DataColumn("IsPaid", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsPaid);
                this.columnTicker = new global::System.Data.DataColumn("Ticker", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTicker);
                this.columnWatchouttitle.AllowDBNull = false;
                this.columnWatchouttitle.MaxLength = 5000;
                this.columnWatchOutText.AllowDBNull = false;
                this.columnWatchOutText.MaxLength = 1073741823;
                this.columnIsPaid.AllowDBNull = false;
                this.columnTicker.AllowDBNull = false;
                this.columnTicker.MaxLength = 10;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetWatchOutNewsByArticleRow NewGetWatchOutNewsByArticleRow() {
                return ((GetWatchOutNewsByArticleRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new GetWatchOutNewsByArticleRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(GetWatchOutNewsByArticleRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.GetWatchOutNewsByArticleRowChanged != null)) {
                    this.GetWatchOutNewsByArticleRowChanged(this, new GetWatchOutNewsByArticleRowChangeEvent(((GetWatchOutNewsByArticleRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.GetWatchOutNewsByArticleRowChanging != null)) {
                    this.GetWatchOutNewsByArticleRowChanging(this, new GetWatchOutNewsByArticleRowChangeEvent(((GetWatchOutNewsByArticleRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.GetWatchOutNewsByArticleRowDeleted != null)) {
                    this.GetWatchOutNewsByArticleRowDeleted(this, new GetWatchOutNewsByArticleRowChangeEvent(((GetWatchOutNewsByArticleRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.GetWatchOutNewsByArticleRowDeleting != null)) {
                    this.GetWatchOutNewsByArticleRowDeleting(this, new GetWatchOutNewsByArticleRowChangeEvent(((GetWatchOutNewsByArticleRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveGetWatchOutNewsByArticleRow(GetWatchOutNewsByArticleRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                USAdvisoryDataSet ds = new USAdvisoryDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "GetWatchOutNewsByArticleDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class UI_GetAllMarketCommentaryForTodayDataTable : global::System.Data.TypedTableBase<UI_GetAllMarketCommentaryForTodayRow> {
            
            private global::System.Data.DataColumn columnMarketCommentaryId;
            
            private global::System.Data.DataColumn columnMarketCommentaryTitle;
            
            private global::System.Data.DataColumn columnMarketCommentaryDateTime;
            
            private global::System.Data.DataColumn columnMarketCommentaryDesc;
            
            private global::System.Data.DataColumn columnIsCommentaryActive;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UI_GetAllMarketCommentaryForTodayDataTable() {
                this.TableName = "UI_GetAllMarketCommentaryForToday";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal UI_GetAllMarketCommentaryForTodayDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected UI_GetAllMarketCommentaryForTodayDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MarketCommentaryIdColumn {
                get {
                    return this.columnMarketCommentaryId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MarketCommentaryTitleColumn {
                get {
                    return this.columnMarketCommentaryTitle;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MarketCommentaryDateTimeColumn {
                get {
                    return this.columnMarketCommentaryDateTime;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MarketCommentaryDescColumn {
                get {
                    return this.columnMarketCommentaryDesc;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsCommentaryActiveColumn {
                get {
                    return this.columnIsCommentaryActive;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UI_GetAllMarketCommentaryForTodayRow this[int index] {
                get {
                    return ((UI_GetAllMarketCommentaryForTodayRow)(this.Rows[index]));
                }
            }
            
            public event UI_GetAllMarketCommentaryForTodayRowChangeEventHandler UI_GetAllMarketCommentaryForTodayRowChanging;
            
            public event UI_GetAllMarketCommentaryForTodayRowChangeEventHandler UI_GetAllMarketCommentaryForTodayRowChanged;
            
            public event UI_GetAllMarketCommentaryForTodayRowChangeEventHandler UI_GetAllMarketCommentaryForTodayRowDeleting;
            
            public event UI_GetAllMarketCommentaryForTodayRowChangeEventHandler UI_GetAllMarketCommentaryForTodayRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddUI_GetAllMarketCommentaryForTodayRow(UI_GetAllMarketCommentaryForTodayRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UI_GetAllMarketCommentaryForTodayRow AddUI_GetAllMarketCommentaryForTodayRow(string MarketCommentaryTitle, System.DateTime MarketCommentaryDateTime, string MarketCommentaryDesc, bool IsCommentaryActive) {
                UI_GetAllMarketCommentaryForTodayRow rowUI_GetAllMarketCommentaryForTodayRow = ((UI_GetAllMarketCommentaryForTodayRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        MarketCommentaryTitle,
                        MarketCommentaryDateTime,
                        MarketCommentaryDesc,
                        IsCommentaryActive};
                rowUI_GetAllMarketCommentaryForTodayRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowUI_GetAllMarketCommentaryForTodayRow);
                return rowUI_GetAllMarketCommentaryForTodayRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UI_GetAllMarketCommentaryForTodayRow FindByMarketCommentaryId(int MarketCommentaryId) {
                return ((UI_GetAllMarketCommentaryForTodayRow)(this.Rows.Find(new object[] {
                            MarketCommentaryId})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                UI_GetAllMarketCommentaryForTodayDataTable cln = ((UI_GetAllMarketCommentaryForTodayDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new UI_GetAllMarketCommentaryForTodayDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnMarketCommentaryId = base.Columns["MarketCommentaryId"];
                this.columnMarketCommentaryTitle = base.Columns["MarketCommentaryTitle"];
                this.columnMarketCommentaryDateTime = base.Columns["MarketCommentaryDateTime"];
                this.columnMarketCommentaryDesc = base.Columns["MarketCommentaryDesc"];
                this.columnIsCommentaryActive = base.Columns["IsCommentaryActive"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnMarketCommentaryId = new global::System.Data.DataColumn("MarketCommentaryId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMarketCommentaryId);
                this.columnMarketCommentaryTitle = new global::System.Data.DataColumn("MarketCommentaryTitle", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMarketCommentaryTitle);
                this.columnMarketCommentaryDateTime = new global::System.Data.DataColumn("MarketCommentaryDateTime", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMarketCommentaryDateTime);
                this.columnMarketCommentaryDesc = new global::System.Data.DataColumn("MarketCommentaryDesc", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMarketCommentaryDesc);
                this.columnIsCommentaryActive = new global::System.Data.DataColumn("IsCommentaryActive", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsCommentaryActive);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnMarketCommentaryId}, true));
                this.columnMarketCommentaryId.AutoIncrement = true;
                this.columnMarketCommentaryId.AllowDBNull = false;
                this.columnMarketCommentaryId.ReadOnly = true;
                this.columnMarketCommentaryId.Unique = true;
                this.columnMarketCommentaryTitle.AllowDBNull = false;
                this.columnMarketCommentaryTitle.MaxLength = 5000;
                this.columnMarketCommentaryDateTime.AllowDBNull = false;
                this.columnMarketCommentaryDesc.AllowDBNull = false;
                this.columnMarketCommentaryDesc.MaxLength = 1073741823;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UI_GetAllMarketCommentaryForTodayRow NewUI_GetAllMarketCommentaryForTodayRow() {
                return ((UI_GetAllMarketCommentaryForTodayRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new UI_GetAllMarketCommentaryForTodayRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(UI_GetAllMarketCommentaryForTodayRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.UI_GetAllMarketCommentaryForTodayRowChanged != null)) {
                    this.UI_GetAllMarketCommentaryForTodayRowChanged(this, new UI_GetAllMarketCommentaryForTodayRowChangeEvent(((UI_GetAllMarketCommentaryForTodayRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.UI_GetAllMarketCommentaryForTodayRowChanging != null)) {
                    this.UI_GetAllMarketCommentaryForTodayRowChanging(this, new UI_GetAllMarketCommentaryForTodayRowChangeEvent(((UI_GetAllMarketCommentaryForTodayRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.UI_GetAllMarketCommentaryForTodayRowDeleted != null)) {
                    this.UI_GetAllMarketCommentaryForTodayRowDeleted(this, new UI_GetAllMarketCommentaryForTodayRowChangeEvent(((UI_GetAllMarketCommentaryForTodayRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.UI_GetAllMarketCommentaryForTodayRowDeleting != null)) {
                    this.UI_GetAllMarketCommentaryForTodayRowDeleting(this, new UI_GetAllMarketCommentaryForTodayRowChangeEvent(((UI_GetAllMarketCommentaryForTodayRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveUI_GetAllMarketCommentaryForTodayRow(UI_GetAllMarketCommentaryForTodayRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                USAdvisoryDataSet ds = new USAdvisoryDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "UI_GetAllMarketCommentaryForTodayDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class UI_GetAllNewsViewsDataTable : global::System.Data.TypedTableBase<UI_GetAllNewsViewsRow> {
            
            private global::System.Data.DataColumn columnNewsId;
            
            private global::System.Data.DataColumn columnNewsTitle;
            
            private global::System.Data.DataColumn columnNewsDateTime;
            
            private global::System.Data.DataColumn columnNewsDescription;
            
            private global::System.Data.DataColumn columnIsActive;
            
            private global::System.Data.DataColumn columnIsPaid;
            
            private global::System.Data.DataColumn columnTicker;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UI_GetAllNewsViewsDataTable() {
                this.TableName = "UI_GetAllNewsViews";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal UI_GetAllNewsViewsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected UI_GetAllNewsViewsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NewsIdColumn {
                get {
                    return this.columnNewsId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NewsTitleColumn {
                get {
                    return this.columnNewsTitle;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NewsDateTimeColumn {
                get {
                    return this.columnNewsDateTime;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NewsDescriptionColumn {
                get {
                    return this.columnNewsDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsActiveColumn {
                get {
                    return this.columnIsActive;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsPaidColumn {
                get {
                    return this.columnIsPaid;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TickerColumn {
                get {
                    return this.columnTicker;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UI_GetAllNewsViewsRow this[int index] {
                get {
                    return ((UI_GetAllNewsViewsRow)(this.Rows[index]));
                }
            }
            
            public event UI_GetAllNewsViewsRowChangeEventHandler UI_GetAllNewsViewsRowChanging;
            
            public event UI_GetAllNewsViewsRowChangeEventHandler UI_GetAllNewsViewsRowChanged;
            
            public event UI_GetAllNewsViewsRowChangeEventHandler UI_GetAllNewsViewsRowDeleting;
            
            public event UI_GetAllNewsViewsRowChangeEventHandler UI_GetAllNewsViewsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddUI_GetAllNewsViewsRow(UI_GetAllNewsViewsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UI_GetAllNewsViewsRow AddUI_GetAllNewsViewsRow(string NewsTitle, System.DateTime NewsDateTime, string NewsDescription, bool IsActive, bool IsPaid, string Ticker) {
                UI_GetAllNewsViewsRow rowUI_GetAllNewsViewsRow = ((UI_GetAllNewsViewsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        NewsTitle,
                        NewsDateTime,
                        NewsDescription,
                        IsActive,
                        IsPaid,
                        Ticker};
                rowUI_GetAllNewsViewsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowUI_GetAllNewsViewsRow);
                return rowUI_GetAllNewsViewsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UI_GetAllNewsViewsRow FindByNewsId(int NewsId) {
                return ((UI_GetAllNewsViewsRow)(this.Rows.Find(new object[] {
                            NewsId})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                UI_GetAllNewsViewsDataTable cln = ((UI_GetAllNewsViewsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new UI_GetAllNewsViewsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnNewsId = base.Columns["NewsId"];
                this.columnNewsTitle = base.Columns["NewsTitle"];
                this.columnNewsDateTime = base.Columns["NewsDateTime"];
                this.columnNewsDescription = base.Columns["NewsDescription"];
                this.columnIsActive = base.Columns["IsActive"];
                this.columnIsPaid = base.Columns["IsPaid"];
                this.columnTicker = base.Columns["Ticker"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnNewsId = new global::System.Data.DataColumn("NewsId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNewsId);
                this.columnNewsTitle = new global::System.Data.DataColumn("NewsTitle", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNewsTitle);
                this.columnNewsDateTime = new global::System.Data.DataColumn("NewsDateTime", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNewsDateTime);
                this.columnNewsDescription = new global::System.Data.DataColumn("NewsDescription", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNewsDescription);
                this.columnIsActive = new global::System.Data.DataColumn("IsActive", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsActive);
                this.columnIsPaid = new global::System.Data.DataColumn("IsPaid", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsPaid);
                this.columnTicker = new global::System.Data.DataColumn("Ticker", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTicker);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnNewsId}, true));
                this.columnNewsId.AutoIncrement = true;
                this.columnNewsId.AllowDBNull = false;
                this.columnNewsId.ReadOnly = true;
                this.columnNewsId.Unique = true;
                this.columnNewsTitle.AllowDBNull = false;
                this.columnNewsTitle.MaxLength = 5000;
                this.columnNewsDateTime.AllowDBNull = false;
                this.columnNewsDescription.AllowDBNull = false;
                this.columnNewsDescription.MaxLength = 1073741823;
                this.columnIsActive.AllowDBNull = false;
                this.columnIsPaid.AllowDBNull = false;
                this.columnTicker.AllowDBNull = false;
                this.columnTicker.MaxLength = 12;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UI_GetAllNewsViewsRow NewUI_GetAllNewsViewsRow() {
                return ((UI_GetAllNewsViewsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new UI_GetAllNewsViewsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(UI_GetAllNewsViewsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.UI_GetAllNewsViewsRowChanged != null)) {
                    this.UI_GetAllNewsViewsRowChanged(this, new UI_GetAllNewsViewsRowChangeEvent(((UI_GetAllNewsViewsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.UI_GetAllNewsViewsRowChanging != null)) {
                    this.UI_GetAllNewsViewsRowChanging(this, new UI_GetAllNewsViewsRowChangeEvent(((UI_GetAllNewsViewsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.UI_GetAllNewsViewsRowDeleted != null)) {
                    this.UI_GetAllNewsViewsRowDeleted(this, new UI_GetAllNewsViewsRowChangeEvent(((UI_GetAllNewsViewsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.UI_GetAllNewsViewsRowDeleting != null)) {
                    this.UI_GetAllNewsViewsRowDeleting(this, new UI_GetAllNewsViewsRowChangeEvent(((UI_GetAllNewsViewsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveUI_GetAllNewsViewsRow(UI_GetAllNewsViewsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                USAdvisoryDataSet ds = new USAdvisoryDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "UI_GetAllNewsViewsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class UI_GetAllWatchOutNewsForTodayDataTable : global::System.Data.TypedTableBase<UI_GetAllWatchOutNewsForTodayRow> {
            
            private global::System.Data.DataColumn columnWatchOutId;
            
            private global::System.Data.DataColumn columnWatchOutDateTime;
            
            private global::System.Data.DataColumn columnWatchOutText;
            
            private global::System.Data.DataColumn columnWatchOutTitle;
            
            private global::System.Data.DataColumn columnIsPaid;
            
            private global::System.Data.DataColumn columnTicker;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UI_GetAllWatchOutNewsForTodayDataTable() {
                this.TableName = "UI_GetAllWatchOutNewsForToday";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal UI_GetAllWatchOutNewsForTodayDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected UI_GetAllWatchOutNewsForTodayDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WatchOutIdColumn {
                get {
                    return this.columnWatchOutId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WatchOutDateTimeColumn {
                get {
                    return this.columnWatchOutDateTime;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WatchOutTextColumn {
                get {
                    return this.columnWatchOutText;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WatchOutTitleColumn {
                get {
                    return this.columnWatchOutTitle;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsPaidColumn {
                get {
                    return this.columnIsPaid;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TickerColumn {
                get {
                    return this.columnTicker;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UI_GetAllWatchOutNewsForTodayRow this[int index] {
                get {
                    return ((UI_GetAllWatchOutNewsForTodayRow)(this.Rows[index]));
                }
            }
            
            public event UI_GetAllWatchOutNewsForTodayRowChangeEventHandler UI_GetAllWatchOutNewsForTodayRowChanging;
            
            public event UI_GetAllWatchOutNewsForTodayRowChangeEventHandler UI_GetAllWatchOutNewsForTodayRowChanged;
            
            public event UI_GetAllWatchOutNewsForTodayRowChangeEventHandler UI_GetAllWatchOutNewsForTodayRowDeleting;
            
            public event UI_GetAllWatchOutNewsForTodayRowChangeEventHandler UI_GetAllWatchOutNewsForTodayRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddUI_GetAllWatchOutNewsForTodayRow(UI_GetAllWatchOutNewsForTodayRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UI_GetAllWatchOutNewsForTodayRow AddUI_GetAllWatchOutNewsForTodayRow(System.DateTime WatchOutDateTime, string WatchOutText, string WatchOutTitle, bool IsPaid, string Ticker) {
                UI_GetAllWatchOutNewsForTodayRow rowUI_GetAllWatchOutNewsForTodayRow = ((UI_GetAllWatchOutNewsForTodayRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        WatchOutDateTime,
                        WatchOutText,
                        WatchOutTitle,
                        IsPaid,
                        Ticker};
                rowUI_GetAllWatchOutNewsForTodayRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowUI_GetAllWatchOutNewsForTodayRow);
                return rowUI_GetAllWatchOutNewsForTodayRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UI_GetAllWatchOutNewsForTodayRow FindByWatchOutId(int WatchOutId) {
                return ((UI_GetAllWatchOutNewsForTodayRow)(this.Rows.Find(new object[] {
                            WatchOutId})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                UI_GetAllWatchOutNewsForTodayDataTable cln = ((UI_GetAllWatchOutNewsForTodayDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new UI_GetAllWatchOutNewsForTodayDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnWatchOutId = base.Columns["WatchOutId"];
                this.columnWatchOutDateTime = base.Columns["WatchOutDateTime"];
                this.columnWatchOutText = base.Columns["WatchOutText"];
                this.columnWatchOutTitle = base.Columns["WatchOutTitle"];
                this.columnIsPaid = base.Columns["IsPaid"];
                this.columnTicker = base.Columns["Ticker"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnWatchOutId = new global::System.Data.DataColumn("WatchOutId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWatchOutId);
                this.columnWatchOutDateTime = new global::System.Data.DataColumn("WatchOutDateTime", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWatchOutDateTime);
                this.columnWatchOutText = new global::System.Data.DataColumn("WatchOutText", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWatchOutText);
                this.columnWatchOutTitle = new global::System.Data.DataColumn("WatchOutTitle", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWatchOutTitle);
                this.columnIsPaid = new global::System.Data.DataColumn("IsPaid", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsPaid);
                this.columnTicker = new global::System.Data.DataColumn("Ticker", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTicker);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnWatchOutId}, true));
                this.columnWatchOutId.AutoIncrement = true;
                this.columnWatchOutId.AllowDBNull = false;
                this.columnWatchOutId.ReadOnly = true;
                this.columnWatchOutId.Unique = true;
                this.columnWatchOutDateTime.AllowDBNull = false;
                this.columnWatchOutText.AllowDBNull = false;
                this.columnWatchOutText.MaxLength = 1073741823;
                this.columnWatchOutTitle.AllowDBNull = false;
                this.columnWatchOutTitle.MaxLength = 5000;
                this.columnIsPaid.AllowDBNull = false;
                this.columnTicker.AllowDBNull = false;
                this.columnTicker.MaxLength = 10;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UI_GetAllWatchOutNewsForTodayRow NewUI_GetAllWatchOutNewsForTodayRow() {
                return ((UI_GetAllWatchOutNewsForTodayRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new UI_GetAllWatchOutNewsForTodayRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(UI_GetAllWatchOutNewsForTodayRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.UI_GetAllWatchOutNewsForTodayRowChanged != null)) {
                    this.UI_GetAllWatchOutNewsForTodayRowChanged(this, new UI_GetAllWatchOutNewsForTodayRowChangeEvent(((UI_GetAllWatchOutNewsForTodayRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.UI_GetAllWatchOutNewsForTodayRowChanging != null)) {
                    this.UI_GetAllWatchOutNewsForTodayRowChanging(this, new UI_GetAllWatchOutNewsForTodayRowChangeEvent(((UI_GetAllWatchOutNewsForTodayRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.UI_GetAllWatchOutNewsForTodayRowDeleted != null)) {
                    this.UI_GetAllWatchOutNewsForTodayRowDeleted(this, new UI_GetAllWatchOutNewsForTodayRowChangeEvent(((UI_GetAllWatchOutNewsForTodayRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.UI_GetAllWatchOutNewsForTodayRowDeleting != null)) {
                    this.UI_GetAllWatchOutNewsForTodayRowDeleting(this, new UI_GetAllWatchOutNewsForTodayRowChangeEvent(((UI_GetAllWatchOutNewsForTodayRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveUI_GetAllWatchOutNewsForTodayRow(UI_GetAllWatchOutNewsForTodayRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                USAdvisoryDataSet ds = new USAdvisoryDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "UI_GetAllWatchOutNewsForTodayDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class UI_GetNewsViewsByNewsIdDataTable : global::System.Data.TypedTableBase<UI_GetNewsViewsByNewsIdRow> {
            
            private global::System.Data.DataColumn columnNewsId;
            
            private global::System.Data.DataColumn columnNewsTitle;
            
            private global::System.Data.DataColumn columnNewsDateTime;
            
            private global::System.Data.DataColumn columnNewsDescription;
            
            private global::System.Data.DataColumn columnIsActive;
            
            private global::System.Data.DataColumn columnIsPaid;
            
            private global::System.Data.DataColumn columnTicker;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UI_GetNewsViewsByNewsIdDataTable() {
                this.TableName = "UI_GetNewsViewsByNewsId";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal UI_GetNewsViewsByNewsIdDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected UI_GetNewsViewsByNewsIdDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NewsIdColumn {
                get {
                    return this.columnNewsId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NewsTitleColumn {
                get {
                    return this.columnNewsTitle;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NewsDateTimeColumn {
                get {
                    return this.columnNewsDateTime;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NewsDescriptionColumn {
                get {
                    return this.columnNewsDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsActiveColumn {
                get {
                    return this.columnIsActive;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsPaidColumn {
                get {
                    return this.columnIsPaid;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TickerColumn {
                get {
                    return this.columnTicker;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UI_GetNewsViewsByNewsIdRow this[int index] {
                get {
                    return ((UI_GetNewsViewsByNewsIdRow)(this.Rows[index]));
                }
            }
            
            public event UI_GetNewsViewsByNewsIdRowChangeEventHandler UI_GetNewsViewsByNewsIdRowChanging;
            
            public event UI_GetNewsViewsByNewsIdRowChangeEventHandler UI_GetNewsViewsByNewsIdRowChanged;
            
            public event UI_GetNewsViewsByNewsIdRowChangeEventHandler UI_GetNewsViewsByNewsIdRowDeleting;
            
            public event UI_GetNewsViewsByNewsIdRowChangeEventHandler UI_GetNewsViewsByNewsIdRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddUI_GetNewsViewsByNewsIdRow(UI_GetNewsViewsByNewsIdRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UI_GetNewsViewsByNewsIdRow AddUI_GetNewsViewsByNewsIdRow(string NewsTitle, System.DateTime NewsDateTime, string NewsDescription, bool IsActive, bool IsPaid, string Ticker) {
                UI_GetNewsViewsByNewsIdRow rowUI_GetNewsViewsByNewsIdRow = ((UI_GetNewsViewsByNewsIdRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        NewsTitle,
                        NewsDateTime,
                        NewsDescription,
                        IsActive,
                        IsPaid,
                        Ticker};
                rowUI_GetNewsViewsByNewsIdRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowUI_GetNewsViewsByNewsIdRow);
                return rowUI_GetNewsViewsByNewsIdRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UI_GetNewsViewsByNewsIdRow FindByNewsId(int NewsId) {
                return ((UI_GetNewsViewsByNewsIdRow)(this.Rows.Find(new object[] {
                            NewsId})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                UI_GetNewsViewsByNewsIdDataTable cln = ((UI_GetNewsViewsByNewsIdDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new UI_GetNewsViewsByNewsIdDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnNewsId = base.Columns["NewsId"];
                this.columnNewsTitle = base.Columns["NewsTitle"];
                this.columnNewsDateTime = base.Columns["NewsDateTime"];
                this.columnNewsDescription = base.Columns["NewsDescription"];
                this.columnIsActive = base.Columns["IsActive"];
                this.columnIsPaid = base.Columns["IsPaid"];
                this.columnTicker = base.Columns["Ticker"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnNewsId = new global::System.Data.DataColumn("NewsId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNewsId);
                this.columnNewsTitle = new global::System.Data.DataColumn("NewsTitle", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNewsTitle);
                this.columnNewsDateTime = new global::System.Data.DataColumn("NewsDateTime", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNewsDateTime);
                this.columnNewsDescription = new global::System.Data.DataColumn("NewsDescription", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNewsDescription);
                this.columnIsActive = new global::System.Data.DataColumn("IsActive", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsActive);
                this.columnIsPaid = new global::System.Data.DataColumn("IsPaid", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsPaid);
                this.columnTicker = new global::System.Data.DataColumn("Ticker", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTicker);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnNewsId}, true));
                this.columnNewsId.AutoIncrement = true;
                this.columnNewsId.AllowDBNull = false;
                this.columnNewsId.ReadOnly = true;
                this.columnNewsId.Unique = true;
                this.columnNewsTitle.AllowDBNull = false;
                this.columnNewsTitle.MaxLength = 5000;
                this.columnNewsDateTime.AllowDBNull = false;
                this.columnNewsDescription.AllowDBNull = false;
                this.columnNewsDescription.MaxLength = 1073741823;
                this.columnIsActive.AllowDBNull = false;
                this.columnIsPaid.AllowDBNull = false;
                this.columnTicker.AllowDBNull = false;
                this.columnTicker.MaxLength = 12;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UI_GetNewsViewsByNewsIdRow NewUI_GetNewsViewsByNewsIdRow() {
                return ((UI_GetNewsViewsByNewsIdRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new UI_GetNewsViewsByNewsIdRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(UI_GetNewsViewsByNewsIdRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.UI_GetNewsViewsByNewsIdRowChanged != null)) {
                    this.UI_GetNewsViewsByNewsIdRowChanged(this, new UI_GetNewsViewsByNewsIdRowChangeEvent(((UI_GetNewsViewsByNewsIdRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.UI_GetNewsViewsByNewsIdRowChanging != null)) {
                    this.UI_GetNewsViewsByNewsIdRowChanging(this, new UI_GetNewsViewsByNewsIdRowChangeEvent(((UI_GetNewsViewsByNewsIdRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.UI_GetNewsViewsByNewsIdRowDeleted != null)) {
                    this.UI_GetNewsViewsByNewsIdRowDeleted(this, new UI_GetNewsViewsByNewsIdRowChangeEvent(((UI_GetNewsViewsByNewsIdRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.UI_GetNewsViewsByNewsIdRowDeleting != null)) {
                    this.UI_GetNewsViewsByNewsIdRowDeleting(this, new UI_GetNewsViewsByNewsIdRowChangeEvent(((UI_GetNewsViewsByNewsIdRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveUI_GetNewsViewsByNewsIdRow(UI_GetNewsViewsByNewsIdRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                USAdvisoryDataSet ds = new USAdvisoryDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "UI_GetNewsViewsByNewsIdDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class UI_GetPremiumServicesDataTable : global::System.Data.TypedTableBase<UI_GetPremiumServicesRow> {
            
            private global::System.Data.DataColumn columnPremiumServiceId;
            
            private global::System.Data.DataColumn columnTicker;
            
            private global::System.Data.DataColumn columnPremiumServiceTitle;
            
            private global::System.Data.DataColumn columnPremiumServiceDescription;
            
            private global::System.Data.DataColumn columnIsActive;
            
            private global::System.Data.DataColumn columnIsPaid;
            
            private global::System.Data.DataColumn columnTypeOfTradeId;
            
            private global::System.Data.DataColumn columnPremiumServiceDate;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UI_GetPremiumServicesDataTable() {
                this.TableName = "UI_GetPremiumServices";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal UI_GetPremiumServicesDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected UI_GetPremiumServicesDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PremiumServiceIdColumn {
                get {
                    return this.columnPremiumServiceId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TickerColumn {
                get {
                    return this.columnTicker;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PremiumServiceTitleColumn {
                get {
                    return this.columnPremiumServiceTitle;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PremiumServiceDescriptionColumn {
                get {
                    return this.columnPremiumServiceDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsActiveColumn {
                get {
                    return this.columnIsActive;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsPaidColumn {
                get {
                    return this.columnIsPaid;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TypeOfTradeIdColumn {
                get {
                    return this.columnTypeOfTradeId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PremiumServiceDateColumn {
                get {
                    return this.columnPremiumServiceDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UI_GetPremiumServicesRow this[int index] {
                get {
                    return ((UI_GetPremiumServicesRow)(this.Rows[index]));
                }
            }
            
            public event UI_GetPremiumServicesRowChangeEventHandler UI_GetPremiumServicesRowChanging;
            
            public event UI_GetPremiumServicesRowChangeEventHandler UI_GetPremiumServicesRowChanged;
            
            public event UI_GetPremiumServicesRowChangeEventHandler UI_GetPremiumServicesRowDeleting;
            
            public event UI_GetPremiumServicesRowChangeEventHandler UI_GetPremiumServicesRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddUI_GetPremiumServicesRow(UI_GetPremiumServicesRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UI_GetPremiumServicesRow AddUI_GetPremiumServicesRow(string Ticker, string PremiumServiceTitle, string PremiumServiceDescription, bool IsActive, bool IsPaid, int TypeOfTradeId, System.DateTime PremiumServiceDate) {
                UI_GetPremiumServicesRow rowUI_GetPremiumServicesRow = ((UI_GetPremiumServicesRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        Ticker,
                        PremiumServiceTitle,
                        PremiumServiceDescription,
                        IsActive,
                        IsPaid,
                        TypeOfTradeId,
                        PremiumServiceDate};
                rowUI_GetPremiumServicesRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowUI_GetPremiumServicesRow);
                return rowUI_GetPremiumServicesRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UI_GetPremiumServicesRow FindByPremiumServiceId(int PremiumServiceId) {
                return ((UI_GetPremiumServicesRow)(this.Rows.Find(new object[] {
                            PremiumServiceId})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                UI_GetPremiumServicesDataTable cln = ((UI_GetPremiumServicesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new UI_GetPremiumServicesDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnPremiumServiceId = base.Columns["PremiumServiceId"];
                this.columnTicker = base.Columns["Ticker"];
                this.columnPremiumServiceTitle = base.Columns["PremiumServiceTitle"];
                this.columnPremiumServiceDescription = base.Columns["PremiumServiceDescription"];
                this.columnIsActive = base.Columns["IsActive"];
                this.columnIsPaid = base.Columns["IsPaid"];
                this.columnTypeOfTradeId = base.Columns["TypeOfTradeId"];
                this.columnPremiumServiceDate = base.Columns["PremiumServiceDate"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnPremiumServiceId = new global::System.Data.DataColumn("PremiumServiceId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPremiumServiceId);
                this.columnTicker = new global::System.Data.DataColumn("Ticker", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTicker);
                this.columnPremiumServiceTitle = new global::System.Data.DataColumn("PremiumServiceTitle", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPremiumServiceTitle);
                this.columnPremiumServiceDescription = new global::System.Data.DataColumn("PremiumServiceDescription", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPremiumServiceDescription);
                this.columnIsActive = new global::System.Data.DataColumn("IsActive", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsActive);
                this.columnIsPaid = new global::System.Data.DataColumn("IsPaid", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsPaid);
                this.columnTypeOfTradeId = new global::System.Data.DataColumn("TypeOfTradeId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTypeOfTradeId);
                this.columnPremiumServiceDate = new global::System.Data.DataColumn("PremiumServiceDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPremiumServiceDate);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnPremiumServiceId}, true));
                this.columnPremiumServiceId.AutoIncrement = true;
                this.columnPremiumServiceId.AllowDBNull = false;
                this.columnPremiumServiceId.ReadOnly = true;
                this.columnPremiumServiceId.Unique = true;
                this.columnTicker.AllowDBNull = false;
                this.columnTicker.MaxLength = 12;
                this.columnPremiumServiceTitle.AllowDBNull = false;
                this.columnPremiumServiceTitle.MaxLength = 500;
                this.columnPremiumServiceDescription.AllowDBNull = false;
                this.columnPremiumServiceDescription.MaxLength = 1073741823;
                this.columnIsActive.AllowDBNull = false;
                this.columnIsPaid.AllowDBNull = false;
                this.columnTypeOfTradeId.AllowDBNull = false;
                this.columnPremiumServiceDate.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UI_GetPremiumServicesRow NewUI_GetPremiumServicesRow() {
                return ((UI_GetPremiumServicesRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new UI_GetPremiumServicesRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(UI_GetPremiumServicesRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.UI_GetPremiumServicesRowChanged != null)) {
                    this.UI_GetPremiumServicesRowChanged(this, new UI_GetPremiumServicesRowChangeEvent(((UI_GetPremiumServicesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.UI_GetPremiumServicesRowChanging != null)) {
                    this.UI_GetPremiumServicesRowChanging(this, new UI_GetPremiumServicesRowChangeEvent(((UI_GetPremiumServicesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.UI_GetPremiumServicesRowDeleted != null)) {
                    this.UI_GetPremiumServicesRowDeleted(this, new UI_GetPremiumServicesRowChangeEvent(((UI_GetPremiumServicesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.UI_GetPremiumServicesRowDeleting != null)) {
                    this.UI_GetPremiumServicesRowDeleting(this, new UI_GetPremiumServicesRowChangeEvent(((UI_GetPremiumServicesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveUI_GetPremiumServicesRow(UI_GetPremiumServicesRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                USAdvisoryDataSet ds = new USAdvisoryDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "UI_GetPremiumServicesDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class UI_GetPremiumServicesByPremiumServiceIdDataTable : global::System.Data.TypedTableBase<UI_GetPremiumServicesByPremiumServiceIdRow> {
            
            private global::System.Data.DataColumn columnPremiumServiceId;
            
            private global::System.Data.DataColumn columnTicker;
            
            private global::System.Data.DataColumn columnPremiumServiceTitle;
            
            private global::System.Data.DataColumn columnPremiumServiceDescription;
            
            private global::System.Data.DataColumn columnIsActive;
            
            private global::System.Data.DataColumn columnIsPaid;
            
            private global::System.Data.DataColumn columnTypeOfTradeId;
            
            private global::System.Data.DataColumn columnPremiumServiceDate;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UI_GetPremiumServicesByPremiumServiceIdDataTable() {
                this.TableName = "UI_GetPremiumServicesByPremiumServiceId";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal UI_GetPremiumServicesByPremiumServiceIdDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected UI_GetPremiumServicesByPremiumServiceIdDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PremiumServiceIdColumn {
                get {
                    return this.columnPremiumServiceId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TickerColumn {
                get {
                    return this.columnTicker;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PremiumServiceTitleColumn {
                get {
                    return this.columnPremiumServiceTitle;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PremiumServiceDescriptionColumn {
                get {
                    return this.columnPremiumServiceDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsActiveColumn {
                get {
                    return this.columnIsActive;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsPaidColumn {
                get {
                    return this.columnIsPaid;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TypeOfTradeIdColumn {
                get {
                    return this.columnTypeOfTradeId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PremiumServiceDateColumn {
                get {
                    return this.columnPremiumServiceDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UI_GetPremiumServicesByPremiumServiceIdRow this[int index] {
                get {
                    return ((UI_GetPremiumServicesByPremiumServiceIdRow)(this.Rows[index]));
                }
            }
            
            public event UI_GetPremiumServicesByPremiumServiceIdRowChangeEventHandler UI_GetPremiumServicesByPremiumServiceIdRowChanging;
            
            public event UI_GetPremiumServicesByPremiumServiceIdRowChangeEventHandler UI_GetPremiumServicesByPremiumServiceIdRowChanged;
            
            public event UI_GetPremiumServicesByPremiumServiceIdRowChangeEventHandler UI_GetPremiumServicesByPremiumServiceIdRowDeleting;
            
            public event UI_GetPremiumServicesByPremiumServiceIdRowChangeEventHandler UI_GetPremiumServicesByPremiumServiceIdRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddUI_GetPremiumServicesByPremiumServiceIdRow(UI_GetPremiumServicesByPremiumServiceIdRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UI_GetPremiumServicesByPremiumServiceIdRow AddUI_GetPremiumServicesByPremiumServiceIdRow(string Ticker, string PremiumServiceTitle, string PremiumServiceDescription, bool IsActive, bool IsPaid, int TypeOfTradeId, System.DateTime PremiumServiceDate) {
                UI_GetPremiumServicesByPremiumServiceIdRow rowUI_GetPremiumServicesByPremiumServiceIdRow = ((UI_GetPremiumServicesByPremiumServiceIdRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        Ticker,
                        PremiumServiceTitle,
                        PremiumServiceDescription,
                        IsActive,
                        IsPaid,
                        TypeOfTradeId,
                        PremiumServiceDate};
                rowUI_GetPremiumServicesByPremiumServiceIdRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowUI_GetPremiumServicesByPremiumServiceIdRow);
                return rowUI_GetPremiumServicesByPremiumServiceIdRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UI_GetPremiumServicesByPremiumServiceIdRow FindByPremiumServiceId(int PremiumServiceId) {
                return ((UI_GetPremiumServicesByPremiumServiceIdRow)(this.Rows.Find(new object[] {
                            PremiumServiceId})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                UI_GetPremiumServicesByPremiumServiceIdDataTable cln = ((UI_GetPremiumServicesByPremiumServiceIdDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new UI_GetPremiumServicesByPremiumServiceIdDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnPremiumServiceId = base.Columns["PremiumServiceId"];
                this.columnTicker = base.Columns["Ticker"];
                this.columnPremiumServiceTitle = base.Columns["PremiumServiceTitle"];
                this.columnPremiumServiceDescription = base.Columns["PremiumServiceDescription"];
                this.columnIsActive = base.Columns["IsActive"];
                this.columnIsPaid = base.Columns["IsPaid"];
                this.columnTypeOfTradeId = base.Columns["TypeOfTradeId"];
                this.columnPremiumServiceDate = base.Columns["PremiumServiceDate"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnPremiumServiceId = new global::System.Data.DataColumn("PremiumServiceId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPremiumServiceId);
                this.columnTicker = new global::System.Data.DataColumn("Ticker", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTicker);
                this.columnPremiumServiceTitle = new global::System.Data.DataColumn("PremiumServiceTitle", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPremiumServiceTitle);
                this.columnPremiumServiceDescription = new global::System.Data.DataColumn("PremiumServiceDescription", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPremiumServiceDescription);
                this.columnIsActive = new global::System.Data.DataColumn("IsActive", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsActive);
                this.columnIsPaid = new global::System.Data.DataColumn("IsPaid", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsPaid);
                this.columnTypeOfTradeId = new global::System.Data.DataColumn("TypeOfTradeId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTypeOfTradeId);
                this.columnPremiumServiceDate = new global::System.Data.DataColumn("PremiumServiceDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPremiumServiceDate);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnPremiumServiceId}, true));
                this.columnPremiumServiceId.AutoIncrement = true;
                this.columnPremiumServiceId.AllowDBNull = false;
                this.columnPremiumServiceId.ReadOnly = true;
                this.columnPremiumServiceId.Unique = true;
                this.columnTicker.AllowDBNull = false;
                this.columnTicker.MaxLength = 12;
                this.columnPremiumServiceTitle.AllowDBNull = false;
                this.columnPremiumServiceTitle.MaxLength = 500;
                this.columnPremiumServiceDescription.AllowDBNull = false;
                this.columnPremiumServiceDescription.MaxLength = 1073741823;
                this.columnIsActive.AllowDBNull = false;
                this.columnIsPaid.AllowDBNull = false;
                this.columnTypeOfTradeId.AllowDBNull = false;
                this.columnPremiumServiceDate.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UI_GetPremiumServicesByPremiumServiceIdRow NewUI_GetPremiumServicesByPremiumServiceIdRow() {
                return ((UI_GetPremiumServicesByPremiumServiceIdRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new UI_GetPremiumServicesByPremiumServiceIdRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(UI_GetPremiumServicesByPremiumServiceIdRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.UI_GetPremiumServicesByPremiumServiceIdRowChanged != null)) {
                    this.UI_GetPremiumServicesByPremiumServiceIdRowChanged(this, new UI_GetPremiumServicesByPremiumServiceIdRowChangeEvent(((UI_GetPremiumServicesByPremiumServiceIdRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.UI_GetPremiumServicesByPremiumServiceIdRowChanging != null)) {
                    this.UI_GetPremiumServicesByPremiumServiceIdRowChanging(this, new UI_GetPremiumServicesByPremiumServiceIdRowChangeEvent(((UI_GetPremiumServicesByPremiumServiceIdRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.UI_GetPremiumServicesByPremiumServiceIdRowDeleted != null)) {
                    this.UI_GetPremiumServicesByPremiumServiceIdRowDeleted(this, new UI_GetPremiumServicesByPremiumServiceIdRowChangeEvent(((UI_GetPremiumServicesByPremiumServiceIdRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.UI_GetPremiumServicesByPremiumServiceIdRowDeleting != null)) {
                    this.UI_GetPremiumServicesByPremiumServiceIdRowDeleting(this, new UI_GetPremiumServicesByPremiumServiceIdRowChangeEvent(((UI_GetPremiumServicesByPremiumServiceIdRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveUI_GetPremiumServicesByPremiumServiceIdRow(UI_GetPremiumServicesByPremiumServiceIdRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                USAdvisoryDataSet ds = new USAdvisoryDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "UI_GetPremiumServicesByPremiumServiceIdDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class UI_GetUserCredentialsDataTable : global::System.Data.TypedTableBase<UI_GetUserCredentialsRow> {
            
            private global::System.Data.DataColumn columnUserId;
            
            private global::System.Data.DataColumn columnPassword;
            
            private global::System.Data.DataColumn columnFirstName;
            
            private global::System.Data.DataColumn columnLastName;
            
            private global::System.Data.DataColumn columnPhoneNumber;
            
            private global::System.Data.DataColumn columnIsPaidSubscriber;
            
            private global::System.Data.DataColumn columnSubscriptionStartDate;
            
            private global::System.Data.DataColumn columnSubscriptionEndDate;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UI_GetUserCredentialsDataTable() {
                this.TableName = "UI_GetUserCredentials";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal UI_GetUserCredentialsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected UI_GetUserCredentialsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UserIdColumn {
                get {
                    return this.columnUserId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PasswordColumn {
                get {
                    return this.columnPassword;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FirstNameColumn {
                get {
                    return this.columnFirstName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LastNameColumn {
                get {
                    return this.columnLastName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PhoneNumberColumn {
                get {
                    return this.columnPhoneNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsPaidSubscriberColumn {
                get {
                    return this.columnIsPaidSubscriber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SubscriptionStartDateColumn {
                get {
                    return this.columnSubscriptionStartDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SubscriptionEndDateColumn {
                get {
                    return this.columnSubscriptionEndDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UI_GetUserCredentialsRow this[int index] {
                get {
                    return ((UI_GetUserCredentialsRow)(this.Rows[index]));
                }
            }
            
            public event UI_GetUserCredentialsRowChangeEventHandler UI_GetUserCredentialsRowChanging;
            
            public event UI_GetUserCredentialsRowChangeEventHandler UI_GetUserCredentialsRowChanged;
            
            public event UI_GetUserCredentialsRowChangeEventHandler UI_GetUserCredentialsRowDeleting;
            
            public event UI_GetUserCredentialsRowChangeEventHandler UI_GetUserCredentialsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddUI_GetUserCredentialsRow(UI_GetUserCredentialsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UI_GetUserCredentialsRow AddUI_GetUserCredentialsRow(string UserId, string Password, string FirstName, string LastName, string PhoneNumber, bool IsPaidSubscriber, System.DateTime SubscriptionStartDate, System.DateTime SubscriptionEndDate) {
                UI_GetUserCredentialsRow rowUI_GetUserCredentialsRow = ((UI_GetUserCredentialsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        UserId,
                        Password,
                        FirstName,
                        LastName,
                        PhoneNumber,
                        IsPaidSubscriber,
                        SubscriptionStartDate,
                        SubscriptionEndDate};
                rowUI_GetUserCredentialsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowUI_GetUserCredentialsRow);
                return rowUI_GetUserCredentialsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UI_GetUserCredentialsRow FindByUserId(string UserId) {
                return ((UI_GetUserCredentialsRow)(this.Rows.Find(new object[] {
                            UserId})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                UI_GetUserCredentialsDataTable cln = ((UI_GetUserCredentialsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new UI_GetUserCredentialsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnUserId = base.Columns["UserId"];
                this.columnPassword = base.Columns["Password"];
                this.columnFirstName = base.Columns["FirstName"];
                this.columnLastName = base.Columns["LastName"];
                this.columnPhoneNumber = base.Columns["PhoneNumber"];
                this.columnIsPaidSubscriber = base.Columns["IsPaidSubscriber"];
                this.columnSubscriptionStartDate = base.Columns["SubscriptionStartDate"];
                this.columnSubscriptionEndDate = base.Columns["SubscriptionEndDate"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnUserId = new global::System.Data.DataColumn("UserId", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUserId);
                this.columnPassword = new global::System.Data.DataColumn("Password", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPassword);
                this.columnFirstName = new global::System.Data.DataColumn("FirstName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFirstName);
                this.columnLastName = new global::System.Data.DataColumn("LastName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLastName);
                this.columnPhoneNumber = new global::System.Data.DataColumn("PhoneNumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPhoneNumber);
                this.columnIsPaidSubscriber = new global::System.Data.DataColumn("IsPaidSubscriber", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsPaidSubscriber);
                this.columnSubscriptionStartDate = new global::System.Data.DataColumn("SubscriptionStartDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSubscriptionStartDate);
                this.columnSubscriptionEndDate = new global::System.Data.DataColumn("SubscriptionEndDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSubscriptionEndDate);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnUserId}, true));
                this.columnUserId.AllowDBNull = false;
                this.columnUserId.Unique = true;
                this.columnUserId.MaxLength = 500;
                this.columnPassword.AllowDBNull = false;
                this.columnPassword.MaxLength = 50;
                this.columnFirstName.AllowDBNull = false;
                this.columnFirstName.MaxLength = 500;
                this.columnLastName.AllowDBNull = false;
                this.columnLastName.MaxLength = 500;
                this.columnPhoneNumber.AllowDBNull = false;
                this.columnPhoneNumber.MaxLength = 50;
                this.columnIsPaidSubscriber.AllowDBNull = false;
                this.columnSubscriptionStartDate.AllowDBNull = false;
                this.columnSubscriptionEndDate.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UI_GetUserCredentialsRow NewUI_GetUserCredentialsRow() {
                return ((UI_GetUserCredentialsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new UI_GetUserCredentialsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(UI_GetUserCredentialsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.UI_GetUserCredentialsRowChanged != null)) {
                    this.UI_GetUserCredentialsRowChanged(this, new UI_GetUserCredentialsRowChangeEvent(((UI_GetUserCredentialsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.UI_GetUserCredentialsRowChanging != null)) {
                    this.UI_GetUserCredentialsRowChanging(this, new UI_GetUserCredentialsRowChangeEvent(((UI_GetUserCredentialsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.UI_GetUserCredentialsRowDeleted != null)) {
                    this.UI_GetUserCredentialsRowDeleted(this, new UI_GetUserCredentialsRowChangeEvent(((UI_GetUserCredentialsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.UI_GetUserCredentialsRowDeleting != null)) {
                    this.UI_GetUserCredentialsRowDeleting(this, new UI_GetUserCredentialsRowChangeEvent(((UI_GetUserCredentialsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveUI_GetUserCredentialsRow(UI_GetUserCredentialsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                USAdvisoryDataSet ds = new USAdvisoryDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "UI_GetUserCredentialsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class AdminCredentialsRow : global::System.Data.DataRow {
            
            private AdminCredentialsDataTable tableAdminCredentials;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal AdminCredentialsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableAdminCredentials = ((AdminCredentialsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UserName {
                get {
                    return ((string)(this[this.tableAdminCredentials.UserNameColumn]));
                }
                set {
                    this[this.tableAdminCredentials.UserNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Password {
                get {
                    return ((string)(this[this.tableAdminCredentials.PasswordColumn]));
                }
                set {
                    this[this.tableAdminCredentials.PasswordColumn] = value;
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class BuyOrSellLookUpRow : global::System.Data.DataRow {
            
            private BuyOrSellLookUpDataTable tableBuyOrSellLookUp;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal BuyOrSellLookUpRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableBuyOrSellLookUp = ((BuyOrSellLookUpDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int BuyOrSellId {
                get {
                    return ((int)(this[this.tableBuyOrSellLookUp.BuyOrSellIdColumn]));
                }
                set {
                    this[this.tableBuyOrSellLookUp.BuyOrSellIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BuyOrSellDescription {
                get {
                    return ((string)(this[this.tableBuyOrSellLookUp.BuyOrSellDescriptionColumn]));
                }
                set {
                    this[this.tableBuyOrSellLookUp.BuyOrSellDescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RecommendationsRow[] GetRecommendationsRows() {
                if ((this.Table.ChildRelations["FK_Recommendations_BuyOrSellLookUp"] == null)) {
                    return new RecommendationsRow[0];
                }
                else {
                    return ((RecommendationsRow[])(base.GetChildRows(this.Table.ChildRelations["FK_Recommendations_BuyOrSellLookUp"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class EmailNewsletterRow : global::System.Data.DataRow {
            
            private EmailNewsletterDataTable tableEmailNewsletter;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal EmailNewsletterRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableEmailNewsletter = ((EmailNewsletterDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int EmailNewsLetterId {
                get {
                    return ((int)(this[this.tableEmailNewsletter.EmailNewsLetterIdColumn]));
                }
                set {
                    this[this.tableEmailNewsletter.EmailNewsLetterIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EmailAddress {
                get {
                    return ((string)(this[this.tableEmailNewsletter.EmailAddressColumn]));
                }
                set {
                    this[this.tableEmailNewsletter.EmailAddressColumn] = value;
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class EmailSentRow : global::System.Data.DataRow {
            
            private EmailSentDataTable tableEmailSent;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal EmailSentRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableEmailSent = ((EmailSentDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SendEmailId {
                get {
                    return ((int)(this[this.tableEmailSent.SendEmailIdColumn]));
                }
                set {
                    this[this.tableEmailSent.SendEmailIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EmailDescription {
                get {
                    return ((string)(this[this.tableEmailSent.EmailDescriptionColumn]));
                }
                set {
                    this[this.tableEmailSent.EmailDescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSubscribers {
                get {
                    return ((bool)(this[this.tableEmailSent.IsSubscribersColumn]));
                }
                set {
                    this[this.tableEmailSent.IsSubscribersColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEmailSent {
                get {
                    return ((bool)(this[this.tableEmailSent.IsEmailSentColumn]));
                }
                set {
                    this[this.tableEmailSent.IsEmailSentColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime EmailDateTime {
                get {
                    return ((global::System.DateTime)(this[this.tableEmailSent.EmailDateTimeColumn]));
                }
                set {
                    this[this.tableEmailSent.EmailDateTimeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime EmailSentDateTime {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableEmailSent.EmailSentDateTimeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EmailSentDateTime\' in table \'EmailSent\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmailSent.EmailSentDateTimeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EmailSubject {
                get {
                    return ((string)(this[this.tableEmailSent.EmailSubjectColumn]));
                }
                set {
                    this[this.tableEmailSent.EmailSubjectColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEmailSentDateTimeNull() {
                return this.IsNull(this.tableEmailSent.EmailSentDateTimeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEmailSentDateTimeNull() {
                this[this.tableEmailSent.EmailSentDateTimeColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class MarketCommentaryRow : global::System.Data.DataRow {
            
            private MarketCommentaryDataTable tableMarketCommentary;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal MarketCommentaryRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableMarketCommentary = ((MarketCommentaryDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MarketCommentaryId {
                get {
                    return ((int)(this[this.tableMarketCommentary.MarketCommentaryIdColumn]));
                }
                set {
                    this[this.tableMarketCommentary.MarketCommentaryIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MarketCommentaryTitle {
                get {
                    return ((string)(this[this.tableMarketCommentary.MarketCommentaryTitleColumn]));
                }
                set {
                    this[this.tableMarketCommentary.MarketCommentaryTitleColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime MarketCommentaryDateTime {
                get {
                    return ((global::System.DateTime)(this[this.tableMarketCommentary.MarketCommentaryDateTimeColumn]));
                }
                set {
                    this[this.tableMarketCommentary.MarketCommentaryDateTimeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MarketCommentaryDesc {
                get {
                    return ((string)(this[this.tableMarketCommentary.MarketCommentaryDescColumn]));
                }
                set {
                    this[this.tableMarketCommentary.MarketCommentaryDescColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCommentaryActive {
                get {
                    try {
                        return ((bool)(this[this.tableMarketCommentary.IsCommentaryActiveColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsCommentaryActive\' in table \'MarketCommentary\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMarketCommentary.IsCommentaryActiveColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsCommentaryActiveNull() {
                return this.IsNull(this.tableMarketCommentary.IsCommentaryActiveColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsCommentaryActiveNull() {
                this[this.tableMarketCommentary.IsCommentaryActiveColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class NewsAndViewsRow : global::System.Data.DataRow {
            
            private NewsAndViewsDataTable tableNewsAndViews;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal NewsAndViewsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableNewsAndViews = ((NewsAndViewsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int NewsId {
                get {
                    return ((int)(this[this.tableNewsAndViews.NewsIdColumn]));
                }
                set {
                    this[this.tableNewsAndViews.NewsIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NewsTitle {
                get {
                    return ((string)(this[this.tableNewsAndViews.NewsTitleColumn]));
                }
                set {
                    this[this.tableNewsAndViews.NewsTitleColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime NewsDateTime {
                get {
                    return ((global::System.DateTime)(this[this.tableNewsAndViews.NewsDateTimeColumn]));
                }
                set {
                    this[this.tableNewsAndViews.NewsDateTimeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NewsDescription {
                get {
                    return ((string)(this[this.tableNewsAndViews.NewsDescriptionColumn]));
                }
                set {
                    this[this.tableNewsAndViews.NewsDescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsActive {
                get {
                    return ((bool)(this[this.tableNewsAndViews.IsActiveColumn]));
                }
                set {
                    this[this.tableNewsAndViews.IsActiveColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPaid {
                get {
                    return ((bool)(this[this.tableNewsAndViews.IsPaidColumn]));
                }
                set {
                    this[this.tableNewsAndViews.IsPaidColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Ticker {
                get {
                    return ((string)(this[this.tableNewsAndViews.TickerColumn]));
                }
                set {
                    this[this.tableNewsAndViews.TickerColumn] = value;
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class OrdersRow : global::System.Data.DataRow {
            
            private OrdersDataTable tableOrders;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal OrdersRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableOrders = ((OrdersDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int OrderId {
                get {
                    return ((int)(this[this.tableOrders.OrderIdColumn]));
                }
                set {
                    this[this.tableOrders.OrderIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UniqueOrderId {
                get {
                    return ((string)(this[this.tableOrders.UniqueOrderIdColumn]));
                }
                set {
                    this[this.tableOrders.UniqueOrderIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UserId {
                get {
                    return ((string)(this[this.tableOrders.UserIdColumn]));
                }
                set {
                    this[this.tableOrders.UserIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MonthsOfSubscriptionId {
                get {
                    return ((int)(this[this.tableOrders.MonthsOfSubscriptionIdColumn]));
                }
                set {
                    this[this.tableOrders.MonthsOfSubscriptionIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime PaymentDate {
                get {
                    return ((global::System.DateTime)(this[this.tableOrders.PaymentDateColumn]));
                }
                set {
                    this[this.tableOrders.PaymentDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string VendorReferenceId {
                get {
                    try {
                        return ((string)(this[this.tableOrders.VendorReferenceIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'VendorReferenceId\' in table \'Orders\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOrders.VendorReferenceIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SubscriptionLookUpRow SubscriptionLookUpRow {
                get {
                    return ((SubscriptionLookUpRow)(this.GetParentRow(this.Table.ParentRelations["FK_Orders_SubscriptionLookUp"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_Orders_SubscriptionLookUp"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UsersRow UsersRow {
                get {
                    return ((UsersRow)(this.GetParentRow(this.Table.ParentRelations["FK_Orders_Users"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_Orders_Users"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsVendorReferenceIdNull() {
                return this.IsNull(this.tableOrders.VendorReferenceIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetVendorReferenceIdNull() {
                this[this.tableOrders.VendorReferenceIdColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class PortfolioLookUpRow : global::System.Data.DataRow {
            
            private PortfolioLookUpDataTable tablePortfolioLookUp;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PortfolioLookUpRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablePortfolioLookUp = ((PortfolioLookUpDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int PortfolioId {
                get {
                    return ((int)(this[this.tablePortfolioLookUp.PortfolioIdColumn]));
                }
                set {
                    this[this.tablePortfolioLookUp.PortfolioIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PortfolioName {
                get {
                    return ((string)(this[this.tablePortfolioLookUp.PortfolioNameColumn]));
                }
                set {
                    this[this.tablePortfolioLookUp.PortfolioNameColumn] = value;
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class PortfolioTransactionsRow : global::System.Data.DataRow {
            
            private PortfolioTransactionsDataTable tablePortfolioTransactions;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PortfolioTransactionsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablePortfolioTransactions = ((PortfolioTransactionsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int StockTransactionId {
                get {
                    return ((int)(this[this.tablePortfolioTransactions.StockTransactionIdColumn]));
                }
                set {
                    this[this.tablePortfolioTransactions.StockTransactionIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int PortfolioId {
                get {
                    return ((int)(this[this.tablePortfolioTransactions.PortfolioIdColumn]));
                }
                set {
                    this[this.tablePortfolioTransactions.PortfolioIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CompanyName {
                get {
                    return ((string)(this[this.tablePortfolioTransactions.CompanyNameColumn]));
                }
                set {
                    this[this.tablePortfolioTransactions.CompanyNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string StockTicker {
                get {
                    return ((string)(this[this.tablePortfolioTransactions.StockTickerColumn]));
                }
                set {
                    this[this.tablePortfolioTransactions.StockTickerColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int BuyOrSellId {
                get {
                    return ((int)(this[this.tablePortfolioTransactions.BuyOrSellIdColumn]));
                }
                set {
                    this[this.tablePortfolioTransactions.BuyOrSellIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal EntryPrice {
                get {
                    return ((decimal)(this[this.tablePortfolioTransactions.EntryPriceColumn]));
                }
                set {
                    this[this.tablePortfolioTransactions.EntryPriceColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal ExitPrice {
                get {
                    return ((decimal)(this[this.tablePortfolioTransactions.ExitPriceColumn]));
                }
                set {
                    this[this.tablePortfolioTransactions.ExitPriceColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal StopLoss {
                get {
                    return ((decimal)(this[this.tablePortfolioTransactions.StopLossColumn]));
                }
                set {
                    this[this.tablePortfolioTransactions.StopLossColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Updates {
                get {
                    return ((string)(this[this.tablePortfolioTransactions.UpdatesColumn]));
                }
                set {
                    this[this.tablePortfolioTransactions.UpdatesColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime UpdateDateTime {
                get {
                    return ((global::System.DateTime)(this[this.tablePortfolioTransactions.UpdateDateTimeColumn]));
                }
                set {
                    this[this.tablePortfolioTransactions.UpdateDateTimeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime PortfolioEntryDate {
                get {
                    return ((global::System.DateTime)(this[this.tablePortfolioTransactions.PortfolioEntryDateColumn]));
                }
                set {
                    this[this.tablePortfolioTransactions.PortfolioEntryDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CallStatus {
                get {
                    return ((string)(this[this.tablePortfolioTransactions.CallStatusColumn]));
                }
                set {
                    this[this.tablePortfolioTransactions.CallStatusColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime PortfolioExitDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tablePortfolioTransactions.PortfolioExitDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PortfolioExitDate\' in table \'PortfolioTransactions\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tablePortfolioTransactions.PortfolioExitDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPartiallyExited {
                get {
                    return ((bool)(this[this.tablePortfolioTransactions.IsPartiallyExitedColumn]));
                }
                set {
                    this[this.tablePortfolioTransactions.IsPartiallyExitedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Qty {
                get {
                    return ((int)(this[this.tablePortfolioTransactions.QtyColumn]));
                }
                set {
                    this[this.tablePortfolioTransactions.QtyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPortfolioExitDateNull() {
                return this.IsNull(this.tablePortfolioTransactions.PortfolioExitDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPortfolioExitDateNull() {
                this[this.tablePortfolioTransactions.PortfolioExitDateColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class PremiumServicesRow : global::System.Data.DataRow {
            
            private PremiumServicesDataTable tablePremiumServices;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PremiumServicesRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablePremiumServices = ((PremiumServicesDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int PremiumServiceId {
                get {
                    return ((int)(this[this.tablePremiumServices.PremiumServiceIdColumn]));
                }
                set {
                    this[this.tablePremiumServices.PremiumServiceIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Ticker {
                get {
                    return ((string)(this[this.tablePremiumServices.TickerColumn]));
                }
                set {
                    this[this.tablePremiumServices.TickerColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PremiumServiceTitle {
                get {
                    return ((string)(this[this.tablePremiumServices.PremiumServiceTitleColumn]));
                }
                set {
                    this[this.tablePremiumServices.PremiumServiceTitleColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PremiumServiceDescription {
                get {
                    return ((string)(this[this.tablePremiumServices.PremiumServiceDescriptionColumn]));
                }
                set {
                    this[this.tablePremiumServices.PremiumServiceDescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsActive {
                get {
                    return ((bool)(this[this.tablePremiumServices.IsActiveColumn]));
                }
                set {
                    this[this.tablePremiumServices.IsActiveColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPaid {
                get {
                    return ((bool)(this[this.tablePremiumServices.IsPaidColumn]));
                }
                set {
                    this[this.tablePremiumServices.IsPaidColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int TypeOfTradeId {
                get {
                    return ((int)(this[this.tablePremiumServices.TypeOfTradeIdColumn]));
                }
                set {
                    this[this.tablePremiumServices.TypeOfTradeIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime PremiumServiceDate {
                get {
                    return ((global::System.DateTime)(this[this.tablePremiumServices.PremiumServiceDateColumn]));
                }
                set {
                    this[this.tablePremiumServices.PremiumServiceDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TradeTypesRow TradeTypesRow {
                get {
                    return ((TradeTypesRow)(this.GetParentRow(this.Table.ParentRelations["FK_PremiumServices_TradeTypes"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_PremiumServices_TradeTypes"]);
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class RecommendationsRow : global::System.Data.DataRow {
            
            private RecommendationsDataTable tableRecommendations;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal RecommendationsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableRecommendations = ((RecommendationsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RecommendationId {
                get {
                    return ((int)(this[this.tableRecommendations.RecommendationIdColumn]));
                }
                set {
                    this[this.tableRecommendations.RecommendationIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int TradeTypeId {
                get {
                    return ((int)(this[this.tableRecommendations.TradeTypeIdColumn]));
                }
                set {
                    this[this.tableRecommendations.TradeTypeIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CompanyName {
                get {
                    return ((string)(this[this.tableRecommendations.CompanyNameColumn]));
                }
                set {
                    this[this.tableRecommendations.CompanyNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string StockSymbol {
                get {
                    return ((string)(this[this.tableRecommendations.StockSymbolColumn]));
                }
                set {
                    this[this.tableRecommendations.StockSymbolColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int BuyOrSellId {
                get {
                    return ((int)(this[this.tableRecommendations.BuyOrSellIdColumn]));
                }
                set {
                    this[this.tableRecommendations.BuyOrSellIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal EntryPoint {
                get {
                    return ((decimal)(this[this.tableRecommendations.EntryPointColumn]));
                }
                set {
                    this[this.tableRecommendations.EntryPointColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal ExitPoint {
                get {
                    return ((decimal)(this[this.tableRecommendations.ExitPointColumn]));
                }
                set {
                    this[this.tableRecommendations.ExitPointColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal StopLoss {
                get {
                    try {
                        return ((decimal)(this[this.tableRecommendations.StopLossColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'StopLoss\' in table \'Recommendations\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRecommendations.StopLossColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Updates {
                get {
                    try {
                        return ((string)(this[this.tableRecommendations.UpdatesColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Updates\' in table \'Recommendations\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRecommendations.UpdatesColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime RecommendedDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableRecommendations.RecommendedDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RecommendedDate\' in table \'Recommendations\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRecommendations.RecommendedDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool RecommendationStatus {
                get {
                    return ((bool)(this[this.tableRecommendations.RecommendationStatusColumn]));
                }
                set {
                    this[this.tableRecommendations.RecommendationStatusColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool PerformanceEnable {
                get {
                    return ((bool)(this[this.tableRecommendations.PerformanceEnableColumn]));
                }
                set {
                    this[this.tableRecommendations.PerformanceEnableColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BuyOrSellLookUpRow BuyOrSellLookUpRow {
                get {
                    return ((BuyOrSellLookUpRow)(this.GetParentRow(this.Table.ParentRelations["FK_Recommendations_BuyOrSellLookUp"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_Recommendations_BuyOrSellLookUp"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TradeTypesRow TradeTypesRow {
                get {
                    return ((TradeTypesRow)(this.GetParentRow(this.Table.ParentRelations["FK_Recommendations_TradeTypes"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_Recommendations_TradeTypes"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStopLossNull() {
                return this.IsNull(this.tableRecommendations.StopLossColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStopLossNull() {
                this[this.tableRecommendations.StopLossColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUpdatesNull() {
                return this.IsNull(this.tableRecommendations.UpdatesColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUpdatesNull() {
                this[this.tableRecommendations.UpdatesColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRecommendedDateNull() {
                return this.IsNull(this.tableRecommendations.RecommendedDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRecommendedDateNull() {
                this[this.tableRecommendations.RecommendedDateColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class SubscriptionRow : global::System.Data.DataRow {
            
            private SubscriptionDataTable tableSubscription;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SubscriptionRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableSubscription = ((SubscriptionDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UserId {
                get {
                    return ((string)(this[this.tableSubscription.UserIdColumn]));
                }
                set {
                    this[this.tableSubscription.UserIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime SubscriptionStartDate {
                get {
                    return ((global::System.DateTime)(this[this.tableSubscription.SubscriptionStartDateColumn]));
                }
                set {
                    this[this.tableSubscription.SubscriptionStartDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime SubscriptionEndDate {
                get {
                    return ((global::System.DateTime)(this[this.tableSubscription.SubscriptionEndDateColumn]));
                }
                set {
                    this[this.tableSubscription.SubscriptionEndDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UsersRow UsersRow {
                get {
                    return ((UsersRow)(this.GetParentRow(this.Table.ParentRelations["FK_Subscription_Users"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_Subscription_Users"]);
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class SubscriptionLookUpRow : global::System.Data.DataRow {
            
            private SubscriptionLookUpDataTable tableSubscriptionLookUp;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SubscriptionLookUpRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableSubscriptionLookUp = ((SubscriptionLookUpDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int NoOfMonthsSubscriptionId {
                get {
                    return ((int)(this[this.tableSubscriptionLookUp.NoOfMonthsSubscriptionIdColumn]));
                }
                set {
                    this[this.tableSubscriptionLookUp.NoOfMonthsSubscriptionIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NoOfMonthsSubscriptionDesc {
                get {
                    return ((string)(this[this.tableSubscriptionLookUp.NoOfMonthsSubscriptionDescColumn]));
                }
                set {
                    this[this.tableSubscriptionLookUp.NoOfMonthsSubscriptionDescColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Amount {
                get {
                    return ((decimal)(this[this.tableSubscriptionLookUp.AmountColumn]));
                }
                set {
                    this[this.tableSubscriptionLookUp.AmountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OrdersRow[] GetOrdersRows() {
                if ((this.Table.ChildRelations["FK_Orders_SubscriptionLookUp"] == null)) {
                    return new OrdersRow[0];
                }
                else {
                    return ((OrdersRow[])(base.GetChildRows(this.Table.ChildRelations["FK_Orders_SubscriptionLookUp"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class TradeTypesRow : global::System.Data.DataRow {
            
            private TradeTypesDataTable tableTradeTypes;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TradeTypesRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableTradeTypes = ((TradeTypesDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int TypeOfTradeId {
                get {
                    return ((int)(this[this.tableTradeTypes.TypeOfTradeIdColumn]));
                }
                set {
                    this[this.tableTradeTypes.TypeOfTradeIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TradeType {
                get {
                    return ((string)(this[this.tableTradeTypes.TradeTypeColumn]));
                }
                set {
                    this[this.tableTradeTypes.TradeTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PremiumServicesRow[] GetPremiumServicesRows() {
                if ((this.Table.ChildRelations["FK_PremiumServices_TradeTypes"] == null)) {
                    return new PremiumServicesRow[0];
                }
                else {
                    return ((PremiumServicesRow[])(base.GetChildRows(this.Table.ChildRelations["FK_PremiumServices_TradeTypes"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RecommendationsRow[] GetRecommendationsRows() {
                if ((this.Table.ChildRelations["FK_Recommendations_TradeTypes"] == null)) {
                    return new RecommendationsRow[0];
                }
                else {
                    return ((RecommendationsRow[])(base.GetChildRows(this.Table.ChildRelations["FK_Recommendations_TradeTypes"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class UsersRow : global::System.Data.DataRow {
            
            private UsersDataTable tableUsers;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal UsersRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableUsers = ((UsersDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UserId {
                get {
                    return ((string)(this[this.tableUsers.UserIdColumn]));
                }
                set {
                    this[this.tableUsers.UserIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Password {
                get {
                    return ((string)(this[this.tableUsers.PasswordColumn]));
                }
                set {
                    this[this.tableUsers.PasswordColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FirstName {
                get {
                    return ((string)(this[this.tableUsers.FirstNameColumn]));
                }
                set {
                    this[this.tableUsers.FirstNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LastName {
                get {
                    return ((string)(this[this.tableUsers.LastNameColumn]));
                }
                set {
                    this[this.tableUsers.LastNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PhoneNumber {
                get {
                    return ((string)(this[this.tableUsers.PhoneNumberColumn]));
                }
                set {
                    this[this.tableUsers.PhoneNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Address {
                get {
                    return ((string)(this[this.tableUsers.AddressColumn]));
                }
                set {
                    this[this.tableUsers.AddressColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string State {
                get {
                    return ((string)(this[this.tableUsers.StateColumn]));
                }
                set {
                    this[this.tableUsers.StateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Country {
                get {
                    return ((string)(this[this.tableUsers.CountryColumn]));
                }
                set {
                    this[this.tableUsers.CountryColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ZipCode {
                get {
                    return ((int)(this[this.tableUsers.ZipCodeColumn]));
                }
                set {
                    this[this.tableUsers.ZipCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPaidSubscriber {
                get {
                    return ((bool)(this[this.tableUsers.IsPaidSubscriberColumn]));
                }
                set {
                    this[this.tableUsers.IsPaidSubscriberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAutoRenewal {
                get {
                    return ((bool)(this[this.tableUsers.IsAutoRenewalColumn]));
                }
                set {
                    this[this.tableUsers.IsAutoRenewalColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime RegistrationDate {
                get {
                    return ((global::System.DateTime)(this[this.tableUsers.RegistrationDateColumn]));
                }
                set {
                    this[this.tableUsers.RegistrationDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OrdersRow[] GetOrdersRows() {
                if ((this.Table.ChildRelations["FK_Orders_Users"] == null)) {
                    return new OrdersRow[0];
                }
                else {
                    return ((OrdersRow[])(base.GetChildRows(this.Table.ChildRelations["FK_Orders_Users"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SubscriptionRow[] GetSubscriptionRows() {
                if ((this.Table.ChildRelations["FK_Subscription_Users"] == null)) {
                    return new SubscriptionRow[0];
                }
                else {
                    return ((SubscriptionRow[])(base.GetChildRows(this.Table.ChildRelations["FK_Subscription_Users"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class WatchOutRow : global::System.Data.DataRow {
            
            private WatchOutDataTable tableWatchOut;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal WatchOutRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableWatchOut = ((WatchOutDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int WatchOutId {
                get {
                    return ((int)(this[this.tableWatchOut.WatchOutIdColumn]));
                }
                set {
                    this[this.tableWatchOut.WatchOutIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime WatchOutDateTime {
                get {
                    return ((global::System.DateTime)(this[this.tableWatchOut.WatchOutDateTimeColumn]));
                }
                set {
                    this[this.tableWatchOut.WatchOutDateTimeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string WatchOutText {
                get {
                    return ((string)(this[this.tableWatchOut.WatchOutTextColumn]));
                }
                set {
                    this[this.tableWatchOut.WatchOutTextColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string WatchOutTitle {
                get {
                    return ((string)(this[this.tableWatchOut.WatchOutTitleColumn]));
                }
                set {
                    this[this.tableWatchOut.WatchOutTitleColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPaid {
                get {
                    return ((bool)(this[this.tableWatchOut.IsPaidColumn]));
                }
                set {
                    this[this.tableWatchOut.IsPaidColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Ticker {
                get {
                    return ((string)(this[this.tableWatchOut.TickerColumn]));
                }
                set {
                    this[this.tableWatchOut.TickerColumn] = value;
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class GetAllClosedPortfolioRow : global::System.Data.DataRow {
            
            private GetAllClosedPortfolioDataTable tableGetAllClosedPortfolio;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GetAllClosedPortfolioRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableGetAllClosedPortfolio = ((GetAllClosedPortfolioDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int StockTransactionId {
                get {
                    return ((int)(this[this.tableGetAllClosedPortfolio.StockTransactionIdColumn]));
                }
                set {
                    this[this.tableGetAllClosedPortfolio.StockTransactionIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int PortfolioId {
                get {
                    return ((int)(this[this.tableGetAllClosedPortfolio.PortfolioIdColumn]));
                }
                set {
                    this[this.tableGetAllClosedPortfolio.PortfolioIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string StockTicker {
                get {
                    return ((string)(this[this.tableGetAllClosedPortfolio.StockTickerColumn]));
                }
                set {
                    this[this.tableGetAllClosedPortfolio.StockTickerColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CallStatus {
                get {
                    return ((string)(this[this.tableGetAllClosedPortfolio.CallStatusColumn]));
                }
                set {
                    this[this.tableGetAllClosedPortfolio.CallStatusColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime PortfolioEntryDate {
                get {
                    return ((global::System.DateTime)(this[this.tableGetAllClosedPortfolio.PortfolioEntryDateColumn]));
                }
                set {
                    this[this.tableGetAllClosedPortfolio.PortfolioEntryDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime PortfolioExitDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableGetAllClosedPortfolio.PortfolioExitDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PortfolioExitDate\' in table \'GetAllClosedPortfolio\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tableGetAllClosedPortfolio.PortfolioExitDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPartiallyExited {
                get {
                    return ((bool)(this[this.tableGetAllClosedPortfolio.IsPartiallyExitedColumn]));
                }
                set {
                    this[this.tableGetAllClosedPortfolio.IsPartiallyExitedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Qty {
                get {
                    return ((int)(this[this.tableGetAllClosedPortfolio.QtyColumn]));
                }
                set {
                    this[this.tableGetAllClosedPortfolio.QtyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPortfolioExitDateNull() {
                return this.IsNull(this.tableGetAllClosedPortfolio.PortfolioExitDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPortfolioExitDateNull() {
                this[this.tableGetAllClosedPortfolio.PortfolioExitDateColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class GetAllEmailAddressRow : global::System.Data.DataRow {
            
            private GetAllEmailAddressDataTable tableGetAllEmailAddress;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GetAllEmailAddressRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableGetAllEmailAddress = ((GetAllEmailAddressDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EmailAddress {
                get {
                    return ((string)(this[this.tableGetAllEmailAddress.EmailAddressColumn]));
                }
                set {
                    this[this.tableGetAllEmailAddress.EmailAddressColumn] = value;
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class GetAllEmailToSendRow : global::System.Data.DataRow {
            
            private GetAllEmailToSendDataTable tableGetAllEmailToSend;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GetAllEmailToSendRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableGetAllEmailToSend = ((GetAllEmailToSendDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SendEmailId {
                get {
                    return ((int)(this[this.tableGetAllEmailToSend.SendEmailIdColumn]));
                }
                set {
                    this[this.tableGetAllEmailToSend.SendEmailIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EmailSubject {
                get {
                    return ((string)(this[this.tableGetAllEmailToSend.EmailSubjectColumn]));
                }
                set {
                    this[this.tableGetAllEmailToSend.EmailSubjectColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime Emaildatetime {
                get {
                    return ((global::System.DateTime)(this[this.tableGetAllEmailToSend.EmaildatetimeColumn]));
                }
                set {
                    this[this.tableGetAllEmailToSend.EmaildatetimeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEmailSent {
                get {
                    return ((bool)(this[this.tableGetAllEmailToSend.IsEmailSentColumn]));
                }
                set {
                    this[this.tableGetAllEmailToSend.IsEmailSentColumn] = value;
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class GetAllMarketCommentariesRow : global::System.Data.DataRow {
            
            private GetAllMarketCommentariesDataTable tableGetAllMarketCommentaries;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GetAllMarketCommentariesRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableGetAllMarketCommentaries = ((GetAllMarketCommentariesDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MarketCommentaryId {
                get {
                    return ((int)(this[this.tableGetAllMarketCommentaries.MarketCommentaryIdColumn]));
                }
                set {
                    this[this.tableGetAllMarketCommentaries.MarketCommentaryIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MarketCommentaryTitle {
                get {
                    return ((string)(this[this.tableGetAllMarketCommentaries.MarketCommentaryTitleColumn]));
                }
                set {
                    this[this.tableGetAllMarketCommentaries.MarketCommentaryTitleColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MarketCommentaryDesc {
                get {
                    return ((string)(this[this.tableGetAllMarketCommentaries.MarketCommentaryDescColumn]));
                }
                set {
                    this[this.tableGetAllMarketCommentaries.MarketCommentaryDescColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime MarketCommentaryDateTime {
                get {
                    return ((global::System.DateTime)(this[this.tableGetAllMarketCommentaries.MarketCommentaryDateTimeColumn]));
                }
                set {
                    this[this.tableGetAllMarketCommentaries.MarketCommentaryDateTimeColumn] = value;
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class GetAllNewsAndViewsRow : global::System.Data.DataRow {
            
            private GetAllNewsAndViewsDataTable tableGetAllNewsAndViews;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GetAllNewsAndViewsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableGetAllNewsAndViews = ((GetAllNewsAndViewsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int NewsId {
                get {
                    return ((int)(this[this.tableGetAllNewsAndViews.NewsIdColumn]));
                }
                set {
                    this[this.tableGetAllNewsAndViews.NewsIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NewsTitle {
                get {
                    return ((string)(this[this.tableGetAllNewsAndViews.NewsTitleColumn]));
                }
                set {
                    this[this.tableGetAllNewsAndViews.NewsTitleColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NewsDescription {
                get {
                    return ((string)(this[this.tableGetAllNewsAndViews.NewsDescriptionColumn]));
                }
                set {
                    this[this.tableGetAllNewsAndViews.NewsDescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime Newsdatetime {
                get {
                    return ((global::System.DateTime)(this[this.tableGetAllNewsAndViews.NewsdatetimeColumn]));
                }
                set {
                    this[this.tableGetAllNewsAndViews.NewsdatetimeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsActive {
                get {
                    return ((bool)(this[this.tableGetAllNewsAndViews.IsActiveColumn]));
                }
                set {
                    this[this.tableGetAllNewsAndViews.IsActiveColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPaid {
                get {
                    return ((bool)(this[this.tableGetAllNewsAndViews.IsPaidColumn]));
                }
                set {
                    this[this.tableGetAllNewsAndViews.IsPaidColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Ticker {
                get {
                    return ((string)(this[this.tableGetAllNewsAndViews.TickerColumn]));
                }
                set {
                    this[this.tableGetAllNewsAndViews.TickerColumn] = value;
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class GetAllOpenPortfolioRow : global::System.Data.DataRow {
            
            private GetAllOpenPortfolioDataTable tableGetAllOpenPortfolio;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GetAllOpenPortfolioRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableGetAllOpenPortfolio = ((GetAllOpenPortfolioDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int StockTransactionId {
                get {
                    return ((int)(this[this.tableGetAllOpenPortfolio.StockTransactionIdColumn]));
                }
                set {
                    this[this.tableGetAllOpenPortfolio.StockTransactionIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int PortfolioId {
                get {
                    return ((int)(this[this.tableGetAllOpenPortfolio.PortfolioIdColumn]));
                }
                set {
                    this[this.tableGetAllOpenPortfolio.PortfolioIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string StockTicker {
                get {
                    return ((string)(this[this.tableGetAllOpenPortfolio.StockTickerColumn]));
                }
                set {
                    this[this.tableGetAllOpenPortfolio.StockTickerColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CallStatus {
                get {
                    return ((string)(this[this.tableGetAllOpenPortfolio.CallStatusColumn]));
                }
                set {
                    this[this.tableGetAllOpenPortfolio.CallStatusColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime PortfolioEntryDate {
                get {
                    return ((global::System.DateTime)(this[this.tableGetAllOpenPortfolio.PortfolioEntryDateColumn]));
                }
                set {
                    this[this.tableGetAllOpenPortfolio.PortfolioEntryDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime PortfolioExitDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableGetAllOpenPortfolio.PortfolioExitDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PortfolioExitDate\' in table \'GetAllOpenPortfolio\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableGetAllOpenPortfolio.PortfolioExitDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPartiallyExited {
                get {
                    return ((bool)(this[this.tableGetAllOpenPortfolio.IsPartiallyExitedColumn]));
                }
                set {
                    this[this.tableGetAllOpenPortfolio.IsPartiallyExitedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Qty {
                get {
                    return ((int)(this[this.tableGetAllOpenPortfolio.QtyColumn]));
                }
                set {
                    this[this.tableGetAllOpenPortfolio.QtyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPortfolioExitDateNull() {
                return this.IsNull(this.tableGetAllOpenPortfolio.PortfolioExitDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPortfolioExitDateNull() {
                this[this.tableGetAllOpenPortfolio.PortfolioExitDateColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class GetAllOrdersRow : global::System.Data.DataRow {
            
            private GetAllOrdersDataTable tableGetAllOrders;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GetAllOrdersRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableGetAllOrders = ((GetAllOrdersDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int OrderId {
                get {
                    return ((int)(this[this.tableGetAllOrders.OrderIdColumn]));
                }
                set {
                    this[this.tableGetAllOrders.OrderIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UserId {
                get {
                    return ((string)(this[this.tableGetAllOrders.UserIdColumn]));
                }
                set {
                    this[this.tableGetAllOrders.UserIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NoOfMonthsSubscriptionDesc {
                get {
                    return ((string)(this[this.tableGetAllOrders.NoOfMonthsSubscriptionDescColumn]));
                }
                set {
                    this[this.tableGetAllOrders.NoOfMonthsSubscriptionDescColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime SubscriptionStartDate {
                get {
                    return ((global::System.DateTime)(this[this.tableGetAllOrders.SubscriptionStartDateColumn]));
                }
                set {
                    this[this.tableGetAllOrders.SubscriptionStartDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime SubscriptionEndDate {
                get {
                    return ((global::System.DateTime)(this[this.tableGetAllOrders.SubscriptionEndDateColumn]));
                }
                set {
                    this[this.tableGetAllOrders.SubscriptionEndDateColumn] = value;
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class GetAllPortfolioRow : global::System.Data.DataRow {
            
            private GetAllPortfolioDataTable tableGetAllPortfolio;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GetAllPortfolioRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableGetAllPortfolio = ((GetAllPortfolioDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int StockTransactionId {
                get {
                    return ((int)(this[this.tableGetAllPortfolio.StockTransactionIdColumn]));
                }
                set {
                    this[this.tableGetAllPortfolio.StockTransactionIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int PortfolioId {
                get {
                    return ((int)(this[this.tableGetAllPortfolio.PortfolioIdColumn]));
                }
                set {
                    this[this.tableGetAllPortfolio.PortfolioIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string StockTicker {
                get {
                    return ((string)(this[this.tableGetAllPortfolio.StockTickerColumn]));
                }
                set {
                    this[this.tableGetAllPortfolio.StockTickerColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CallStatus {
                get {
                    return ((string)(this[this.tableGetAllPortfolio.CallStatusColumn]));
                }
                set {
                    this[this.tableGetAllPortfolio.CallStatusColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime PortfolioEntryDate {
                get {
                    return ((global::System.DateTime)(this[this.tableGetAllPortfolio.PortfolioEntryDateColumn]));
                }
                set {
                    this[this.tableGetAllPortfolio.PortfolioEntryDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime PortfolioExitDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableGetAllPortfolio.PortfolioExitDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PortfolioExitDate\' in table \'GetAllPortfolio\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetAllPortfolio.PortfolioExitDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPartiallyExited {
                get {
                    return ((bool)(this[this.tableGetAllPortfolio.IsPartiallyExitedColumn]));
                }
                set {
                    this[this.tableGetAllPortfolio.IsPartiallyExitedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Qty {
                get {
                    return ((int)(this[this.tableGetAllPortfolio.QtyColumn]));
                }
                set {
                    this[this.tableGetAllPortfolio.QtyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal EntryPrice {
                get {
                    return ((decimal)(this[this.tableGetAllPortfolio.EntryPriceColumn]));
                }
                set {
                    this[this.tableGetAllPortfolio.EntryPriceColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal ExitPrice {
                get {
                    return ((decimal)(this[this.tableGetAllPortfolio.ExitPriceColumn]));
                }
                set {
                    this[this.tableGetAllPortfolio.ExitPriceColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal StopLoss {
                get {
                    return ((decimal)(this[this.tableGetAllPortfolio.StopLossColumn]));
                }
                set {
                    this[this.tableGetAllPortfolio.StopLossColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Updates {
                get {
                    return ((string)(this[this.tableGetAllPortfolio.UpdatesColumn]));
                }
                set {
                    this[this.tableGetAllPortfolio.UpdatesColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime UpdateDateTime {
                get {
                    return ((global::System.DateTime)(this[this.tableGetAllPortfolio.UpdateDateTimeColumn]));
                }
                set {
                    this[this.tableGetAllPortfolio.UpdateDateTimeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int BuyOrSellId {
                get {
                    return ((int)(this[this.tableGetAllPortfolio.BuyOrSellIdColumn]));
                }
                set {
                    this[this.tableGetAllPortfolio.BuyOrSellIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CompanyName {
                get {
                    return ((string)(this[this.tableGetAllPortfolio.CompanyNameColumn]));
                }
                set {
                    this[this.tableGetAllPortfolio.CompanyNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPortfolioExitDateNull() {
                return this.IsNull(this.tableGetAllPortfolio.PortfolioExitDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPortfolioExitDateNull() {
                this[this.tableGetAllPortfolio.PortfolioExitDateColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class GetAllUsersRow : global::System.Data.DataRow {
            
            private GetAllUsersDataTable tableGetAllUsers;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GetAllUsersRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableGetAllUsers = ((GetAllUsersDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UserId {
                get {
                    return ((string)(this[this.tableGetAllUsers.UserIdColumn]));
                }
                set {
                    this[this.tableGetAllUsers.UserIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Password {
                get {
                    return ((string)(this[this.tableGetAllUsers.PasswordColumn]));
                }
                set {
                    this[this.tableGetAllUsers.PasswordColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FirstName {
                get {
                    return ((string)(this[this.tableGetAllUsers.FirstNameColumn]));
                }
                set {
                    this[this.tableGetAllUsers.FirstNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LastName {
                get {
                    return ((string)(this[this.tableGetAllUsers.LastNameColumn]));
                }
                set {
                    this[this.tableGetAllUsers.LastNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PhoneNumber {
                get {
                    return ((string)(this[this.tableGetAllUsers.PhoneNumberColumn]));
                }
                set {
                    this[this.tableGetAllUsers.PhoneNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Address {
                get {
                    return ((string)(this[this.tableGetAllUsers.AddressColumn]));
                }
                set {
                    this[this.tableGetAllUsers.AddressColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string State {
                get {
                    return ((string)(this[this.tableGetAllUsers.StateColumn]));
                }
                set {
                    this[this.tableGetAllUsers.StateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Country {
                get {
                    return ((string)(this[this.tableGetAllUsers.CountryColumn]));
                }
                set {
                    this[this.tableGetAllUsers.CountryColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ZipCode {
                get {
                    return ((int)(this[this.tableGetAllUsers.ZipCodeColumn]));
                }
                set {
                    this[this.tableGetAllUsers.ZipCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPaidSubscriber {
                get {
                    return ((bool)(this[this.tableGetAllUsers.IsPaidSubscriberColumn]));
                }
                set {
                    this[this.tableGetAllUsers.IsPaidSubscriberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAutoRenewal {
                get {
                    return ((bool)(this[this.tableGetAllUsers.IsAutoRenewalColumn]));
                }
                set {
                    this[this.tableGetAllUsers.IsAutoRenewalColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime RegistrationDate {
                get {
                    return ((global::System.DateTime)(this[this.tableGetAllUsers.RegistrationDateColumn]));
                }
                set {
                    this[this.tableGetAllUsers.RegistrationDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime SubscriptionStartDate {
                get {
                    return ((global::System.DateTime)(this[this.tableGetAllUsers.SubscriptionStartDateColumn]));
                }
                set {
                    this[this.tableGetAllUsers.SubscriptionStartDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime SubscriptionEndDate {
                get {
                    return ((global::System.DateTime)(this[this.tableGetAllUsers.SubscriptionEndDateColumn]));
                }
                set {
                    this[this.tableGetAllUsers.SubscriptionEndDateColumn] = value;
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class GetAllWatchOutNewsRow : global::System.Data.DataRow {
            
            private GetAllWatchOutNewsDataTable tableGetAllWatchOutNews;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GetAllWatchOutNewsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableGetAllWatchOutNews = ((GetAllWatchOutNewsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int WatchOutId {
                get {
                    return ((int)(this[this.tableGetAllWatchOutNews.WatchOutIdColumn]));
                }
                set {
                    this[this.tableGetAllWatchOutNews.WatchOutIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string WatchOuttitle {
                get {
                    return ((string)(this[this.tableGetAllWatchOutNews.WatchOuttitleColumn]));
                }
                set {
                    this[this.tableGetAllWatchOutNews.WatchOuttitleColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string WatchOutText {
                get {
                    return ((string)(this[this.tableGetAllWatchOutNews.WatchOutTextColumn]));
                }
                set {
                    this[this.tableGetAllWatchOutNews.WatchOutTextColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime WatchOutDateTime {
                get {
                    return ((global::System.DateTime)(this[this.tableGetAllWatchOutNews.WatchOutDateTimeColumn]));
                }
                set {
                    this[this.tableGetAllWatchOutNews.WatchOutDateTimeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Ticker {
                get {
                    return ((string)(this[this.tableGetAllWatchOutNews.TickerColumn]));
                }
                set {
                    this[this.tableGetAllWatchOutNews.TickerColumn] = value;
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class GetEmailBySendEmailIdRow : global::System.Data.DataRow {
            
            private GetEmailBySendEmailIdDataTable tableGetEmailBySendEmailId;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GetEmailBySendEmailIdRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableGetEmailBySendEmailId = ((GetEmailBySendEmailIdDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EmailDescription {
                get {
                    return ((string)(this[this.tableGetEmailBySendEmailId.EmailDescriptionColumn]));
                }
                set {
                    this[this.tableGetEmailBySendEmailId.EmailDescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EmailSubject {
                get {
                    return ((string)(this[this.tableGetEmailBySendEmailId.EmailSubjectColumn]));
                }
                set {
                    this[this.tableGetEmailBySendEmailId.EmailSubjectColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime Emaildatetime {
                get {
                    return ((global::System.DateTime)(this[this.tableGetEmailBySendEmailId.EmaildatetimeColumn]));
                }
                set {
                    this[this.tableGetEmailBySendEmailId.EmaildatetimeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEmailSent {
                get {
                    return ((bool)(this[this.tableGetEmailBySendEmailId.IsEmailSentColumn]));
                }
                set {
                    this[this.tableGetEmailBySendEmailId.IsEmailSentColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSubscribers {
                get {
                    return ((bool)(this[this.tableGetEmailBySendEmailId.IsSubscribersColumn]));
                }
                set {
                    this[this.tableGetEmailBySendEmailId.IsSubscribersColumn] = value;
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class GetMarketCommentaryByArticleRow : global::System.Data.DataRow {
            
            private GetMarketCommentaryByArticleDataTable tableGetMarketCommentaryByArticle;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GetMarketCommentaryByArticleRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableGetMarketCommentaryByArticle = ((GetMarketCommentaryByArticleDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MarketCommentaryTitle {
                get {
                    return ((string)(this[this.tableGetMarketCommentaryByArticle.MarketCommentaryTitleColumn]));
                }
                set {
                    this[this.tableGetMarketCommentaryByArticle.MarketCommentaryTitleColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MarketCommentaryDesc {
                get {
                    return ((string)(this[this.tableGetMarketCommentaryByArticle.MarketCommentaryDescColumn]));
                }
                set {
                    this[this.tableGetMarketCommentaryByArticle.MarketCommentaryDescColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCommentaryactive {
                get {
                    try {
                        return ((bool)(this[this.tableGetMarketCommentaryByArticle.IsCommentaryactiveColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsCommentaryactive\' in table \'GetMarketCommentaryByArticle\'" +
                                " is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetMarketCommentaryByArticle.IsCommentaryactiveColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsCommentaryactiveNull() {
                return this.IsNull(this.tableGetMarketCommentaryByArticle.IsCommentaryactiveColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsCommentaryactiveNull() {
                this[this.tableGetMarketCommentaryByArticle.IsCommentaryactiveColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class GetNewsAndViewsByArticleRow : global::System.Data.DataRow {
            
            private GetNewsAndViewsByArticleDataTable tableGetNewsAndViewsByArticle;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GetNewsAndViewsByArticleRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableGetNewsAndViewsByArticle = ((GetNewsAndViewsByArticleDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int NewsId {
                get {
                    return ((int)(this[this.tableGetNewsAndViewsByArticle.NewsIdColumn]));
                }
                set {
                    this[this.tableGetNewsAndViewsByArticle.NewsIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NewsTitle {
                get {
                    return ((string)(this[this.tableGetNewsAndViewsByArticle.NewsTitleColumn]));
                }
                set {
                    this[this.tableGetNewsAndViewsByArticle.NewsTitleColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NewsDescription {
                get {
                    return ((string)(this[this.tableGetNewsAndViewsByArticle.NewsDescriptionColumn]));
                }
                set {
                    this[this.tableGetNewsAndViewsByArticle.NewsDescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime NewsDateTime {
                get {
                    return ((global::System.DateTime)(this[this.tableGetNewsAndViewsByArticle.NewsDateTimeColumn]));
                }
                set {
                    this[this.tableGetNewsAndViewsByArticle.NewsDateTimeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsActive {
                get {
                    return ((bool)(this[this.tableGetNewsAndViewsByArticle.IsActiveColumn]));
                }
                set {
                    this[this.tableGetNewsAndViewsByArticle.IsActiveColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPaid {
                get {
                    return ((bool)(this[this.tableGetNewsAndViewsByArticle.IsPaidColumn]));
                }
                set {
                    this[this.tableGetNewsAndViewsByArticle.IsPaidColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Ticker {
                get {
                    return ((string)(this[this.tableGetNewsAndViewsByArticle.TickerColumn]));
                }
                set {
                    this[this.tableGetNewsAndViewsByArticle.TickerColumn] = value;
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class GetOrdesrByUserIdOrderIdRow : global::System.Data.DataRow {
            
            private GetOrdesrByUserIdOrderIdDataTable tableGetOrdesrByUserIdOrderId;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GetOrdesrByUserIdOrderIdRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableGetOrdesrByUserIdOrderId = ((GetOrdesrByUserIdOrderIdDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UserId {
                get {
                    return ((string)(this[this.tableGetOrdesrByUserIdOrderId.UserIdColumn]));
                }
                set {
                    this[this.tableGetOrdesrByUserIdOrderId.UserIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UniqueOrderId {
                get {
                    return ((string)(this[this.tableGetOrdesrByUserIdOrderId.UniqueOrderIdColumn]));
                }
                set {
                    this[this.tableGetOrdesrByUserIdOrderId.UniqueOrderIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NoOfMonthsSubscriptionDesc {
                get {
                    return ((string)(this[this.tableGetOrdesrByUserIdOrderId.NoOfMonthsSubscriptionDescColumn]));
                }
                set {
                    this[this.tableGetOrdesrByUserIdOrderId.NoOfMonthsSubscriptionDescColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime PaymentDate {
                get {
                    return ((global::System.DateTime)(this[this.tableGetOrdesrByUserIdOrderId.PaymentDateColumn]));
                }
                set {
                    this[this.tableGetOrdesrByUserIdOrderId.PaymentDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string VendorReferenceId {
                get {
                    try {
                        return ((string)(this[this.tableGetOrdesrByUserIdOrderId.VendorReferenceIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'VendorReferenceId\' in table \'GetOrdesrByUserIdOrderId\' is D" +
                                "BNull.", e);
                    }
                }
                set {
                    this[this.tableGetOrdesrByUserIdOrderId.VendorReferenceIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime SubscriptionStartDate {
                get {
                    return ((global::System.DateTime)(this[this.tableGetOrdesrByUserIdOrderId.SubscriptionStartDateColumn]));
                }
                set {
                    this[this.tableGetOrdesrByUserIdOrderId.SubscriptionStartDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime SubscriptionEndDate {
                get {
                    return ((global::System.DateTime)(this[this.tableGetOrdesrByUserIdOrderId.SubscriptionEndDateColumn]));
                }
                set {
                    this[this.tableGetOrdesrByUserIdOrderId.SubscriptionEndDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsVendorReferenceIdNull() {
                return this.IsNull(this.tableGetOrdesrByUserIdOrderId.VendorReferenceIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetVendorReferenceIdNull() {
                this[this.tableGetOrdesrByUserIdOrderId.VendorReferenceIdColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class GetPortfolioByTransactionIdRow : global::System.Data.DataRow {
            
            private GetPortfolioByTransactionIdDataTable tableGetPortfolioByTransactionId;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GetPortfolioByTransactionIdRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableGetPortfolioByTransactionId = ((GetPortfolioByTransactionIdDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int StockTransactionId {
                get {
                    return ((int)(this[this.tableGetPortfolioByTransactionId.StockTransactionIdColumn]));
                }
                set {
                    this[this.tableGetPortfolioByTransactionId.StockTransactionIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int PortfolioId {
                get {
                    return ((int)(this[this.tableGetPortfolioByTransactionId.PortfolioIdColumn]));
                }
                set {
                    this[this.tableGetPortfolioByTransactionId.PortfolioIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CompanyName {
                get {
                    return ((string)(this[this.tableGetPortfolioByTransactionId.CompanyNameColumn]));
                }
                set {
                    this[this.tableGetPortfolioByTransactionId.CompanyNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string StockTicker {
                get {
                    return ((string)(this[this.tableGetPortfolioByTransactionId.StockTickerColumn]));
                }
                set {
                    this[this.tableGetPortfolioByTransactionId.StockTickerColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int BuyOrSellId {
                get {
                    return ((int)(this[this.tableGetPortfolioByTransactionId.BuyOrSellIdColumn]));
                }
                set {
                    this[this.tableGetPortfolioByTransactionId.BuyOrSellIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal EntryPrice {
                get {
                    return ((decimal)(this[this.tableGetPortfolioByTransactionId.EntryPriceColumn]));
                }
                set {
                    this[this.tableGetPortfolioByTransactionId.EntryPriceColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal ExitPrice {
                get {
                    return ((decimal)(this[this.tableGetPortfolioByTransactionId.ExitPriceColumn]));
                }
                set {
                    this[this.tableGetPortfolioByTransactionId.ExitPriceColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal StopLoss {
                get {
                    return ((decimal)(this[this.tableGetPortfolioByTransactionId.StopLossColumn]));
                }
                set {
                    this[this.tableGetPortfolioByTransactionId.StopLossColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Updates {
                get {
                    return ((string)(this[this.tableGetPortfolioByTransactionId.UpdatesColumn]));
                }
                set {
                    this[this.tableGetPortfolioByTransactionId.UpdatesColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime UpdateDateTime {
                get {
                    return ((global::System.DateTime)(this[this.tableGetPortfolioByTransactionId.UpdateDateTimeColumn]));
                }
                set {
                    this[this.tableGetPortfolioByTransactionId.UpdateDateTimeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime PortfolioEntryDate {
                get {
                    return ((global::System.DateTime)(this[this.tableGetPortfolioByTransactionId.PortfolioEntryDateColumn]));
                }
                set {
                    this[this.tableGetPortfolioByTransactionId.PortfolioEntryDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CallStatus {
                get {
                    return ((string)(this[this.tableGetPortfolioByTransactionId.CallStatusColumn]));
                }
                set {
                    this[this.tableGetPortfolioByTransactionId.CallStatusColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime PortfolioExitDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableGetPortfolioByTransactionId.PortfolioExitDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PortfolioExitDate\' in table \'GetPortfolioByTransactionId\' i" +
                                "s DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetPortfolioByTransactionId.PortfolioExitDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPartiallyExited {
                get {
                    return ((bool)(this[this.tableGetPortfolioByTransactionId.IsPartiallyExitedColumn]));
                }
                set {
                    this[this.tableGetPortfolioByTransactionId.IsPartiallyExitedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Qty {
                get {
                    return ((int)(this[this.tableGetPortfolioByTransactionId.QtyColumn]));
                }
                set {
                    this[this.tableGetPortfolioByTransactionId.QtyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPortfolioExitDateNull() {
                return this.IsNull(this.tableGetPortfolioByTransactionId.PortfolioExitDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPortfolioExitDateNull() {
                this[this.tableGetPortfolioByTransactionId.PortfolioExitDateColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class GetPremiumServiceByArticleRow : global::System.Data.DataRow {
            
            private GetPremiumServiceByArticleDataTable tableGetPremiumServiceByArticle;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GetPremiumServiceByArticleRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableGetPremiumServiceByArticle = ((GetPremiumServiceByArticleDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PremiumServiceTitle {
                get {
                    return ((string)(this[this.tableGetPremiumServiceByArticle.PremiumServiceTitleColumn]));
                }
                set {
                    this[this.tableGetPremiumServiceByArticle.PremiumServiceTitleColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PremiumServiceDescription {
                get {
                    return ((string)(this[this.tableGetPremiumServiceByArticle.PremiumServiceDescriptionColumn]));
                }
                set {
                    this[this.tableGetPremiumServiceByArticle.PremiumServiceDescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime PremiumServiceDate {
                get {
                    return ((global::System.DateTime)(this[this.tableGetPremiumServiceByArticle.PremiumServiceDateColumn]));
                }
                set {
                    this[this.tableGetPremiumServiceByArticle.PremiumServiceDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsActive {
                get {
                    return ((bool)(this[this.tableGetPremiumServiceByArticle.IsActiveColumn]));
                }
                set {
                    this[this.tableGetPremiumServiceByArticle.IsActiveColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPaid {
                get {
                    return ((bool)(this[this.tableGetPremiumServiceByArticle.IsPaidColumn]));
                }
                set {
                    this[this.tableGetPremiumServiceByArticle.IsPaidColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Ticker {
                get {
                    return ((string)(this[this.tableGetPremiumServiceByArticle.TickerColumn]));
                }
                set {
                    this[this.tableGetPremiumServiceByArticle.TickerColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int TypeOfTradeId {
                get {
                    return ((int)(this[this.tableGetPremiumServiceByArticle.TypeOfTradeIdColumn]));
                }
                set {
                    this[this.tableGetPremiumServiceByArticle.TypeOfTradeIdColumn] = value;
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class GetPremiumServicesRow : global::System.Data.DataRow {
            
            private GetPremiumServicesDataTable tableGetPremiumServices;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GetPremiumServicesRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableGetPremiumServices = ((GetPremiumServicesDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int PremiumServiceId {
                get {
                    return ((int)(this[this.tableGetPremiumServices.PremiumServiceIdColumn]));
                }
                set {
                    this[this.tableGetPremiumServices.PremiumServiceIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PremiumServiceTitle {
                get {
                    return ((string)(this[this.tableGetPremiumServices.PremiumServiceTitleColumn]));
                }
                set {
                    this[this.tableGetPremiumServices.PremiumServiceTitleColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PremiumServiceDescription {
                get {
                    return ((string)(this[this.tableGetPremiumServices.PremiumServiceDescriptionColumn]));
                }
                set {
                    this[this.tableGetPremiumServices.PremiumServiceDescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime PremiumServicedate {
                get {
                    return ((global::System.DateTime)(this[this.tableGetPremiumServices.PremiumServicedateColumn]));
                }
                set {
                    this[this.tableGetPremiumServices.PremiumServicedateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsActive {
                get {
                    return ((bool)(this[this.tableGetPremiumServices.IsActiveColumn]));
                }
                set {
                    this[this.tableGetPremiumServices.IsActiveColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPaid {
                get {
                    return ((bool)(this[this.tableGetPremiumServices.IsPaidColumn]));
                }
                set {
                    this[this.tableGetPremiumServices.IsPaidColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Ticker {
                get {
                    return ((string)(this[this.tableGetPremiumServices.TickerColumn]));
                }
                set {
                    this[this.tableGetPremiumServices.TickerColumn] = value;
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class GetUserByUserIdRow : global::System.Data.DataRow {
            
            private GetUserByUserIdDataTable tableGetUserByUserId;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GetUserByUserIdRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableGetUserByUserId = ((GetUserByUserIdDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UserId {
                get {
                    return ((string)(this[this.tableGetUserByUserId.UserIdColumn]));
                }
                set {
                    this[this.tableGetUserByUserId.UserIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Password {
                get {
                    return ((string)(this[this.tableGetUserByUserId.PasswordColumn]));
                }
                set {
                    this[this.tableGetUserByUserId.PasswordColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FirstName {
                get {
                    return ((string)(this[this.tableGetUserByUserId.FirstNameColumn]));
                }
                set {
                    this[this.tableGetUserByUserId.FirstNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LastName {
                get {
                    return ((string)(this[this.tableGetUserByUserId.LastNameColumn]));
                }
                set {
                    this[this.tableGetUserByUserId.LastNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PhoneNumber {
                get {
                    return ((string)(this[this.tableGetUserByUserId.PhoneNumberColumn]));
                }
                set {
                    this[this.tableGetUserByUserId.PhoneNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Address {
                get {
                    return ((string)(this[this.tableGetUserByUserId.AddressColumn]));
                }
                set {
                    this[this.tableGetUserByUserId.AddressColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string State {
                get {
                    return ((string)(this[this.tableGetUserByUserId.StateColumn]));
                }
                set {
                    this[this.tableGetUserByUserId.StateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Country {
                get {
                    return ((string)(this[this.tableGetUserByUserId.CountryColumn]));
                }
                set {
                    this[this.tableGetUserByUserId.CountryColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ZipCode {
                get {
                    return ((int)(this[this.tableGetUserByUserId.ZipCodeColumn]));
                }
                set {
                    this[this.tableGetUserByUserId.ZipCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPaidSubscriber {
                get {
                    return ((bool)(this[this.tableGetUserByUserId.IsPaidSubscriberColumn]));
                }
                set {
                    this[this.tableGetUserByUserId.IsPaidSubscriberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAutoRenewal {
                get {
                    return ((bool)(this[this.tableGetUserByUserId.IsAutoRenewalColumn]));
                }
                set {
                    this[this.tableGetUserByUserId.IsAutoRenewalColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime RegistrationDate {
                get {
                    return ((global::System.DateTime)(this[this.tableGetUserByUserId.RegistrationDateColumn]));
                }
                set {
                    this[this.tableGetUserByUserId.RegistrationDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime SubscriptionStartDate {
                get {
                    return ((global::System.DateTime)(this[this.tableGetUserByUserId.SubscriptionStartDateColumn]));
                }
                set {
                    this[this.tableGetUserByUserId.SubscriptionStartDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime SubscriptionEndDate {
                get {
                    return ((global::System.DateTime)(this[this.tableGetUserByUserId.SubscriptionEndDateColumn]));
                }
                set {
                    this[this.tableGetUserByUserId.SubscriptionEndDateColumn] = value;
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class GetWatchOutNewsByArticleRow : global::System.Data.DataRow {
            
            private GetWatchOutNewsByArticleDataTable tableGetWatchOutNewsByArticle;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GetWatchOutNewsByArticleRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableGetWatchOutNewsByArticle = ((GetWatchOutNewsByArticleDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Watchouttitle {
                get {
                    return ((string)(this[this.tableGetWatchOutNewsByArticle.WatchouttitleColumn]));
                }
                set {
                    this[this.tableGetWatchOutNewsByArticle.WatchouttitleColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string WatchOutText {
                get {
                    return ((string)(this[this.tableGetWatchOutNewsByArticle.WatchOutTextColumn]));
                }
                set {
                    this[this.tableGetWatchOutNewsByArticle.WatchOutTextColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPaid {
                get {
                    return ((bool)(this[this.tableGetWatchOutNewsByArticle.IsPaidColumn]));
                }
                set {
                    this[this.tableGetWatchOutNewsByArticle.IsPaidColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Ticker {
                get {
                    return ((string)(this[this.tableGetWatchOutNewsByArticle.TickerColumn]));
                }
                set {
                    this[this.tableGetWatchOutNewsByArticle.TickerColumn] = value;
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class UI_GetAllMarketCommentaryForTodayRow : global::System.Data.DataRow {
            
            private UI_GetAllMarketCommentaryForTodayDataTable tableUI_GetAllMarketCommentaryForToday;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal UI_GetAllMarketCommentaryForTodayRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableUI_GetAllMarketCommentaryForToday = ((UI_GetAllMarketCommentaryForTodayDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MarketCommentaryId {
                get {
                    return ((int)(this[this.tableUI_GetAllMarketCommentaryForToday.MarketCommentaryIdColumn]));
                }
                set {
                    this[this.tableUI_GetAllMarketCommentaryForToday.MarketCommentaryIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MarketCommentaryTitle {
                get {
                    return ((string)(this[this.tableUI_GetAllMarketCommentaryForToday.MarketCommentaryTitleColumn]));
                }
                set {
                    this[this.tableUI_GetAllMarketCommentaryForToday.MarketCommentaryTitleColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime MarketCommentaryDateTime {
                get {
                    return ((global::System.DateTime)(this[this.tableUI_GetAllMarketCommentaryForToday.MarketCommentaryDateTimeColumn]));
                }
                set {
                    this[this.tableUI_GetAllMarketCommentaryForToday.MarketCommentaryDateTimeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MarketCommentaryDesc {
                get {
                    return ((string)(this[this.tableUI_GetAllMarketCommentaryForToday.MarketCommentaryDescColumn]));
                }
                set {
                    this[this.tableUI_GetAllMarketCommentaryForToday.MarketCommentaryDescColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCommentaryActive {
                get {
                    try {
                        return ((bool)(this[this.tableUI_GetAllMarketCommentaryForToday.IsCommentaryActiveColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsCommentaryActive\' in table \'UI_GetAllMarketCommentaryForT" +
                                "oday\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUI_GetAllMarketCommentaryForToday.IsCommentaryActiveColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsCommentaryActiveNull() {
                return this.IsNull(this.tableUI_GetAllMarketCommentaryForToday.IsCommentaryActiveColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsCommentaryActiveNull() {
                this[this.tableUI_GetAllMarketCommentaryForToday.IsCommentaryActiveColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class UI_GetAllNewsViewsRow : global::System.Data.DataRow {
            
            private UI_GetAllNewsViewsDataTable tableUI_GetAllNewsViews;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal UI_GetAllNewsViewsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableUI_GetAllNewsViews = ((UI_GetAllNewsViewsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int NewsId {
                get {
                    return ((int)(this[this.tableUI_GetAllNewsViews.NewsIdColumn]));
                }
                set {
                    this[this.tableUI_GetAllNewsViews.NewsIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NewsTitle {
                get {
                    return ((string)(this[this.tableUI_GetAllNewsViews.NewsTitleColumn]));
                }
                set {
                    this[this.tableUI_GetAllNewsViews.NewsTitleColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime NewsDateTime {
                get {
                    return ((global::System.DateTime)(this[this.tableUI_GetAllNewsViews.NewsDateTimeColumn]));
                }
                set {
                    this[this.tableUI_GetAllNewsViews.NewsDateTimeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NewsDescription {
                get {
                    return ((string)(this[this.tableUI_GetAllNewsViews.NewsDescriptionColumn]));
                }
                set {
                    this[this.tableUI_GetAllNewsViews.NewsDescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsActive {
                get {
                    return ((bool)(this[this.tableUI_GetAllNewsViews.IsActiveColumn]));
                }
                set {
                    this[this.tableUI_GetAllNewsViews.IsActiveColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPaid {
                get {
                    return ((bool)(this[this.tableUI_GetAllNewsViews.IsPaidColumn]));
                }
                set {
                    this[this.tableUI_GetAllNewsViews.IsPaidColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Ticker {
                get {
                    return ((string)(this[this.tableUI_GetAllNewsViews.TickerColumn]));
                }
                set {
                    this[this.tableUI_GetAllNewsViews.TickerColumn] = value;
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class UI_GetAllWatchOutNewsForTodayRow : global::System.Data.DataRow {
            
            private UI_GetAllWatchOutNewsForTodayDataTable tableUI_GetAllWatchOutNewsForToday;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal UI_GetAllWatchOutNewsForTodayRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableUI_GetAllWatchOutNewsForToday = ((UI_GetAllWatchOutNewsForTodayDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int WatchOutId {
                get {
                    return ((int)(this[this.tableUI_GetAllWatchOutNewsForToday.WatchOutIdColumn]));
                }
                set {
                    this[this.tableUI_GetAllWatchOutNewsForToday.WatchOutIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime WatchOutDateTime {
                get {
                    return ((global::System.DateTime)(this[this.tableUI_GetAllWatchOutNewsForToday.WatchOutDateTimeColumn]));
                }
                set {
                    this[this.tableUI_GetAllWatchOutNewsForToday.WatchOutDateTimeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string WatchOutText {
                get {
                    return ((string)(this[this.tableUI_GetAllWatchOutNewsForToday.WatchOutTextColumn]));
                }
                set {
                    this[this.tableUI_GetAllWatchOutNewsForToday.WatchOutTextColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string WatchOutTitle {
                get {
                    return ((string)(this[this.tableUI_GetAllWatchOutNewsForToday.WatchOutTitleColumn]));
                }
                set {
                    this[this.tableUI_GetAllWatchOutNewsForToday.WatchOutTitleColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPaid {
                get {
                    return ((bool)(this[this.tableUI_GetAllWatchOutNewsForToday.IsPaidColumn]));
                }
                set {
                    this[this.tableUI_GetAllWatchOutNewsForToday.IsPaidColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Ticker {
                get {
                    return ((string)(this[this.tableUI_GetAllWatchOutNewsForToday.TickerColumn]));
                }
                set {
                    this[this.tableUI_GetAllWatchOutNewsForToday.TickerColumn] = value;
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class UI_GetNewsViewsByNewsIdRow : global::System.Data.DataRow {
            
            private UI_GetNewsViewsByNewsIdDataTable tableUI_GetNewsViewsByNewsId;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal UI_GetNewsViewsByNewsIdRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableUI_GetNewsViewsByNewsId = ((UI_GetNewsViewsByNewsIdDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int NewsId {
                get {
                    return ((int)(this[this.tableUI_GetNewsViewsByNewsId.NewsIdColumn]));
                }
                set {
                    this[this.tableUI_GetNewsViewsByNewsId.NewsIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NewsTitle {
                get {
                    return ((string)(this[this.tableUI_GetNewsViewsByNewsId.NewsTitleColumn]));
                }
                set {
                    this[this.tableUI_GetNewsViewsByNewsId.NewsTitleColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime NewsDateTime {
                get {
                    return ((global::System.DateTime)(this[this.tableUI_GetNewsViewsByNewsId.NewsDateTimeColumn]));
                }
                set {
                    this[this.tableUI_GetNewsViewsByNewsId.NewsDateTimeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NewsDescription {
                get {
                    return ((string)(this[this.tableUI_GetNewsViewsByNewsId.NewsDescriptionColumn]));
                }
                set {
                    this[this.tableUI_GetNewsViewsByNewsId.NewsDescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsActive {
                get {
                    return ((bool)(this[this.tableUI_GetNewsViewsByNewsId.IsActiveColumn]));
                }
                set {
                    this[this.tableUI_GetNewsViewsByNewsId.IsActiveColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPaid {
                get {
                    return ((bool)(this[this.tableUI_GetNewsViewsByNewsId.IsPaidColumn]));
                }
                set {
                    this[this.tableUI_GetNewsViewsByNewsId.IsPaidColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Ticker {
                get {
                    return ((string)(this[this.tableUI_GetNewsViewsByNewsId.TickerColumn]));
                }
                set {
                    this[this.tableUI_GetNewsViewsByNewsId.TickerColumn] = value;
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class UI_GetPremiumServicesRow : global::System.Data.DataRow {
            
            private UI_GetPremiumServicesDataTable tableUI_GetPremiumServices;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal UI_GetPremiumServicesRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableUI_GetPremiumServices = ((UI_GetPremiumServicesDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int PremiumServiceId {
                get {
                    return ((int)(this[this.tableUI_GetPremiumServices.PremiumServiceIdColumn]));
                }
                set {
                    this[this.tableUI_GetPremiumServices.PremiumServiceIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Ticker {
                get {
                    return ((string)(this[this.tableUI_GetPremiumServices.TickerColumn]));
                }
                set {
                    this[this.tableUI_GetPremiumServices.TickerColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PremiumServiceTitle {
                get {
                    return ((string)(this[this.tableUI_GetPremiumServices.PremiumServiceTitleColumn]));
                }
                set {
                    this[this.tableUI_GetPremiumServices.PremiumServiceTitleColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PremiumServiceDescription {
                get {
                    return ((string)(this[this.tableUI_GetPremiumServices.PremiumServiceDescriptionColumn]));
                }
                set {
                    this[this.tableUI_GetPremiumServices.PremiumServiceDescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsActive {
                get {
                    return ((bool)(this[this.tableUI_GetPremiumServices.IsActiveColumn]));
                }
                set {
                    this[this.tableUI_GetPremiumServices.IsActiveColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPaid {
                get {
                    return ((bool)(this[this.tableUI_GetPremiumServices.IsPaidColumn]));
                }
                set {
                    this[this.tableUI_GetPremiumServices.IsPaidColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int TypeOfTradeId {
                get {
                    return ((int)(this[this.tableUI_GetPremiumServices.TypeOfTradeIdColumn]));
                }
                set {
                    this[this.tableUI_GetPremiumServices.TypeOfTradeIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime PremiumServiceDate {
                get {
                    return ((global::System.DateTime)(this[this.tableUI_GetPremiumServices.PremiumServiceDateColumn]));
                }
                set {
                    this[this.tableUI_GetPremiumServices.PremiumServiceDateColumn] = value;
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class UI_GetPremiumServicesByPremiumServiceIdRow : global::System.Data.DataRow {
            
            private UI_GetPremiumServicesByPremiumServiceIdDataTable tableUI_GetPremiumServicesByPremiumServiceId;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal UI_GetPremiumServicesByPremiumServiceIdRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableUI_GetPremiumServicesByPremiumServiceId = ((UI_GetPremiumServicesByPremiumServiceIdDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int PremiumServiceId {
                get {
                    return ((int)(this[this.tableUI_GetPremiumServicesByPremiumServiceId.PremiumServiceIdColumn]));
                }
                set {
                    this[this.tableUI_GetPremiumServicesByPremiumServiceId.PremiumServiceIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Ticker {
                get {
                    return ((string)(this[this.tableUI_GetPremiumServicesByPremiumServiceId.TickerColumn]));
                }
                set {
                    this[this.tableUI_GetPremiumServicesByPremiumServiceId.TickerColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PremiumServiceTitle {
                get {
                    return ((string)(this[this.tableUI_GetPremiumServicesByPremiumServiceId.PremiumServiceTitleColumn]));
                }
                set {
                    this[this.tableUI_GetPremiumServicesByPremiumServiceId.PremiumServiceTitleColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PremiumServiceDescription {
                get {
                    return ((string)(this[this.tableUI_GetPremiumServicesByPremiumServiceId.PremiumServiceDescriptionColumn]));
                }
                set {
                    this[this.tableUI_GetPremiumServicesByPremiumServiceId.PremiumServiceDescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsActive {
                get {
                    return ((bool)(this[this.tableUI_GetPremiumServicesByPremiumServiceId.IsActiveColumn]));
                }
                set {
                    this[this.tableUI_GetPremiumServicesByPremiumServiceId.IsActiveColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPaid {
                get {
                    return ((bool)(this[this.tableUI_GetPremiumServicesByPremiumServiceId.IsPaidColumn]));
                }
                set {
                    this[this.tableUI_GetPremiumServicesByPremiumServiceId.IsPaidColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int TypeOfTradeId {
                get {
                    return ((int)(this[this.tableUI_GetPremiumServicesByPremiumServiceId.TypeOfTradeIdColumn]));
                }
                set {
                    this[this.tableUI_GetPremiumServicesByPremiumServiceId.TypeOfTradeIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime PremiumServiceDate {
                get {
                    return ((global::System.DateTime)(this[this.tableUI_GetPremiumServicesByPremiumServiceId.PremiumServiceDateColumn]));
                }
                set {
                    this[this.tableUI_GetPremiumServicesByPremiumServiceId.PremiumServiceDateColumn] = value;
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class UI_GetUserCredentialsRow : global::System.Data.DataRow {
            
            private UI_GetUserCredentialsDataTable tableUI_GetUserCredentials;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal UI_GetUserCredentialsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableUI_GetUserCredentials = ((UI_GetUserCredentialsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UserId {
                get {
                    return ((string)(this[this.tableUI_GetUserCredentials.UserIdColumn]));
                }
                set {
                    this[this.tableUI_GetUserCredentials.UserIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Password {
                get {
                    return ((string)(this[this.tableUI_GetUserCredentials.PasswordColumn]));
                }
                set {
                    this[this.tableUI_GetUserCredentials.PasswordColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FirstName {
                get {
                    return ((string)(this[this.tableUI_GetUserCredentials.FirstNameColumn]));
                }
                set {
                    this[this.tableUI_GetUserCredentials.FirstNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LastName {
                get {
                    return ((string)(this[this.tableUI_GetUserCredentials.LastNameColumn]));
                }
                set {
                    this[this.tableUI_GetUserCredentials.LastNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PhoneNumber {
                get {
                    return ((string)(this[this.tableUI_GetUserCredentials.PhoneNumberColumn]));
                }
                set {
                    this[this.tableUI_GetUserCredentials.PhoneNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPaidSubscriber {
                get {
                    return ((bool)(this[this.tableUI_GetUserCredentials.IsPaidSubscriberColumn]));
                }
                set {
                    this[this.tableUI_GetUserCredentials.IsPaidSubscriberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime SubscriptionStartDate {
                get {
                    return ((global::System.DateTime)(this[this.tableUI_GetUserCredentials.SubscriptionStartDateColumn]));
                }
                set {
                    this[this.tableUI_GetUserCredentials.SubscriptionStartDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime SubscriptionEndDate {
                get {
                    return ((global::System.DateTime)(this[this.tableUI_GetUserCredentials.SubscriptionEndDateColumn]));
                }
                set {
                    this[this.tableUI_GetUserCredentials.SubscriptionEndDateColumn] = value;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class AdminCredentialsRowChangeEvent : global::System.EventArgs {
            
            private AdminCredentialsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AdminCredentialsRowChangeEvent(AdminCredentialsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AdminCredentialsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class BuyOrSellLookUpRowChangeEvent : global::System.EventArgs {
            
            private BuyOrSellLookUpRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BuyOrSellLookUpRowChangeEvent(BuyOrSellLookUpRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BuyOrSellLookUpRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class EmailNewsletterRowChangeEvent : global::System.EventArgs {
            
            private EmailNewsletterRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmailNewsletterRowChangeEvent(EmailNewsletterRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmailNewsletterRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class EmailSentRowChangeEvent : global::System.EventArgs {
            
            private EmailSentRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmailSentRowChangeEvent(EmailSentRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmailSentRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class MarketCommentaryRowChangeEvent : global::System.EventArgs {
            
            private MarketCommentaryRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MarketCommentaryRowChangeEvent(MarketCommentaryRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MarketCommentaryRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class NewsAndViewsRowChangeEvent : global::System.EventArgs {
            
            private NewsAndViewsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public NewsAndViewsRowChangeEvent(NewsAndViewsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public NewsAndViewsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class OrdersRowChangeEvent : global::System.EventArgs {
            
            private OrdersRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OrdersRowChangeEvent(OrdersRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OrdersRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class PortfolioLookUpRowChangeEvent : global::System.EventArgs {
            
            private PortfolioLookUpRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PortfolioLookUpRowChangeEvent(PortfolioLookUpRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PortfolioLookUpRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class PortfolioTransactionsRowChangeEvent : global::System.EventArgs {
            
            private PortfolioTransactionsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PortfolioTransactionsRowChangeEvent(PortfolioTransactionsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PortfolioTransactionsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class PremiumServicesRowChangeEvent : global::System.EventArgs {
            
            private PremiumServicesRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PremiumServicesRowChangeEvent(PremiumServicesRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PremiumServicesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class RecommendationsRowChangeEvent : global::System.EventArgs {
            
            private RecommendationsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RecommendationsRowChangeEvent(RecommendationsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RecommendationsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class SubscriptionRowChangeEvent : global::System.EventArgs {
            
            private SubscriptionRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SubscriptionRowChangeEvent(SubscriptionRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SubscriptionRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class SubscriptionLookUpRowChangeEvent : global::System.EventArgs {
            
            private SubscriptionLookUpRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SubscriptionLookUpRowChangeEvent(SubscriptionLookUpRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SubscriptionLookUpRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class TradeTypesRowChangeEvent : global::System.EventArgs {
            
            private TradeTypesRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TradeTypesRowChangeEvent(TradeTypesRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TradeTypesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class UsersRowChangeEvent : global::System.EventArgs {
            
            private UsersRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UsersRowChangeEvent(UsersRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UsersRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class WatchOutRowChangeEvent : global::System.EventArgs {
            
            private WatchOutRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public WatchOutRowChangeEvent(WatchOutRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public WatchOutRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class GetAllClosedPortfolioRowChangeEvent : global::System.EventArgs {
            
            private GetAllClosedPortfolioRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetAllClosedPortfolioRowChangeEvent(GetAllClosedPortfolioRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetAllClosedPortfolioRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class GetAllEmailAddressRowChangeEvent : global::System.EventArgs {
            
            private GetAllEmailAddressRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetAllEmailAddressRowChangeEvent(GetAllEmailAddressRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetAllEmailAddressRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class GetAllEmailToSendRowChangeEvent : global::System.EventArgs {
            
            private GetAllEmailToSendRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetAllEmailToSendRowChangeEvent(GetAllEmailToSendRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetAllEmailToSendRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class GetAllMarketCommentariesRowChangeEvent : global::System.EventArgs {
            
            private GetAllMarketCommentariesRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetAllMarketCommentariesRowChangeEvent(GetAllMarketCommentariesRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetAllMarketCommentariesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class GetAllNewsAndViewsRowChangeEvent : global::System.EventArgs {
            
            private GetAllNewsAndViewsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetAllNewsAndViewsRowChangeEvent(GetAllNewsAndViewsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetAllNewsAndViewsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class GetAllOpenPortfolioRowChangeEvent : global::System.EventArgs {
            
            private GetAllOpenPortfolioRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetAllOpenPortfolioRowChangeEvent(GetAllOpenPortfolioRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetAllOpenPortfolioRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class GetAllOrdersRowChangeEvent : global::System.EventArgs {
            
            private GetAllOrdersRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetAllOrdersRowChangeEvent(GetAllOrdersRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetAllOrdersRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class GetAllPortfolioRowChangeEvent : global::System.EventArgs {
            
            private GetAllPortfolioRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetAllPortfolioRowChangeEvent(GetAllPortfolioRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetAllPortfolioRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class GetAllUsersRowChangeEvent : global::System.EventArgs {
            
            private GetAllUsersRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetAllUsersRowChangeEvent(GetAllUsersRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetAllUsersRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class GetAllWatchOutNewsRowChangeEvent : global::System.EventArgs {
            
            private GetAllWatchOutNewsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetAllWatchOutNewsRowChangeEvent(GetAllWatchOutNewsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetAllWatchOutNewsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class GetEmailBySendEmailIdRowChangeEvent : global::System.EventArgs {
            
            private GetEmailBySendEmailIdRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetEmailBySendEmailIdRowChangeEvent(GetEmailBySendEmailIdRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetEmailBySendEmailIdRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class GetMarketCommentaryByArticleRowChangeEvent : global::System.EventArgs {
            
            private GetMarketCommentaryByArticleRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetMarketCommentaryByArticleRowChangeEvent(GetMarketCommentaryByArticleRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetMarketCommentaryByArticleRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class GetNewsAndViewsByArticleRowChangeEvent : global::System.EventArgs {
            
            private GetNewsAndViewsByArticleRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetNewsAndViewsByArticleRowChangeEvent(GetNewsAndViewsByArticleRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetNewsAndViewsByArticleRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class GetOrdesrByUserIdOrderIdRowChangeEvent : global::System.EventArgs {
            
            private GetOrdesrByUserIdOrderIdRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetOrdesrByUserIdOrderIdRowChangeEvent(GetOrdesrByUserIdOrderIdRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetOrdesrByUserIdOrderIdRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class GetPortfolioByTransactionIdRowChangeEvent : global::System.EventArgs {
            
            private GetPortfolioByTransactionIdRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetPortfolioByTransactionIdRowChangeEvent(GetPortfolioByTransactionIdRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetPortfolioByTransactionIdRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class GetPremiumServiceByArticleRowChangeEvent : global::System.EventArgs {
            
            private GetPremiumServiceByArticleRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetPremiumServiceByArticleRowChangeEvent(GetPremiumServiceByArticleRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetPremiumServiceByArticleRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class GetPremiumServicesRowChangeEvent : global::System.EventArgs {
            
            private GetPremiumServicesRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetPremiumServicesRowChangeEvent(GetPremiumServicesRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetPremiumServicesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class GetUserByUserIdRowChangeEvent : global::System.EventArgs {
            
            private GetUserByUserIdRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetUserByUserIdRowChangeEvent(GetUserByUserIdRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetUserByUserIdRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class GetWatchOutNewsByArticleRowChangeEvent : global::System.EventArgs {
            
            private GetWatchOutNewsByArticleRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetWatchOutNewsByArticleRowChangeEvent(GetWatchOutNewsByArticleRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetWatchOutNewsByArticleRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class UI_GetAllMarketCommentaryForTodayRowChangeEvent : global::System.EventArgs {
            
            private UI_GetAllMarketCommentaryForTodayRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UI_GetAllMarketCommentaryForTodayRowChangeEvent(UI_GetAllMarketCommentaryForTodayRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UI_GetAllMarketCommentaryForTodayRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class UI_GetAllNewsViewsRowChangeEvent : global::System.EventArgs {
            
            private UI_GetAllNewsViewsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UI_GetAllNewsViewsRowChangeEvent(UI_GetAllNewsViewsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UI_GetAllNewsViewsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class UI_GetAllWatchOutNewsForTodayRowChangeEvent : global::System.EventArgs {
            
            private UI_GetAllWatchOutNewsForTodayRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UI_GetAllWatchOutNewsForTodayRowChangeEvent(UI_GetAllWatchOutNewsForTodayRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UI_GetAllWatchOutNewsForTodayRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class UI_GetNewsViewsByNewsIdRowChangeEvent : global::System.EventArgs {
            
            private UI_GetNewsViewsByNewsIdRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UI_GetNewsViewsByNewsIdRowChangeEvent(UI_GetNewsViewsByNewsIdRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UI_GetNewsViewsByNewsIdRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class UI_GetPremiumServicesRowChangeEvent : global::System.EventArgs {
            
            private UI_GetPremiumServicesRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UI_GetPremiumServicesRowChangeEvent(UI_GetPremiumServicesRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UI_GetPremiumServicesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class UI_GetPremiumServicesByPremiumServiceIdRowChangeEvent : global::System.EventArgs {
            
            private UI_GetPremiumServicesByPremiumServiceIdRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UI_GetPremiumServicesByPremiumServiceIdRowChangeEvent(UI_GetPremiumServicesByPremiumServiceIdRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UI_GetPremiumServicesByPremiumServiceIdRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class UI_GetUserCredentialsRowChangeEvent : global::System.EventArgs {
            
            private UI_GetUserCredentialsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UI_GetUserCredentialsRowChangeEvent(UI_GetUserCredentialsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UI_GetUserCredentialsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
namespace DStreet.USAdvisory.Business.USAdvisoryDataSetTableAdapters {
    
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class AdminCredentialsTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public AdminCredentialsTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "AdminCredentials";
            tableMapping.ColumnMappings.Add("UserName", "UserName");
            tableMapping.ColumnMappings.Add("Password", "Password");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[AdminCredentials] WHERE (([UserName] = @Original_UserName) AND" +
                " ([Password] = @Original_Password))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_UserName", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "UserName", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Password", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Password", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[AdminCredentials] ([UserName], [Password]) VALUES (@UserName, " +
                "@Password);\r\nSELECT UserName, Password FROM AdminCredentials WHERE (UserName = @" +
                "UserName)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@UserName", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "UserName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Password", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Password", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[AdminCredentials] SET [UserName] = @UserName, [Password] = @Passwor" +
                "d WHERE (([UserName] = @Original_UserName) AND ([Password] = @Original_Password)" +
                ");\r\nSELECT UserName, Password FROM AdminCredentials WHERE (UserName = @UserName)" +
                "";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@UserName", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "UserName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Password", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Password", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_UserName", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "UserName", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Password", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Password", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::DStreet.USAdvisory.Business.Properties.Settings.Default.USAdvisoryConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT UserName, Password FROM dbo.AdminCredentials";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(USAdvisoryDataSet.AdminCredentialsDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual USAdvisoryDataSet.AdminCredentialsDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            USAdvisoryDataSet.AdminCredentialsDataTable dataTable = new USAdvisoryDataSet.AdminCredentialsDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(USAdvisoryDataSet.AdminCredentialsDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(USAdvisoryDataSet dataSet) {
            return this.Adapter.Update(dataSet, "AdminCredentials");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(string Original_UserName, string Original_Password) {
            if ((Original_UserName == null)) {
                throw new global::System.ArgumentNullException("Original_UserName");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[0].Value = ((string)(Original_UserName));
            }
            if ((Original_Password == null)) {
                throw new global::System.ArgumentNullException("Original_Password");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_Password));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string UserName, string Password) {
            if ((UserName == null)) {
                throw new global::System.ArgumentNullException("UserName");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(UserName));
            }
            if ((Password == null)) {
                throw new global::System.ArgumentNullException("Password");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(Password));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string UserName, string Password, string Original_UserName, string Original_Password) {
            if ((UserName == null)) {
                throw new global::System.ArgumentNullException("UserName");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(UserName));
            }
            if ((Password == null)) {
                throw new global::System.ArgumentNullException("Password");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(Password));
            }
            if ((Original_UserName == null)) {
                throw new global::System.ArgumentNullException("Original_UserName");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(Original_UserName));
            }
            if ((Original_Password == null)) {
                throw new global::System.ArgumentNullException("Original_Password");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(Original_Password));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string Password, string Original_UserName, string Original_Password) {
            return this.Update(Original_UserName, Password, Original_UserName, Original_Password);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class BuyOrSellLookUpTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public BuyOrSellLookUpTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "BuyOrSellLookUp";
            tableMapping.ColumnMappings.Add("BuyOrSellId", "BuyOrSellId");
            tableMapping.ColumnMappings.Add("BuyOrSellDescription", "BuyOrSellDescription");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[BuyOrSellLookUp] WHERE (([BuyOrSellId] = @Original_BuyOrSellId" +
                ") AND ([BuyOrSellDescription] = @Original_BuyOrSellDescription))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_BuyOrSellId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "BuyOrSellId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_BuyOrSellDescription", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "BuyOrSellDescription", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[BuyOrSellLookUp] ([BuyOrSellDescription]) VALUES (@BuyOrSellDe" +
                "scription);\r\nSELECT BuyOrSellId, BuyOrSellDescription FROM BuyOrSellLookUp WHERE" +
                " (BuyOrSellId = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@BuyOrSellDescription", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "BuyOrSellDescription", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[BuyOrSellLookUp] SET [BuyOrSellDescription] = @BuyOrSellDescription WHERE (([BuyOrSellId] = @Original_BuyOrSellId) AND ([BuyOrSellDescription] = @Original_BuyOrSellDescription));
SELECT BuyOrSellId, BuyOrSellDescription FROM BuyOrSellLookUp WHERE (BuyOrSellId = @BuyOrSellId)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@BuyOrSellDescription", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "BuyOrSellDescription", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_BuyOrSellId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "BuyOrSellId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_BuyOrSellDescription", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "BuyOrSellDescription", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@BuyOrSellId", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "BuyOrSellId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::DStreet.USAdvisory.Business.Properties.Settings.Default.USAdvisoryConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT BuyOrSellId, BuyOrSellDescription FROM dbo.BuyOrSellLookUp";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(USAdvisoryDataSet.BuyOrSellLookUpDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual USAdvisoryDataSet.BuyOrSellLookUpDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            USAdvisoryDataSet.BuyOrSellLookUpDataTable dataTable = new USAdvisoryDataSet.BuyOrSellLookUpDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(USAdvisoryDataSet.BuyOrSellLookUpDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(USAdvisoryDataSet dataSet) {
            return this.Adapter.Update(dataSet, "BuyOrSellLookUp");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_BuyOrSellId, string Original_BuyOrSellDescription) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_BuyOrSellId));
            if ((Original_BuyOrSellDescription == null)) {
                throw new global::System.ArgumentNullException("Original_BuyOrSellDescription");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_BuyOrSellDescription));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string BuyOrSellDescription) {
            if ((BuyOrSellDescription == null)) {
                throw new global::System.ArgumentNullException("BuyOrSellDescription");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(BuyOrSellDescription));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string BuyOrSellDescription, int Original_BuyOrSellId, string Original_BuyOrSellDescription, int BuyOrSellId) {
            if ((BuyOrSellDescription == null)) {
                throw new global::System.ArgumentNullException("BuyOrSellDescription");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(BuyOrSellDescription));
            }
            this.Adapter.UpdateCommand.Parameters[1].Value = ((int)(Original_BuyOrSellId));
            if ((Original_BuyOrSellDescription == null)) {
                throw new global::System.ArgumentNullException("Original_BuyOrSellDescription");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(Original_BuyOrSellDescription));
            }
            this.Adapter.UpdateCommand.Parameters[3].Value = ((int)(BuyOrSellId));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string BuyOrSellDescription, int Original_BuyOrSellId, string Original_BuyOrSellDescription) {
            return this.Update(BuyOrSellDescription, Original_BuyOrSellId, Original_BuyOrSellDescription, Original_BuyOrSellId);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class EmailNewsletterTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public EmailNewsletterTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "EmailNewsletter";
            tableMapping.ColumnMappings.Add("EmailNewsLetterId", "EmailNewsLetterId");
            tableMapping.ColumnMappings.Add("EmailAddress", "EmailAddress");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[EmailNewsletter] WHERE (([EmailNewsLetterId] = @Original_Email" +
                "NewsLetterId) AND ([EmailAddress] = @Original_EmailAddress))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_EmailNewsLetterId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "EmailNewsLetterId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_EmailAddress", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "EmailAddress", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[EmailNewsletter] ([EmailAddress]) VALUES (@EmailAddress);\r\nSEL" +
                "ECT EmailNewsLetterId, EmailAddress FROM EmailNewsletter WHERE (EmailNewsLetterI" +
                "d = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@EmailAddress", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "EmailAddress", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[EmailNewsletter] SET [EmailAddress] = @EmailAddress WHERE (([EmailNewsLetterId] = @Original_EmailNewsLetterId) AND ([EmailAddress] = @Original_EmailAddress));
SELECT EmailNewsLetterId, EmailAddress FROM EmailNewsletter WHERE (EmailNewsLetterId = @EmailNewsLetterId)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@EmailAddress", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "EmailAddress", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_EmailNewsLetterId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "EmailNewsLetterId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_EmailAddress", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "EmailAddress", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@EmailNewsLetterId", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "EmailNewsLetterId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::DStreet.USAdvisory.Business.Properties.Settings.Default.USAdvisoryConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT EmailNewsLetterId, EmailAddress FROM dbo.EmailNewsletter";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(USAdvisoryDataSet.EmailNewsletterDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual USAdvisoryDataSet.EmailNewsletterDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            USAdvisoryDataSet.EmailNewsletterDataTable dataTable = new USAdvisoryDataSet.EmailNewsletterDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(USAdvisoryDataSet.EmailNewsletterDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(USAdvisoryDataSet dataSet) {
            return this.Adapter.Update(dataSet, "EmailNewsletter");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_EmailNewsLetterId, string Original_EmailAddress) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_EmailNewsLetterId));
            if ((Original_EmailAddress == null)) {
                throw new global::System.ArgumentNullException("Original_EmailAddress");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_EmailAddress));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string EmailAddress) {
            if ((EmailAddress == null)) {
                throw new global::System.ArgumentNullException("EmailAddress");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(EmailAddress));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string EmailAddress, int Original_EmailNewsLetterId, string Original_EmailAddress, int EmailNewsLetterId) {
            if ((EmailAddress == null)) {
                throw new global::System.ArgumentNullException("EmailAddress");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(EmailAddress));
            }
            this.Adapter.UpdateCommand.Parameters[1].Value = ((int)(Original_EmailNewsLetterId));
            if ((Original_EmailAddress == null)) {
                throw new global::System.ArgumentNullException("Original_EmailAddress");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(Original_EmailAddress));
            }
            this.Adapter.UpdateCommand.Parameters[3].Value = ((int)(EmailNewsLetterId));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string EmailAddress, int Original_EmailNewsLetterId, string Original_EmailAddress) {
            return this.Update(EmailAddress, Original_EmailNewsLetterId, Original_EmailAddress, Original_EmailNewsLetterId);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class EmailSentTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public EmailSentTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "EmailSent";
            tableMapping.ColumnMappings.Add("SendEmailId", "SendEmailId");
            tableMapping.ColumnMappings.Add("EmailDescription", "EmailDescription");
            tableMapping.ColumnMappings.Add("IsSubscribers", "IsSubscribers");
            tableMapping.ColumnMappings.Add("IsEmailSent", "IsEmailSent");
            tableMapping.ColumnMappings.Add("EmailDateTime", "EmailDateTime");
            tableMapping.ColumnMappings.Add("EmailSentDateTime", "EmailSentDateTime");
            tableMapping.ColumnMappings.Add("EmailSubject", "EmailSubject");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [dbo].[EmailSent] WHERE (([SendEmailId] = @Original_SendEmailId) AND ([IsSubscribers] = @Original_IsSubscribers) AND ([IsEmailSent] = @Original_IsEmailSent) AND ([EmailDateTime] = @Original_EmailDateTime) AND ((@IsNull_EmailSentDateTime = 1 AND [EmailSentDateTime] IS NULL) OR ([EmailSentDateTime] = @Original_EmailSentDateTime)) AND ([EmailSubject] = @Original_EmailSubject))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_SendEmailId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SendEmailId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_IsSubscribers", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IsSubscribers", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_IsEmailSent", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IsEmailSent", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_EmailDateTime", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "EmailDateTime", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_EmailSentDateTime", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "EmailSentDateTime", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_EmailSentDateTime", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "EmailSentDateTime", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_EmailSubject", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "EmailSubject", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[EmailSent] ([EmailDescription], [IsSubscribers], [IsEmailSent], [EmailDateTime], [EmailSentDateTime], [EmailSubject]) VALUES (@EmailDescription, @IsSubscribers, @IsEmailSent, @EmailDateTime, @EmailSentDateTime, @EmailSubject);
SELECT SendEmailId, EmailDescription, IsSubscribers, IsEmailSent, EmailDateTime, EmailSentDateTime, EmailSubject FROM EmailSent WHERE (SendEmailId = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@EmailDescription", global::System.Data.SqlDbType.NText, 0, global::System.Data.ParameterDirection.Input, 0, 0, "EmailDescription", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsSubscribers", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IsSubscribers", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsEmailSent", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IsEmailSent", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@EmailDateTime", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "EmailDateTime", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@EmailSentDateTime", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "EmailSentDateTime", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@EmailSubject", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "EmailSubject", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[EmailSent] SET [EmailDescription] = @EmailDescription, [IsSubscribers] = @IsSubscribers, [IsEmailSent] = @IsEmailSent, [EmailDateTime] = @EmailDateTime, [EmailSentDateTime] = @EmailSentDateTime, [EmailSubject] = @EmailSubject WHERE (([SendEmailId] = @Original_SendEmailId) AND ([IsSubscribers] = @Original_IsSubscribers) AND ([IsEmailSent] = @Original_IsEmailSent) AND ([EmailDateTime] = @Original_EmailDateTime) AND ((@IsNull_EmailSentDateTime = 1 AND [EmailSentDateTime] IS NULL) OR ([EmailSentDateTime] = @Original_EmailSentDateTime)) AND ([EmailSubject] = @Original_EmailSubject));
SELECT SendEmailId, EmailDescription, IsSubscribers, IsEmailSent, EmailDateTime, EmailSentDateTime, EmailSubject FROM EmailSent WHERE (SendEmailId = @SendEmailId)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@EmailDescription", global::System.Data.SqlDbType.NText, 0, global::System.Data.ParameterDirection.Input, 0, 0, "EmailDescription", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsSubscribers", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IsSubscribers", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsEmailSent", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IsEmailSent", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@EmailDateTime", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "EmailDateTime", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@EmailSentDateTime", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "EmailSentDateTime", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@EmailSubject", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "EmailSubject", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_SendEmailId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SendEmailId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_IsSubscribers", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IsSubscribers", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_IsEmailSent", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IsEmailSent", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_EmailDateTime", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "EmailDateTime", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_EmailSentDateTime", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "EmailSentDateTime", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_EmailSentDateTime", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "EmailSentDateTime", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_EmailSubject", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "EmailSubject", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@SendEmailId", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "SendEmailId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::DStreet.USAdvisory.Business.Properties.Settings.Default.USAdvisoryConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT SendEmailId, EmailDescription, IsSubscribers, IsEmailSent, EmailDateTime, " +
                "EmailSentDateTime, EmailSubject FROM dbo.EmailSent";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(USAdvisoryDataSet.EmailSentDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual USAdvisoryDataSet.EmailSentDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            USAdvisoryDataSet.EmailSentDataTable dataTable = new USAdvisoryDataSet.EmailSentDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(USAdvisoryDataSet.EmailSentDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(USAdvisoryDataSet dataSet) {
            return this.Adapter.Update(dataSet, "EmailSent");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_SendEmailId, bool Original_IsSubscribers, bool Original_IsEmailSent, System.DateTime Original_EmailDateTime, global::System.Nullable<global::System.DateTime> Original_EmailSentDateTime, string Original_EmailSubject) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_SendEmailId));
            this.Adapter.DeleteCommand.Parameters[1].Value = ((bool)(Original_IsSubscribers));
            this.Adapter.DeleteCommand.Parameters[2].Value = ((bool)(Original_IsEmailSent));
            this.Adapter.DeleteCommand.Parameters[3].Value = ((System.DateTime)(Original_EmailDateTime));
            if ((Original_EmailSentDateTime.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[4].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[5].Value = ((System.DateTime)(Original_EmailSentDateTime.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[4].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            if ((Original_EmailSubject == null)) {
                throw new global::System.ArgumentNullException("Original_EmailSubject");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[6].Value = ((string)(Original_EmailSubject));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string EmailDescription, bool IsSubscribers, bool IsEmailSent, System.DateTime EmailDateTime, global::System.Nullable<global::System.DateTime> EmailSentDateTime, string EmailSubject) {
            if ((EmailDescription == null)) {
                throw new global::System.ArgumentNullException("EmailDescription");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(EmailDescription));
            }
            this.Adapter.InsertCommand.Parameters[1].Value = ((bool)(IsSubscribers));
            this.Adapter.InsertCommand.Parameters[2].Value = ((bool)(IsEmailSent));
            this.Adapter.InsertCommand.Parameters[3].Value = ((System.DateTime)(EmailDateTime));
            if ((EmailSentDateTime.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[4].Value = ((System.DateTime)(EmailSentDateTime.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            if ((EmailSubject == null)) {
                throw new global::System.ArgumentNullException("EmailSubject");
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = ((string)(EmailSubject));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string EmailDescription, bool IsSubscribers, bool IsEmailSent, System.DateTime EmailDateTime, global::System.Nullable<global::System.DateTime> EmailSentDateTime, string EmailSubject, int Original_SendEmailId, bool Original_IsSubscribers, bool Original_IsEmailSent, System.DateTime Original_EmailDateTime, global::System.Nullable<global::System.DateTime> Original_EmailSentDateTime, string Original_EmailSubject, int SendEmailId) {
            if ((EmailDescription == null)) {
                throw new global::System.ArgumentNullException("EmailDescription");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(EmailDescription));
            }
            this.Adapter.UpdateCommand.Parameters[1].Value = ((bool)(IsSubscribers));
            this.Adapter.UpdateCommand.Parameters[2].Value = ((bool)(IsEmailSent));
            this.Adapter.UpdateCommand.Parameters[3].Value = ((System.DateTime)(EmailDateTime));
            if ((EmailSentDateTime.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((System.DateTime)(EmailSentDateTime.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            if ((EmailSubject == null)) {
                throw new global::System.ArgumentNullException("EmailSubject");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(EmailSubject));
            }
            this.Adapter.UpdateCommand.Parameters[6].Value = ((int)(Original_SendEmailId));
            this.Adapter.UpdateCommand.Parameters[7].Value = ((bool)(Original_IsSubscribers));
            this.Adapter.UpdateCommand.Parameters[8].Value = ((bool)(Original_IsEmailSent));
            this.Adapter.UpdateCommand.Parameters[9].Value = ((System.DateTime)(Original_EmailDateTime));
            if ((Original_EmailSentDateTime.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[11].Value = ((System.DateTime)(Original_EmailSentDateTime.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            if ((Original_EmailSubject == null)) {
                throw new global::System.ArgumentNullException("Original_EmailSubject");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((string)(Original_EmailSubject));
            }
            this.Adapter.UpdateCommand.Parameters[13].Value = ((int)(SendEmailId));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string EmailDescription, bool IsSubscribers, bool IsEmailSent, System.DateTime EmailDateTime, global::System.Nullable<global::System.DateTime> EmailSentDateTime, string EmailSubject, int Original_SendEmailId, bool Original_IsSubscribers, bool Original_IsEmailSent, System.DateTime Original_EmailDateTime, global::System.Nullable<global::System.DateTime> Original_EmailSentDateTime, string Original_EmailSubject) {
            return this.Update(EmailDescription, IsSubscribers, IsEmailSent, EmailDateTime, EmailSentDateTime, EmailSubject, Original_SendEmailId, Original_IsSubscribers, Original_IsEmailSent, Original_EmailDateTime, Original_EmailSentDateTime, Original_EmailSubject, Original_SendEmailId);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class MarketCommentaryTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public MarketCommentaryTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "MarketCommentary";
            tableMapping.ColumnMappings.Add("MarketCommentaryId", "MarketCommentaryId");
            tableMapping.ColumnMappings.Add("MarketCommentaryTitle", "MarketCommentaryTitle");
            tableMapping.ColumnMappings.Add("MarketCommentaryDateTime", "MarketCommentaryDateTime");
            tableMapping.ColumnMappings.Add("MarketCommentaryDesc", "MarketCommentaryDesc");
            tableMapping.ColumnMappings.Add("IsCommentaryActive", "IsCommentaryActive");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [dbo].[MarketCommentary] WHERE (([MarketCommentaryId] = @Original_MarketCommentaryId) AND ([MarketCommentaryTitle] = @Original_MarketCommentaryTitle) AND ([MarketCommentaryDateTime] = @Original_MarketCommentaryDateTime) AND ((@IsNull_IsCommentaryActive = 1 AND [IsCommentaryActive] IS NULL) OR ([IsCommentaryActive] = @Original_IsCommentaryActive)))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_MarketCommentaryId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MarketCommentaryId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_MarketCommentaryTitle", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MarketCommentaryTitle", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_MarketCommentaryDateTime", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MarketCommentaryDateTime", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_IsCommentaryActive", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IsCommentaryActive", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_IsCommentaryActive", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IsCommentaryActive", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[MarketCommentary] ([MarketCommentaryTitle], [MarketCommentaryDateTime], [MarketCommentaryDesc], [IsCommentaryActive]) VALUES (@MarketCommentaryTitle, @MarketCommentaryDateTime, @MarketCommentaryDesc, @IsCommentaryActive);
SELECT MarketCommentaryId, MarketCommentaryTitle, MarketCommentaryDateTime, MarketCommentaryDesc, IsCommentaryActive FROM MarketCommentary WHERE (MarketCommentaryId = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@MarketCommentaryTitle", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MarketCommentaryTitle", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@MarketCommentaryDateTime", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MarketCommentaryDateTime", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@MarketCommentaryDesc", global::System.Data.SqlDbType.NText, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MarketCommentaryDesc", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsCommentaryActive", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IsCommentaryActive", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[MarketCommentary] SET [MarketCommentaryTitle] = @MarketCommentaryTitle, [MarketCommentaryDateTime] = @MarketCommentaryDateTime, [MarketCommentaryDesc] = @MarketCommentaryDesc, [IsCommentaryActive] = @IsCommentaryActive WHERE (([MarketCommentaryId] = @Original_MarketCommentaryId) AND ([MarketCommentaryTitle] = @Original_MarketCommentaryTitle) AND ([MarketCommentaryDateTime] = @Original_MarketCommentaryDateTime) AND ((@IsNull_IsCommentaryActive = 1 AND [IsCommentaryActive] IS NULL) OR ([IsCommentaryActive] = @Original_IsCommentaryActive)));
SELECT MarketCommentaryId, MarketCommentaryTitle, MarketCommentaryDateTime, MarketCommentaryDesc, IsCommentaryActive FROM MarketCommentary WHERE (MarketCommentaryId = @MarketCommentaryId)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@MarketCommentaryTitle", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MarketCommentaryTitle", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@MarketCommentaryDateTime", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MarketCommentaryDateTime", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@MarketCommentaryDesc", global::System.Data.SqlDbType.NText, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MarketCommentaryDesc", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsCommentaryActive", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IsCommentaryActive", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_MarketCommentaryId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MarketCommentaryId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_MarketCommentaryTitle", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MarketCommentaryTitle", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_MarketCommentaryDateTime", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MarketCommentaryDateTime", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_IsCommentaryActive", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IsCommentaryActive", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_IsCommentaryActive", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IsCommentaryActive", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@MarketCommentaryId", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "MarketCommentaryId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::DStreet.USAdvisory.Business.Properties.Settings.Default.USAdvisoryConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT MarketCommentaryId, MarketCommentaryTitle, MarketCommentaryDateTime, Marke" +
                "tCommentaryDesc, IsCommentaryActive FROM dbo.MarketCommentary";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(USAdvisoryDataSet.MarketCommentaryDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual USAdvisoryDataSet.MarketCommentaryDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            USAdvisoryDataSet.MarketCommentaryDataTable dataTable = new USAdvisoryDataSet.MarketCommentaryDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(USAdvisoryDataSet.MarketCommentaryDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(USAdvisoryDataSet dataSet) {
            return this.Adapter.Update(dataSet, "MarketCommentary");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_MarketCommentaryId, string Original_MarketCommentaryTitle, System.DateTime Original_MarketCommentaryDateTime, global::System.Nullable<bool> Original_IsCommentaryActive) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_MarketCommentaryId));
            if ((Original_MarketCommentaryTitle == null)) {
                throw new global::System.ArgumentNullException("Original_MarketCommentaryTitle");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_MarketCommentaryTitle));
            }
            this.Adapter.DeleteCommand.Parameters[2].Value = ((System.DateTime)(Original_MarketCommentaryDateTime));
            if ((Original_IsCommentaryActive.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[4].Value = ((bool)(Original_IsCommentaryActive.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string MarketCommentaryTitle, System.DateTime MarketCommentaryDateTime, string MarketCommentaryDesc, global::System.Nullable<bool> IsCommentaryActive) {
            if ((MarketCommentaryTitle == null)) {
                throw new global::System.ArgumentNullException("MarketCommentaryTitle");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(MarketCommentaryTitle));
            }
            this.Adapter.InsertCommand.Parameters[1].Value = ((System.DateTime)(MarketCommentaryDateTime));
            if ((MarketCommentaryDesc == null)) {
                throw new global::System.ArgumentNullException("MarketCommentaryDesc");
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(MarketCommentaryDesc));
            }
            if ((IsCommentaryActive.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[3].Value = ((bool)(IsCommentaryActive.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string MarketCommentaryTitle, System.DateTime MarketCommentaryDateTime, string MarketCommentaryDesc, global::System.Nullable<bool> IsCommentaryActive, int Original_MarketCommentaryId, string Original_MarketCommentaryTitle, System.DateTime Original_MarketCommentaryDateTime, global::System.Nullable<bool> Original_IsCommentaryActive, int MarketCommentaryId) {
            if ((MarketCommentaryTitle == null)) {
                throw new global::System.ArgumentNullException("MarketCommentaryTitle");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(MarketCommentaryTitle));
            }
            this.Adapter.UpdateCommand.Parameters[1].Value = ((System.DateTime)(MarketCommentaryDateTime));
            if ((MarketCommentaryDesc == null)) {
                throw new global::System.ArgumentNullException("MarketCommentaryDesc");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(MarketCommentaryDesc));
            }
            if ((IsCommentaryActive.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((bool)(IsCommentaryActive.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[4].Value = ((int)(Original_MarketCommentaryId));
            if ((Original_MarketCommentaryTitle == null)) {
                throw new global::System.ArgumentNullException("Original_MarketCommentaryTitle");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(Original_MarketCommentaryTitle));
            }
            this.Adapter.UpdateCommand.Parameters[6].Value = ((System.DateTime)(Original_MarketCommentaryDateTime));
            if ((Original_IsCommentaryActive.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[8].Value = ((bool)(Original_IsCommentaryActive.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[9].Value = ((int)(MarketCommentaryId));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string MarketCommentaryTitle, System.DateTime MarketCommentaryDateTime, string MarketCommentaryDesc, global::System.Nullable<bool> IsCommentaryActive, int Original_MarketCommentaryId, string Original_MarketCommentaryTitle, System.DateTime Original_MarketCommentaryDateTime, global::System.Nullable<bool> Original_IsCommentaryActive) {
            return this.Update(MarketCommentaryTitle, MarketCommentaryDateTime, MarketCommentaryDesc, IsCommentaryActive, Original_MarketCommentaryId, Original_MarketCommentaryTitle, Original_MarketCommentaryDateTime, Original_IsCommentaryActive, Original_MarketCommentaryId);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class NewsAndViewsTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public NewsAndViewsTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "NewsAndViews";
            tableMapping.ColumnMappings.Add("NewsId", "NewsId");
            tableMapping.ColumnMappings.Add("NewsTitle", "NewsTitle");
            tableMapping.ColumnMappings.Add("NewsDateTime", "NewsDateTime");
            tableMapping.ColumnMappings.Add("NewsDescription", "NewsDescription");
            tableMapping.ColumnMappings.Add("IsActive", "IsActive");
            tableMapping.ColumnMappings.Add("IsPaid", "IsPaid");
            tableMapping.ColumnMappings.Add("Ticker", "Ticker");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [dbo].[NewsAndViews] WHERE (([NewsId] = @Original_NewsId) AND ([NewsTitle] = @Original_NewsTitle) AND ([NewsDateTime] = @Original_NewsDateTime) AND ([IsActive] = @Original_IsActive) AND ([IsPaid] = @Original_IsPaid) AND ([Ticker] = @Original_Ticker))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_NewsId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "NewsId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_NewsTitle", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "NewsTitle", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_NewsDateTime", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "NewsDateTime", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_IsActive", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IsActive", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_IsPaid", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IsPaid", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Ticker", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Ticker", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[NewsAndViews] ([NewsTitle], [NewsDateTime], [NewsDescription], [IsActive], [IsPaid], [Ticker]) VALUES (@NewsTitle, @NewsDateTime, @NewsDescription, @IsActive, @IsPaid, @Ticker);
SELECT NewsId, NewsTitle, NewsDateTime, NewsDescription, IsActive, IsPaid, Ticker FROM NewsAndViews WHERE (NewsId = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@NewsTitle", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "NewsTitle", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@NewsDateTime", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "NewsDateTime", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@NewsDescription", global::System.Data.SqlDbType.NText, 0, global::System.Data.ParameterDirection.Input, 0, 0, "NewsDescription", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsActive", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IsActive", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsPaid", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IsPaid", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Ticker", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Ticker", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[NewsAndViews] SET [NewsTitle] = @NewsTitle, [NewsDateTime] = @NewsDateTime, [NewsDescription] = @NewsDescription, [IsActive] = @IsActive, [IsPaid] = @IsPaid, [Ticker] = @Ticker WHERE (([NewsId] = @Original_NewsId) AND ([NewsTitle] = @Original_NewsTitle) AND ([NewsDateTime] = @Original_NewsDateTime) AND ([IsActive] = @Original_IsActive) AND ([IsPaid] = @Original_IsPaid) AND ([Ticker] = @Original_Ticker));
SELECT NewsId, NewsTitle, NewsDateTime, NewsDescription, IsActive, IsPaid, Ticker FROM NewsAndViews WHERE (NewsId = @NewsId)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@NewsTitle", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "NewsTitle", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@NewsDateTime", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "NewsDateTime", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@NewsDescription", global::System.Data.SqlDbType.NText, 0, global::System.Data.ParameterDirection.Input, 0, 0, "NewsDescription", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsActive", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IsActive", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsPaid", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IsPaid", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Ticker", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Ticker", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_NewsId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "NewsId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_NewsTitle", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "NewsTitle", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_NewsDateTime", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "NewsDateTime", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_IsActive", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IsActive", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_IsPaid", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IsPaid", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Ticker", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Ticker", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@NewsId", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "NewsId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::DStreet.USAdvisory.Business.Properties.Settings.Default.USAdvisoryConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT NewsId, NewsTitle, NewsDateTime, NewsDescription, IsActive, IsPaid, Ticker" +
                " FROM dbo.NewsAndViews";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(USAdvisoryDataSet.NewsAndViewsDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual USAdvisoryDataSet.NewsAndViewsDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            USAdvisoryDataSet.NewsAndViewsDataTable dataTable = new USAdvisoryDataSet.NewsAndViewsDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(USAdvisoryDataSet.NewsAndViewsDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(USAdvisoryDataSet dataSet) {
            return this.Adapter.Update(dataSet, "NewsAndViews");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_NewsId, string Original_NewsTitle, System.DateTime Original_NewsDateTime, bool Original_IsActive, bool Original_IsPaid, string Original_Ticker) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_NewsId));
            if ((Original_NewsTitle == null)) {
                throw new global::System.ArgumentNullException("Original_NewsTitle");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_NewsTitle));
            }
            this.Adapter.DeleteCommand.Parameters[2].Value = ((System.DateTime)(Original_NewsDateTime));
            this.Adapter.DeleteCommand.Parameters[3].Value = ((bool)(Original_IsActive));
            this.Adapter.DeleteCommand.Parameters[4].Value = ((bool)(Original_IsPaid));
            if ((Original_Ticker == null)) {
                throw new global::System.ArgumentNullException("Original_Ticker");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((string)(Original_Ticker));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string NewsTitle, System.DateTime NewsDateTime, string NewsDescription, bool IsActive, bool IsPaid, string Ticker) {
            if ((NewsTitle == null)) {
                throw new global::System.ArgumentNullException("NewsTitle");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(NewsTitle));
            }
            this.Adapter.InsertCommand.Parameters[1].Value = ((System.DateTime)(NewsDateTime));
            if ((NewsDescription == null)) {
                throw new global::System.ArgumentNullException("NewsDescription");
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(NewsDescription));
            }
            this.Adapter.InsertCommand.Parameters[3].Value = ((bool)(IsActive));
            this.Adapter.InsertCommand.Parameters[4].Value = ((bool)(IsPaid));
            if ((Ticker == null)) {
                throw new global::System.ArgumentNullException("Ticker");
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = ((string)(Ticker));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string NewsTitle, System.DateTime NewsDateTime, string NewsDescription, bool IsActive, bool IsPaid, string Ticker, int Original_NewsId, string Original_NewsTitle, System.DateTime Original_NewsDateTime, bool Original_IsActive, bool Original_IsPaid, string Original_Ticker, int NewsId) {
            if ((NewsTitle == null)) {
                throw new global::System.ArgumentNullException("NewsTitle");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(NewsTitle));
            }
            this.Adapter.UpdateCommand.Parameters[1].Value = ((System.DateTime)(NewsDateTime));
            if ((NewsDescription == null)) {
                throw new global::System.ArgumentNullException("NewsDescription");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(NewsDescription));
            }
            this.Adapter.UpdateCommand.Parameters[3].Value = ((bool)(IsActive));
            this.Adapter.UpdateCommand.Parameters[4].Value = ((bool)(IsPaid));
            if ((Ticker == null)) {
                throw new global::System.ArgumentNullException("Ticker");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(Ticker));
            }
            this.Adapter.UpdateCommand.Parameters[6].Value = ((int)(Original_NewsId));
            if ((Original_NewsTitle == null)) {
                throw new global::System.ArgumentNullException("Original_NewsTitle");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((string)(Original_NewsTitle));
            }
            this.Adapter.UpdateCommand.Parameters[8].Value = ((System.DateTime)(Original_NewsDateTime));
            this.Adapter.UpdateCommand.Parameters[9].Value = ((bool)(Original_IsActive));
            this.Adapter.UpdateCommand.Parameters[10].Value = ((bool)(Original_IsPaid));
            if ((Original_Ticker == null)) {
                throw new global::System.ArgumentNullException("Original_Ticker");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((string)(Original_Ticker));
            }
            this.Adapter.UpdateCommand.Parameters[12].Value = ((int)(NewsId));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string NewsTitle, System.DateTime NewsDateTime, string NewsDescription, bool IsActive, bool IsPaid, string Ticker, int Original_NewsId, string Original_NewsTitle, System.DateTime Original_NewsDateTime, bool Original_IsActive, bool Original_IsPaid, string Original_Ticker) {
            return this.Update(NewsTitle, NewsDateTime, NewsDescription, IsActive, IsPaid, Ticker, Original_NewsId, Original_NewsTitle, Original_NewsDateTime, Original_IsActive, Original_IsPaid, Original_Ticker, Original_NewsId);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class OrdersTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public OrdersTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Orders";
            tableMapping.ColumnMappings.Add("OrderId", "OrderId");
            tableMapping.ColumnMappings.Add("UniqueOrderId", "UniqueOrderId");
            tableMapping.ColumnMappings.Add("UserId", "UserId");
            tableMapping.ColumnMappings.Add("MonthsOfSubscriptionId", "MonthsOfSubscriptionId");
            tableMapping.ColumnMappings.Add("PaymentDate", "PaymentDate");
            tableMapping.ColumnMappings.Add("VendorReferenceId", "VendorReferenceId");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [dbo].[Orders] WHERE (([OrderId] = @Original_OrderId) AND ([UniqueOrderId] = @Original_UniqueOrderId) AND ([UserId] = @Original_UserId) AND ([MonthsOfSubscriptionId] = @Original_MonthsOfSubscriptionId) AND ([PaymentDate] = @Original_PaymentDate) AND ((@IsNull_VendorReferenceId = 1 AND [VendorReferenceId] IS NULL) OR ([VendorReferenceId] = @Original_VendorReferenceId)))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_OrderId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OrderId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_UniqueOrderId", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "UniqueOrderId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_UserId", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "UserId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_MonthsOfSubscriptionId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MonthsOfSubscriptionId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_PaymentDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PaymentDate", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_VendorReferenceId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "VendorReferenceId", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_VendorReferenceId", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "VendorReferenceId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[Orders] ([UniqueOrderId], [UserId], [MonthsOfSubscriptionId], [PaymentDate], [VendorReferenceId]) VALUES (@UniqueOrderId, @UserId, @MonthsOfSubscriptionId, @PaymentDate, @VendorReferenceId);
SELECT OrderId, UniqueOrderId, UserId, MonthsOfSubscriptionId, PaymentDate, VendorReferenceId FROM Orders WHERE (OrderId = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@UniqueOrderId", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "UniqueOrderId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@UserId", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "UserId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@MonthsOfSubscriptionId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MonthsOfSubscriptionId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PaymentDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PaymentDate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@VendorReferenceId", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "VendorReferenceId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[Orders] SET [UniqueOrderId] = @UniqueOrderId, [UserId] = @UserId, [MonthsOfSubscriptionId] = @MonthsOfSubscriptionId, [PaymentDate] = @PaymentDate, [VendorReferenceId] = @VendorReferenceId WHERE (([OrderId] = @Original_OrderId) AND ([UniqueOrderId] = @Original_UniqueOrderId) AND ([UserId] = @Original_UserId) AND ([MonthsOfSubscriptionId] = @Original_MonthsOfSubscriptionId) AND ([PaymentDate] = @Original_PaymentDate) AND ((@IsNull_VendorReferenceId = 1 AND [VendorReferenceId] IS NULL) OR ([VendorReferenceId] = @Original_VendorReferenceId)));
SELECT OrderId, UniqueOrderId, UserId, MonthsOfSubscriptionId, PaymentDate, VendorReferenceId FROM Orders WHERE (OrderId = @OrderId)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@UniqueOrderId", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "UniqueOrderId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@UserId", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "UserId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@MonthsOfSubscriptionId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MonthsOfSubscriptionId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PaymentDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PaymentDate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@VendorReferenceId", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "VendorReferenceId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_OrderId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OrderId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_UniqueOrderId", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "UniqueOrderId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_UserId", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "UserId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_MonthsOfSubscriptionId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MonthsOfSubscriptionId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_PaymentDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PaymentDate", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_VendorReferenceId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "VendorReferenceId", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_VendorReferenceId", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "VendorReferenceId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@OrderId", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "OrderId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::DStreet.USAdvisory.Business.Properties.Settings.Default.USAdvisoryConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT OrderId, UniqueOrderId, UserId, MonthsOfSubscriptionId, PaymentDate, Vendo" +
                "rReferenceId FROM dbo.Orders";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(USAdvisoryDataSet.OrdersDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual USAdvisoryDataSet.OrdersDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            USAdvisoryDataSet.OrdersDataTable dataTable = new USAdvisoryDataSet.OrdersDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(USAdvisoryDataSet.OrdersDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(USAdvisoryDataSet dataSet) {
            return this.Adapter.Update(dataSet, "Orders");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_OrderId, string Original_UniqueOrderId, string Original_UserId, int Original_MonthsOfSubscriptionId, System.DateTime Original_PaymentDate, string Original_VendorReferenceId) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_OrderId));
            if ((Original_UniqueOrderId == null)) {
                throw new global::System.ArgumentNullException("Original_UniqueOrderId");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_UniqueOrderId));
            }
            if ((Original_UserId == null)) {
                throw new global::System.ArgumentNullException("Original_UserId");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_UserId));
            }
            this.Adapter.DeleteCommand.Parameters[3].Value = ((int)(Original_MonthsOfSubscriptionId));
            this.Adapter.DeleteCommand.Parameters[4].Value = ((System.DateTime)(Original_PaymentDate));
            if ((Original_VendorReferenceId == null)) {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[6].Value = ((string)(Original_VendorReferenceId));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string UniqueOrderId, string UserId, int MonthsOfSubscriptionId, System.DateTime PaymentDate, string VendorReferenceId) {
            if ((UniqueOrderId == null)) {
                throw new global::System.ArgumentNullException("UniqueOrderId");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(UniqueOrderId));
            }
            if ((UserId == null)) {
                throw new global::System.ArgumentNullException("UserId");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(UserId));
            }
            this.Adapter.InsertCommand.Parameters[2].Value = ((int)(MonthsOfSubscriptionId));
            this.Adapter.InsertCommand.Parameters[3].Value = ((System.DateTime)(PaymentDate));
            if ((VendorReferenceId == null)) {
                this.Adapter.InsertCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(VendorReferenceId));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string UniqueOrderId, string UserId, int MonthsOfSubscriptionId, System.DateTime PaymentDate, string VendorReferenceId, int Original_OrderId, string Original_UniqueOrderId, string Original_UserId, int Original_MonthsOfSubscriptionId, System.DateTime Original_PaymentDate, string Original_VendorReferenceId, int OrderId) {
            if ((UniqueOrderId == null)) {
                throw new global::System.ArgumentNullException("UniqueOrderId");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(UniqueOrderId));
            }
            if ((UserId == null)) {
                throw new global::System.ArgumentNullException("UserId");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(UserId));
            }
            this.Adapter.UpdateCommand.Parameters[2].Value = ((int)(MonthsOfSubscriptionId));
            this.Adapter.UpdateCommand.Parameters[3].Value = ((System.DateTime)(PaymentDate));
            if ((VendorReferenceId == null)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(VendorReferenceId));
            }
            this.Adapter.UpdateCommand.Parameters[5].Value = ((int)(Original_OrderId));
            if ((Original_UniqueOrderId == null)) {
                throw new global::System.ArgumentNullException("Original_UniqueOrderId");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(Original_UniqueOrderId));
            }
            if ((Original_UserId == null)) {
                throw new global::System.ArgumentNullException("Original_UserId");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((string)(Original_UserId));
            }
            this.Adapter.UpdateCommand.Parameters[8].Value = ((int)(Original_MonthsOfSubscriptionId));
            this.Adapter.UpdateCommand.Parameters[9].Value = ((System.DateTime)(Original_PaymentDate));
            if ((Original_VendorReferenceId == null)) {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[11].Value = ((string)(Original_VendorReferenceId));
            }
            this.Adapter.UpdateCommand.Parameters[12].Value = ((int)(OrderId));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string UniqueOrderId, string UserId, int MonthsOfSubscriptionId, System.DateTime PaymentDate, string VendorReferenceId, int Original_OrderId, string Original_UniqueOrderId, string Original_UserId, int Original_MonthsOfSubscriptionId, System.DateTime Original_PaymentDate, string Original_VendorReferenceId) {
            return this.Update(UniqueOrderId, UserId, MonthsOfSubscriptionId, PaymentDate, VendorReferenceId, Original_OrderId, Original_UniqueOrderId, Original_UserId, Original_MonthsOfSubscriptionId, Original_PaymentDate, Original_VendorReferenceId, Original_OrderId);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class PortfolioLookUpTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public PortfolioLookUpTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "PortfolioLookUp";
            tableMapping.ColumnMappings.Add("PortfolioId", "PortfolioId");
            tableMapping.ColumnMappings.Add("PortfolioName", "PortfolioName");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[PortfolioLookUp] WHERE (([PortfolioId] = @Original_PortfolioId" +
                ") AND ([PortfolioName] = @Original_PortfolioName))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_PortfolioId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PortfolioId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_PortfolioName", global::System.Data.SqlDbType.Char, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PortfolioName", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[PortfolioLookUp] ([PortfolioName]) VALUES (@PortfolioName);\r\nS" +
                "ELECT PortfolioId, PortfolioName FROM PortfolioLookUp WHERE (PortfolioId = SCOPE" +
                "_IDENTITY())";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PortfolioName", global::System.Data.SqlDbType.Char, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PortfolioName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[PortfolioLookUp] SET [PortfolioName] = @PortfolioName WHERE (([Port" +
                "folioId] = @Original_PortfolioId) AND ([PortfolioName] = @Original_PortfolioName" +
                "));\r\nSELECT PortfolioId, PortfolioName FROM PortfolioLookUp WHERE (PortfolioId =" +
                " @PortfolioId)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PortfolioName", global::System.Data.SqlDbType.Char, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PortfolioName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_PortfolioId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PortfolioId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_PortfolioName", global::System.Data.SqlDbType.Char, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PortfolioName", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PortfolioId", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "PortfolioId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::DStreet.USAdvisory.Business.Properties.Settings.Default.USAdvisoryConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT PortfolioId, PortfolioName FROM dbo.PortfolioLookUp";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(USAdvisoryDataSet.PortfolioLookUpDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual USAdvisoryDataSet.PortfolioLookUpDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            USAdvisoryDataSet.PortfolioLookUpDataTable dataTable = new USAdvisoryDataSet.PortfolioLookUpDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(USAdvisoryDataSet.PortfolioLookUpDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(USAdvisoryDataSet dataSet) {
            return this.Adapter.Update(dataSet, "PortfolioLookUp");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_PortfolioId, string Original_PortfolioName) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_PortfolioId));
            if ((Original_PortfolioName == null)) {
                throw new global::System.ArgumentNullException("Original_PortfolioName");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_PortfolioName));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string PortfolioName) {
            if ((PortfolioName == null)) {
                throw new global::System.ArgumentNullException("PortfolioName");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(PortfolioName));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string PortfolioName, int Original_PortfolioId, string Original_PortfolioName, int PortfolioId) {
            if ((PortfolioName == null)) {
                throw new global::System.ArgumentNullException("PortfolioName");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(PortfolioName));
            }
            this.Adapter.UpdateCommand.Parameters[1].Value = ((int)(Original_PortfolioId));
            if ((Original_PortfolioName == null)) {
                throw new global::System.ArgumentNullException("Original_PortfolioName");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(Original_PortfolioName));
            }
            this.Adapter.UpdateCommand.Parameters[3].Value = ((int)(PortfolioId));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string PortfolioName, int Original_PortfolioId, string Original_PortfolioName) {
            return this.Update(PortfolioName, Original_PortfolioId, Original_PortfolioName, Original_PortfolioId);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class PortfolioTransactionsTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public PortfolioTransactionsTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "PortfolioTransactions";
            tableMapping.ColumnMappings.Add("StockTransactionId", "StockTransactionId");
            tableMapping.ColumnMappings.Add("PortfolioId", "PortfolioId");
            tableMapping.ColumnMappings.Add("CompanyName", "CompanyName");
            tableMapping.ColumnMappings.Add("StockTicker", "StockTicker");
            tableMapping.ColumnMappings.Add("BuyOrSellId", "BuyOrSellId");
            tableMapping.ColumnMappings.Add("EntryPrice", "EntryPrice");
            tableMapping.ColumnMappings.Add("ExitPrice", "ExitPrice");
            tableMapping.ColumnMappings.Add("StopLoss", "StopLoss");
            tableMapping.ColumnMappings.Add("Updates", "Updates");
            tableMapping.ColumnMappings.Add("UpdateDateTime", "UpdateDateTime");
            tableMapping.ColumnMappings.Add("PortfolioEntryDate", "PortfolioEntryDate");
            tableMapping.ColumnMappings.Add("CallStatus", "CallStatus");
            tableMapping.ColumnMappings.Add("PortfolioExitDate", "PortfolioExitDate");
            tableMapping.ColumnMappings.Add("IsPartiallyExited", "IsPartiallyExited");
            tableMapping.ColumnMappings.Add("Qty", "Qty");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [dbo].[PortfolioTransactions] WHERE (([StockTransactionId] = @Original_StockTransactionId) AND ([PortfolioId] = @Original_PortfolioId) AND ([CompanyName] = @Original_CompanyName) AND ([StockTicker] = @Original_StockTicker) AND ([BuyOrSellId] = @Original_BuyOrSellId) AND ([EntryPrice] = @Original_EntryPrice) AND ([ExitPrice] = @Original_ExitPrice) AND ([StopLoss] = @Original_StopLoss) AND ([UpdateDateTime] = @Original_UpdateDateTime) AND ([PortfolioEntryDate] = @Original_PortfolioEntryDate) AND ([CallStatus] = @Original_CallStatus) AND ((@IsNull_PortfolioExitDate = 1 AND [PortfolioExitDate] IS NULL) OR ([PortfolioExitDate] = @Original_PortfolioExitDate)) AND ([IsPartiallyExited] = @Original_IsPartiallyExited) AND ([Qty] = @Original_Qty))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_StockTransactionId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "StockTransactionId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_PortfolioId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PortfolioId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CompanyName", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CompanyName", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_StockTicker", global::System.Data.SqlDbType.Char, 0, global::System.Data.ParameterDirection.Input, 0, 0, "StockTicker", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_BuyOrSellId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "BuyOrSellId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_EntryPrice", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 2, "EntryPrice", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ExitPrice", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 2, "ExitPrice", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_StopLoss", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 2, "StopLoss", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_UpdateDateTime", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "UpdateDateTime", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_PortfolioEntryDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PortfolioEntryDate", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CallStatus", global::System.Data.SqlDbType.Char, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CallStatus", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_PortfolioExitDate", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PortfolioExitDate", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_PortfolioExitDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PortfolioExitDate", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_IsPartiallyExited", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IsPartiallyExited", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Qty", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Qty", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[PortfolioTransactions] ([PortfolioId], [CompanyName], [StockTicker], [BuyOrSellId], [EntryPrice], [ExitPrice], [StopLoss], [Updates], [UpdateDateTime], [PortfolioEntryDate], [CallStatus], [PortfolioExitDate], [IsPartiallyExited], [Qty]) VALUES (@PortfolioId, @CompanyName, @StockTicker, @BuyOrSellId, @EntryPrice, @ExitPrice, @StopLoss, @Updates, @UpdateDateTime, @PortfolioEntryDate, @CallStatus, @PortfolioExitDate, @IsPartiallyExited, @Qty);
SELECT StockTransactionId, PortfolioId, CompanyName, StockTicker, BuyOrSellId, EntryPrice, ExitPrice, StopLoss, Updates, UpdateDateTime, PortfolioEntryDate, CallStatus, PortfolioExitDate, IsPartiallyExited, Qty FROM PortfolioTransactions WHERE (StockTransactionId = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PortfolioId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PortfolioId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CompanyName", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CompanyName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@StockTicker", global::System.Data.SqlDbType.Char, 0, global::System.Data.ParameterDirection.Input, 0, 0, "StockTicker", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@BuyOrSellId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "BuyOrSellId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@EntryPrice", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 2, "EntryPrice", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ExitPrice", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 2, "ExitPrice", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@StopLoss", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 2, "StopLoss", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Updates", global::System.Data.SqlDbType.NText, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Updates", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@UpdateDateTime", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "UpdateDateTime", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PortfolioEntryDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PortfolioEntryDate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CallStatus", global::System.Data.SqlDbType.Char, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CallStatus", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PortfolioExitDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PortfolioExitDate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsPartiallyExited", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IsPartiallyExited", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Qty", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Qty", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[PortfolioTransactions] SET [PortfolioId] = @PortfolioId, [CompanyName] = @CompanyName, [StockTicker] = @StockTicker, [BuyOrSellId] = @BuyOrSellId, [EntryPrice] = @EntryPrice, [ExitPrice] = @ExitPrice, [StopLoss] = @StopLoss, [Updates] = @Updates, [UpdateDateTime] = @UpdateDateTime, [PortfolioEntryDate] = @PortfolioEntryDate, [CallStatus] = @CallStatus, [PortfolioExitDate] = @PortfolioExitDate, [IsPartiallyExited] = @IsPartiallyExited, [Qty] = @Qty WHERE (([StockTransactionId] = @Original_StockTransactionId) AND ([PortfolioId] = @Original_PortfolioId) AND ([CompanyName] = @Original_CompanyName) AND ([StockTicker] = @Original_StockTicker) AND ([BuyOrSellId] = @Original_BuyOrSellId) AND ([EntryPrice] = @Original_EntryPrice) AND ([ExitPrice] = @Original_ExitPrice) AND ([StopLoss] = @Original_StopLoss) AND ([UpdateDateTime] = @Original_UpdateDateTime) AND ([PortfolioEntryDate] = @Original_PortfolioEntryDate) AND ([CallStatus] = @Original_CallStatus) AND ((@IsNull_PortfolioExitDate = 1 AND [PortfolioExitDate] IS NULL) OR ([PortfolioExitDate] = @Original_PortfolioExitDate)) AND ([IsPartiallyExited] = @Original_IsPartiallyExited) AND ([Qty] = @Original_Qty));
SELECT StockTransactionId, PortfolioId, CompanyName, StockTicker, BuyOrSellId, EntryPrice, ExitPrice, StopLoss, Updates, UpdateDateTime, PortfolioEntryDate, CallStatus, PortfolioExitDate, IsPartiallyExited, Qty FROM PortfolioTransactions WHERE (StockTransactionId = @StockTransactionId)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PortfolioId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PortfolioId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CompanyName", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CompanyName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@StockTicker", global::System.Data.SqlDbType.Char, 0, global::System.Data.ParameterDirection.Input, 0, 0, "StockTicker", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@BuyOrSellId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "BuyOrSellId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@EntryPrice", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 2, "EntryPrice", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ExitPrice", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 2, "ExitPrice", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@StopLoss", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 2, "StopLoss", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Updates", global::System.Data.SqlDbType.NText, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Updates", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@UpdateDateTime", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "UpdateDateTime", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PortfolioEntryDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PortfolioEntryDate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CallStatus", global::System.Data.SqlDbType.Char, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CallStatus", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PortfolioExitDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PortfolioExitDate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsPartiallyExited", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IsPartiallyExited", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Qty", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Qty", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_StockTransactionId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "StockTransactionId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_PortfolioId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PortfolioId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CompanyName", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CompanyName", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_StockTicker", global::System.Data.SqlDbType.Char, 0, global::System.Data.ParameterDirection.Input, 0, 0, "StockTicker", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_BuyOrSellId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "BuyOrSellId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_EntryPrice", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 2, "EntryPrice", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ExitPrice", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 2, "ExitPrice", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_StopLoss", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 2, "StopLoss", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_UpdateDateTime", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "UpdateDateTime", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_PortfolioEntryDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PortfolioEntryDate", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CallStatus", global::System.Data.SqlDbType.Char, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CallStatus", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_PortfolioExitDate", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PortfolioExitDate", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_PortfolioExitDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PortfolioExitDate", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_IsPartiallyExited", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IsPartiallyExited", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Qty", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Qty", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@StockTransactionId", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "StockTransactionId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::DStreet.USAdvisory.Business.Properties.Settings.Default.USAdvisoryConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT StockTransactionId, PortfolioId, CompanyName, StockTicker, BuyOrSellId, En" +
                "tryPrice, ExitPrice, StopLoss, Updates, UpdateDateTime, PortfolioEntryDate, Call" +
                "Status, PortfolioExitDate, IsPartiallyExited, Qty FROM dbo.PortfolioTransactions" +
                "";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(USAdvisoryDataSet.PortfolioTransactionsDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual USAdvisoryDataSet.PortfolioTransactionsDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            USAdvisoryDataSet.PortfolioTransactionsDataTable dataTable = new USAdvisoryDataSet.PortfolioTransactionsDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(USAdvisoryDataSet.PortfolioTransactionsDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(USAdvisoryDataSet dataSet) {
            return this.Adapter.Update(dataSet, "PortfolioTransactions");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_StockTransactionId, int Original_PortfolioId, string Original_CompanyName, string Original_StockTicker, int Original_BuyOrSellId, decimal Original_EntryPrice, decimal Original_ExitPrice, decimal Original_StopLoss, System.DateTime Original_UpdateDateTime, System.DateTime Original_PortfolioEntryDate, string Original_CallStatus, global::System.Nullable<global::System.DateTime> Original_PortfolioExitDate, bool Original_IsPartiallyExited, int Original_Qty) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_StockTransactionId));
            this.Adapter.DeleteCommand.Parameters[1].Value = ((int)(Original_PortfolioId));
            if ((Original_CompanyName == null)) {
                throw new global::System.ArgumentNullException("Original_CompanyName");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_CompanyName));
            }
            if ((Original_StockTicker == null)) {
                throw new global::System.ArgumentNullException("Original_StockTicker");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((string)(Original_StockTicker));
            }
            this.Adapter.DeleteCommand.Parameters[4].Value = ((int)(Original_BuyOrSellId));
            this.Adapter.DeleteCommand.Parameters[5].Value = ((decimal)(Original_EntryPrice));
            this.Adapter.DeleteCommand.Parameters[6].Value = ((decimal)(Original_ExitPrice));
            this.Adapter.DeleteCommand.Parameters[7].Value = ((decimal)(Original_StopLoss));
            this.Adapter.DeleteCommand.Parameters[8].Value = ((System.DateTime)(Original_UpdateDateTime));
            this.Adapter.DeleteCommand.Parameters[9].Value = ((System.DateTime)(Original_PortfolioEntryDate));
            if ((Original_CallStatus == null)) {
                throw new global::System.ArgumentNullException("Original_CallStatus");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[10].Value = ((string)(Original_CallStatus));
            }
            if ((Original_PortfolioExitDate.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[12].Value = ((System.DateTime)(Original_PortfolioExitDate.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            this.Adapter.DeleteCommand.Parameters[13].Value = ((bool)(Original_IsPartiallyExited));
            this.Adapter.DeleteCommand.Parameters[14].Value = ((int)(Original_Qty));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int PortfolioId, string CompanyName, string StockTicker, int BuyOrSellId, decimal EntryPrice, decimal ExitPrice, decimal StopLoss, string Updates, System.DateTime UpdateDateTime, System.DateTime PortfolioEntryDate, string CallStatus, global::System.Nullable<global::System.DateTime> PortfolioExitDate, bool IsPartiallyExited, int Qty) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(PortfolioId));
            if ((CompanyName == null)) {
                throw new global::System.ArgumentNullException("CompanyName");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(CompanyName));
            }
            if ((StockTicker == null)) {
                throw new global::System.ArgumentNullException("StockTicker");
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(StockTicker));
            }
            this.Adapter.InsertCommand.Parameters[3].Value = ((int)(BuyOrSellId));
            this.Adapter.InsertCommand.Parameters[4].Value = ((decimal)(EntryPrice));
            this.Adapter.InsertCommand.Parameters[5].Value = ((decimal)(ExitPrice));
            this.Adapter.InsertCommand.Parameters[6].Value = ((decimal)(StopLoss));
            if ((Updates == null)) {
                throw new global::System.ArgumentNullException("Updates");
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = ((string)(Updates));
            }
            this.Adapter.InsertCommand.Parameters[8].Value = ((System.DateTime)(UpdateDateTime));
            this.Adapter.InsertCommand.Parameters[9].Value = ((System.DateTime)(PortfolioEntryDate));
            if ((CallStatus == null)) {
                throw new global::System.ArgumentNullException("CallStatus");
            }
            else {
                this.Adapter.InsertCommand.Parameters[10].Value = ((string)(CallStatus));
            }
            if ((PortfolioExitDate.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[11].Value = ((System.DateTime)(PortfolioExitDate.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            this.Adapter.InsertCommand.Parameters[12].Value = ((bool)(IsPartiallyExited));
            this.Adapter.InsertCommand.Parameters[13].Value = ((int)(Qty));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    int PortfolioId, 
                    string CompanyName, 
                    string StockTicker, 
                    int BuyOrSellId, 
                    decimal EntryPrice, 
                    decimal ExitPrice, 
                    decimal StopLoss, 
                    string Updates, 
                    System.DateTime UpdateDateTime, 
                    System.DateTime PortfolioEntryDate, 
                    string CallStatus, 
                    global::System.Nullable<global::System.DateTime> PortfolioExitDate, 
                    bool IsPartiallyExited, 
                    int Qty, 
                    int Original_StockTransactionId, 
                    int Original_PortfolioId, 
                    string Original_CompanyName, 
                    string Original_StockTicker, 
                    int Original_BuyOrSellId, 
                    decimal Original_EntryPrice, 
                    decimal Original_ExitPrice, 
                    decimal Original_StopLoss, 
                    System.DateTime Original_UpdateDateTime, 
                    System.DateTime Original_PortfolioEntryDate, 
                    string Original_CallStatus, 
                    global::System.Nullable<global::System.DateTime> Original_PortfolioExitDate, 
                    bool Original_IsPartiallyExited, 
                    int Original_Qty, 
                    int StockTransactionId) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(PortfolioId));
            if ((CompanyName == null)) {
                throw new global::System.ArgumentNullException("CompanyName");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(CompanyName));
            }
            if ((StockTicker == null)) {
                throw new global::System.ArgumentNullException("StockTicker");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(StockTicker));
            }
            this.Adapter.UpdateCommand.Parameters[3].Value = ((int)(BuyOrSellId));
            this.Adapter.UpdateCommand.Parameters[4].Value = ((decimal)(EntryPrice));
            this.Adapter.UpdateCommand.Parameters[5].Value = ((decimal)(ExitPrice));
            this.Adapter.UpdateCommand.Parameters[6].Value = ((decimal)(StopLoss));
            if ((Updates == null)) {
                throw new global::System.ArgumentNullException("Updates");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((string)(Updates));
            }
            this.Adapter.UpdateCommand.Parameters[8].Value = ((System.DateTime)(UpdateDateTime));
            this.Adapter.UpdateCommand.Parameters[9].Value = ((System.DateTime)(PortfolioEntryDate));
            if ((CallStatus == null)) {
                throw new global::System.ArgumentNullException("CallStatus");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((string)(CallStatus));
            }
            if ((PortfolioExitDate.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((System.DateTime)(PortfolioExitDate.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[12].Value = ((bool)(IsPartiallyExited));
            this.Adapter.UpdateCommand.Parameters[13].Value = ((int)(Qty));
            this.Adapter.UpdateCommand.Parameters[14].Value = ((int)(Original_StockTransactionId));
            this.Adapter.UpdateCommand.Parameters[15].Value = ((int)(Original_PortfolioId));
            if ((Original_CompanyName == null)) {
                throw new global::System.ArgumentNullException("Original_CompanyName");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[16].Value = ((string)(Original_CompanyName));
            }
            if ((Original_StockTicker == null)) {
                throw new global::System.ArgumentNullException("Original_StockTicker");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[17].Value = ((string)(Original_StockTicker));
            }
            this.Adapter.UpdateCommand.Parameters[18].Value = ((int)(Original_BuyOrSellId));
            this.Adapter.UpdateCommand.Parameters[19].Value = ((decimal)(Original_EntryPrice));
            this.Adapter.UpdateCommand.Parameters[20].Value = ((decimal)(Original_ExitPrice));
            this.Adapter.UpdateCommand.Parameters[21].Value = ((decimal)(Original_StopLoss));
            this.Adapter.UpdateCommand.Parameters[22].Value = ((System.DateTime)(Original_UpdateDateTime));
            this.Adapter.UpdateCommand.Parameters[23].Value = ((System.DateTime)(Original_PortfolioEntryDate));
            if ((Original_CallStatus == null)) {
                throw new global::System.ArgumentNullException("Original_CallStatus");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[24].Value = ((string)(Original_CallStatus));
            }
            if ((Original_PortfolioExitDate.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[25].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[26].Value = ((System.DateTime)(Original_PortfolioExitDate.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[25].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[26].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[27].Value = ((bool)(Original_IsPartiallyExited));
            this.Adapter.UpdateCommand.Parameters[28].Value = ((int)(Original_Qty));
            this.Adapter.UpdateCommand.Parameters[29].Value = ((int)(StockTransactionId));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    int PortfolioId, 
                    string CompanyName, 
                    string StockTicker, 
                    int BuyOrSellId, 
                    decimal EntryPrice, 
                    decimal ExitPrice, 
                    decimal StopLoss, 
                    string Updates, 
                    System.DateTime UpdateDateTime, 
                    System.DateTime PortfolioEntryDate, 
                    string CallStatus, 
                    global::System.Nullable<global::System.DateTime> PortfolioExitDate, 
                    bool IsPartiallyExited, 
                    int Qty, 
                    int Original_StockTransactionId, 
                    int Original_PortfolioId, 
                    string Original_CompanyName, 
                    string Original_StockTicker, 
                    int Original_BuyOrSellId, 
                    decimal Original_EntryPrice, 
                    decimal Original_ExitPrice, 
                    decimal Original_StopLoss, 
                    System.DateTime Original_UpdateDateTime, 
                    System.DateTime Original_PortfolioEntryDate, 
                    string Original_CallStatus, 
                    global::System.Nullable<global::System.DateTime> Original_PortfolioExitDate, 
                    bool Original_IsPartiallyExited, 
                    int Original_Qty) {
            return this.Update(PortfolioId, CompanyName, StockTicker, BuyOrSellId, EntryPrice, ExitPrice, StopLoss, Updates, UpdateDateTime, PortfolioEntryDate, CallStatus, PortfolioExitDate, IsPartiallyExited, Qty, Original_StockTransactionId, Original_PortfolioId, Original_CompanyName, Original_StockTicker, Original_BuyOrSellId, Original_EntryPrice, Original_ExitPrice, Original_StopLoss, Original_UpdateDateTime, Original_PortfolioEntryDate, Original_CallStatus, Original_PortfolioExitDate, Original_IsPartiallyExited, Original_Qty, Original_StockTransactionId);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class PremiumServicesTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public PremiumServicesTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "PremiumServices";
            tableMapping.ColumnMappings.Add("PremiumServiceId", "PremiumServiceId");
            tableMapping.ColumnMappings.Add("Ticker", "Ticker");
            tableMapping.ColumnMappings.Add("PremiumServiceTitle", "PremiumServiceTitle");
            tableMapping.ColumnMappings.Add("PremiumServiceDescription", "PremiumServiceDescription");
            tableMapping.ColumnMappings.Add("IsActive", "IsActive");
            tableMapping.ColumnMappings.Add("IsPaid", "IsPaid");
            tableMapping.ColumnMappings.Add("TypeOfTradeId", "TypeOfTradeId");
            tableMapping.ColumnMappings.Add("PremiumServiceDate", "PremiumServiceDate");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [dbo].[PremiumServices] WHERE (([PremiumServiceId] = @Original_PremiumServiceId) AND ([Ticker] = @Original_Ticker) AND ([PremiumServiceTitle] = @Original_PremiumServiceTitle) AND ([IsActive] = @Original_IsActive) AND ([IsPaid] = @Original_IsPaid) AND ([TypeOfTradeId] = @Original_TypeOfTradeId) AND ([PremiumServiceDate] = @Original_PremiumServiceDate))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_PremiumServiceId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PremiumServiceId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Ticker", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Ticker", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_PremiumServiceTitle", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PremiumServiceTitle", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_IsActive", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IsActive", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_IsPaid", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IsPaid", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TypeOfTradeId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TypeOfTradeId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_PremiumServiceDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PremiumServiceDate", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[PremiumServices] ([Ticker], [PremiumServiceTitle], [PremiumServiceDescription], [IsActive], [IsPaid], [TypeOfTradeId], [PremiumServiceDate]) VALUES (@Ticker, @PremiumServiceTitle, @PremiumServiceDescription, @IsActive, @IsPaid, @TypeOfTradeId, @PremiumServiceDate);
SELECT PremiumServiceId, Ticker, PremiumServiceTitle, PremiumServiceDescription, IsActive, IsPaid, TypeOfTradeId, PremiumServiceDate FROM PremiumServices WHERE (PremiumServiceId = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Ticker", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Ticker", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PremiumServiceTitle", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PremiumServiceTitle", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PremiumServiceDescription", global::System.Data.SqlDbType.NText, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PremiumServiceDescription", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsActive", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IsActive", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsPaid", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IsPaid", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TypeOfTradeId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TypeOfTradeId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PremiumServiceDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PremiumServiceDate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[PremiumServices] SET [Ticker] = @Ticker, [PremiumServiceTitle] = @PremiumServiceTitle, [PremiumServiceDescription] = @PremiumServiceDescription, [IsActive] = @IsActive, [IsPaid] = @IsPaid, [TypeOfTradeId] = @TypeOfTradeId, [PremiumServiceDate] = @PremiumServiceDate WHERE (([PremiumServiceId] = @Original_PremiumServiceId) AND ([Ticker] = @Original_Ticker) AND ([PremiumServiceTitle] = @Original_PremiumServiceTitle) AND ([IsActive] = @Original_IsActive) AND ([IsPaid] = @Original_IsPaid) AND ([TypeOfTradeId] = @Original_TypeOfTradeId) AND ([PremiumServiceDate] = @Original_PremiumServiceDate));
SELECT PremiumServiceId, Ticker, PremiumServiceTitle, PremiumServiceDescription, IsActive, IsPaid, TypeOfTradeId, PremiumServiceDate FROM PremiumServices WHERE (PremiumServiceId = @PremiumServiceId)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Ticker", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Ticker", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PremiumServiceTitle", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PremiumServiceTitle", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PremiumServiceDescription", global::System.Data.SqlDbType.NText, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PremiumServiceDescription", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsActive", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IsActive", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsPaid", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IsPaid", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TypeOfTradeId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TypeOfTradeId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PremiumServiceDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PremiumServiceDate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_PremiumServiceId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PremiumServiceId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Ticker", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Ticker", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_PremiumServiceTitle", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PremiumServiceTitle", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_IsActive", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IsActive", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_IsPaid", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IsPaid", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TypeOfTradeId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TypeOfTradeId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_PremiumServiceDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PremiumServiceDate", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PremiumServiceId", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "PremiumServiceId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::DStreet.USAdvisory.Business.Properties.Settings.Default.USAdvisoryConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT PremiumServiceId, Ticker, PremiumServiceTitle, PremiumServiceDescription, " +
                "IsActive, IsPaid, TypeOfTradeId, PremiumServiceDate FROM dbo.PremiumServices";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(USAdvisoryDataSet.PremiumServicesDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual USAdvisoryDataSet.PremiumServicesDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            USAdvisoryDataSet.PremiumServicesDataTable dataTable = new USAdvisoryDataSet.PremiumServicesDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(USAdvisoryDataSet.PremiumServicesDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(USAdvisoryDataSet dataSet) {
            return this.Adapter.Update(dataSet, "PremiumServices");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_PremiumServiceId, string Original_Ticker, string Original_PremiumServiceTitle, bool Original_IsActive, bool Original_IsPaid, int Original_TypeOfTradeId, System.DateTime Original_PremiumServiceDate) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_PremiumServiceId));
            if ((Original_Ticker == null)) {
                throw new global::System.ArgumentNullException("Original_Ticker");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_Ticker));
            }
            if ((Original_PremiumServiceTitle == null)) {
                throw new global::System.ArgumentNullException("Original_PremiumServiceTitle");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_PremiumServiceTitle));
            }
            this.Adapter.DeleteCommand.Parameters[3].Value = ((bool)(Original_IsActive));
            this.Adapter.DeleteCommand.Parameters[4].Value = ((bool)(Original_IsPaid));
            this.Adapter.DeleteCommand.Parameters[5].Value = ((int)(Original_TypeOfTradeId));
            this.Adapter.DeleteCommand.Parameters[6].Value = ((System.DateTime)(Original_PremiumServiceDate));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string Ticker, string PremiumServiceTitle, string PremiumServiceDescription, bool IsActive, bool IsPaid, int TypeOfTradeId, System.DateTime PremiumServiceDate) {
            if ((Ticker == null)) {
                throw new global::System.ArgumentNullException("Ticker");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(Ticker));
            }
            if ((PremiumServiceTitle == null)) {
                throw new global::System.ArgumentNullException("PremiumServiceTitle");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(PremiumServiceTitle));
            }
            if ((PremiumServiceDescription == null)) {
                throw new global::System.ArgumentNullException("PremiumServiceDescription");
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(PremiumServiceDescription));
            }
            this.Adapter.InsertCommand.Parameters[3].Value = ((bool)(IsActive));
            this.Adapter.InsertCommand.Parameters[4].Value = ((bool)(IsPaid));
            this.Adapter.InsertCommand.Parameters[5].Value = ((int)(TypeOfTradeId));
            this.Adapter.InsertCommand.Parameters[6].Value = ((System.DateTime)(PremiumServiceDate));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string Ticker, string PremiumServiceTitle, string PremiumServiceDescription, bool IsActive, bool IsPaid, int TypeOfTradeId, System.DateTime PremiumServiceDate, int Original_PremiumServiceId, string Original_Ticker, string Original_PremiumServiceTitle, bool Original_IsActive, bool Original_IsPaid, int Original_TypeOfTradeId, System.DateTime Original_PremiumServiceDate, int PremiumServiceId) {
            if ((Ticker == null)) {
                throw new global::System.ArgumentNullException("Ticker");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(Ticker));
            }
            if ((PremiumServiceTitle == null)) {
                throw new global::System.ArgumentNullException("PremiumServiceTitle");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(PremiumServiceTitle));
            }
            if ((PremiumServiceDescription == null)) {
                throw new global::System.ArgumentNullException("PremiumServiceDescription");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(PremiumServiceDescription));
            }
            this.Adapter.UpdateCommand.Parameters[3].Value = ((bool)(IsActive));
            this.Adapter.UpdateCommand.Parameters[4].Value = ((bool)(IsPaid));
            this.Adapter.UpdateCommand.Parameters[5].Value = ((int)(TypeOfTradeId));
            this.Adapter.UpdateCommand.Parameters[6].Value = ((System.DateTime)(PremiumServiceDate));
            this.Adapter.UpdateCommand.Parameters[7].Value = ((int)(Original_PremiumServiceId));
            if ((Original_Ticker == null)) {
                throw new global::System.ArgumentNullException("Original_Ticker");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((string)(Original_Ticker));
            }
            if ((Original_PremiumServiceTitle == null)) {
                throw new global::System.ArgumentNullException("Original_PremiumServiceTitle");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((string)(Original_PremiumServiceTitle));
            }
            this.Adapter.UpdateCommand.Parameters[10].Value = ((bool)(Original_IsActive));
            this.Adapter.UpdateCommand.Parameters[11].Value = ((bool)(Original_IsPaid));
            this.Adapter.UpdateCommand.Parameters[12].Value = ((int)(Original_TypeOfTradeId));
            this.Adapter.UpdateCommand.Parameters[13].Value = ((System.DateTime)(Original_PremiumServiceDate));
            this.Adapter.UpdateCommand.Parameters[14].Value = ((int)(PremiumServiceId));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string Ticker, string PremiumServiceTitle, string PremiumServiceDescription, bool IsActive, bool IsPaid, int TypeOfTradeId, System.DateTime PremiumServiceDate, int Original_PremiumServiceId, string Original_Ticker, string Original_PremiumServiceTitle, bool Original_IsActive, bool Original_IsPaid, int Original_TypeOfTradeId, System.DateTime Original_PremiumServiceDate) {
            return this.Update(Ticker, PremiumServiceTitle, PremiumServiceDescription, IsActive, IsPaid, TypeOfTradeId, PremiumServiceDate, Original_PremiumServiceId, Original_Ticker, Original_PremiumServiceTitle, Original_IsActive, Original_IsPaid, Original_TypeOfTradeId, Original_PremiumServiceDate, Original_PremiumServiceId);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class RecommendationsTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public RecommendationsTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Recommendations";
            tableMapping.ColumnMappings.Add("RecommendationId", "RecommendationId");
            tableMapping.ColumnMappings.Add("TradeTypeId", "TradeTypeId");
            tableMapping.ColumnMappings.Add("CompanyName", "CompanyName");
            tableMapping.ColumnMappings.Add("StockSymbol", "StockSymbol");
            tableMapping.ColumnMappings.Add("BuyOrSellId", "BuyOrSellId");
            tableMapping.ColumnMappings.Add("EntryPoint", "EntryPoint");
            tableMapping.ColumnMappings.Add("ExitPoint", "ExitPoint");
            tableMapping.ColumnMappings.Add("StopLoss", "StopLoss");
            tableMapping.ColumnMappings.Add("Updates", "Updates");
            tableMapping.ColumnMappings.Add("RecommendedDate", "RecommendedDate");
            tableMapping.ColumnMappings.Add("RecommendationStatus", "RecommendationStatus");
            tableMapping.ColumnMappings.Add("PerformanceEnable", "PerformanceEnable");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [dbo].[Recommendations] WHERE (([RecommendationId] = @Original_RecommendationId) AND ([TradeTypeId] = @Original_TradeTypeId) AND ([CompanyName] = @Original_CompanyName) AND ([StockSymbol] = @Original_StockSymbol) AND ([BuyOrSellId] = @Original_BuyOrSellId) AND ([EntryPoint] = @Original_EntryPoint) AND ([ExitPoint] = @Original_ExitPoint) AND ((@IsNull_StopLoss = 1 AND [StopLoss] IS NULL) OR ([StopLoss] = @Original_StopLoss)) AND ((@IsNull_RecommendedDate = 1 AND [RecommendedDate] IS NULL) OR ([RecommendedDate] = @Original_RecommendedDate)) AND ([RecommendationStatus] = @Original_RecommendationStatus) AND ([PerformanceEnable] = @Original_PerformanceEnable))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_RecommendationId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RecommendationId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TradeTypeId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TradeTypeId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CompanyName", global::System.Data.SqlDbType.Char, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CompanyName", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_StockSymbol", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "StockSymbol", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_BuyOrSellId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "BuyOrSellId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_EntryPoint", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 2, "EntryPoint", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ExitPoint", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 2, "ExitPoint", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_StopLoss", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "StopLoss", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_StopLoss", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 2, "StopLoss", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_RecommendedDate", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RecommendedDate", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_RecommendedDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RecommendedDate", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_RecommendationStatus", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RecommendationStatus", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_PerformanceEnable", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PerformanceEnable", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[Recommendations] ([RecommendationId], [TradeTypeId], [CompanyName], [StockSymbol], [BuyOrSellId], [EntryPoint], [ExitPoint], [StopLoss], [Updates], [RecommendedDate], [RecommendationStatus], [PerformanceEnable]) VALUES (@RecommendationId, @TradeTypeId, @CompanyName, @StockSymbol, @BuyOrSellId, @EntryPoint, @ExitPoint, @StopLoss, @Updates, @RecommendedDate, @RecommendationStatus, @PerformanceEnable);
SELECT RecommendationId, TradeTypeId, CompanyName, StockSymbol, BuyOrSellId, EntryPoint, ExitPoint, StopLoss, Updates, RecommendedDate, RecommendationStatus, PerformanceEnable FROM Recommendations WHERE (RecommendationId = @RecommendationId)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RecommendationId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RecommendationId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TradeTypeId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TradeTypeId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CompanyName", global::System.Data.SqlDbType.Char, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CompanyName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@StockSymbol", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "StockSymbol", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@BuyOrSellId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "BuyOrSellId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@EntryPoint", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 2, "EntryPoint", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ExitPoint", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 2, "ExitPoint", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@StopLoss", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 2, "StopLoss", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Updates", global::System.Data.SqlDbType.NText, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Updates", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RecommendedDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RecommendedDate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RecommendationStatus", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RecommendationStatus", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PerformanceEnable", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PerformanceEnable", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[Recommendations] SET [RecommendationId] = @RecommendationId, [TradeTypeId] = @TradeTypeId, [CompanyName] = @CompanyName, [StockSymbol] = @StockSymbol, [BuyOrSellId] = @BuyOrSellId, [EntryPoint] = @EntryPoint, [ExitPoint] = @ExitPoint, [StopLoss] = @StopLoss, [Updates] = @Updates, [RecommendedDate] = @RecommendedDate, [RecommendationStatus] = @RecommendationStatus, [PerformanceEnable] = @PerformanceEnable WHERE (([RecommendationId] = @Original_RecommendationId) AND ([TradeTypeId] = @Original_TradeTypeId) AND ([CompanyName] = @Original_CompanyName) AND ([StockSymbol] = @Original_StockSymbol) AND ([BuyOrSellId] = @Original_BuyOrSellId) AND ([EntryPoint] = @Original_EntryPoint) AND ([ExitPoint] = @Original_ExitPoint) AND ((@IsNull_StopLoss = 1 AND [StopLoss] IS NULL) OR ([StopLoss] = @Original_StopLoss)) AND ((@IsNull_RecommendedDate = 1 AND [RecommendedDate] IS NULL) OR ([RecommendedDate] = @Original_RecommendedDate)) AND ([RecommendationStatus] = @Original_RecommendationStatus) AND ([PerformanceEnable] = @Original_PerformanceEnable));
SELECT RecommendationId, TradeTypeId, CompanyName, StockSymbol, BuyOrSellId, EntryPoint, ExitPoint, StopLoss, Updates, RecommendedDate, RecommendationStatus, PerformanceEnable FROM Recommendations WHERE (RecommendationId = @RecommendationId)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RecommendationId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RecommendationId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TradeTypeId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TradeTypeId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CompanyName", global::System.Data.SqlDbType.Char, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CompanyName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@StockSymbol", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "StockSymbol", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@BuyOrSellId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "BuyOrSellId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@EntryPoint", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 2, "EntryPoint", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ExitPoint", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 2, "ExitPoint", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@StopLoss", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 2, "StopLoss", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Updates", global::System.Data.SqlDbType.NText, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Updates", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RecommendedDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RecommendedDate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RecommendationStatus", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RecommendationStatus", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PerformanceEnable", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PerformanceEnable", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_RecommendationId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RecommendationId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TradeTypeId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TradeTypeId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CompanyName", global::System.Data.SqlDbType.Char, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CompanyName", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_StockSymbol", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "StockSymbol", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_BuyOrSellId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "BuyOrSellId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_EntryPoint", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 2, "EntryPoint", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ExitPoint", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 2, "ExitPoint", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_StopLoss", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "StopLoss", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_StopLoss", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 2, "StopLoss", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_RecommendedDate", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RecommendedDate", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_RecommendedDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RecommendedDate", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_RecommendationStatus", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RecommendationStatus", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_PerformanceEnable", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PerformanceEnable", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::DStreet.USAdvisory.Business.Properties.Settings.Default.USAdvisoryConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT RecommendationId, TradeTypeId, CompanyName, StockSymbol, BuyOrSellId, Entr" +
                "yPoint, ExitPoint, StopLoss, Updates, RecommendedDate, RecommendationStatus, Per" +
                "formanceEnable FROM dbo.Recommendations";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(USAdvisoryDataSet.RecommendationsDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual USAdvisoryDataSet.RecommendationsDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            USAdvisoryDataSet.RecommendationsDataTable dataTable = new USAdvisoryDataSet.RecommendationsDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(USAdvisoryDataSet.RecommendationsDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(USAdvisoryDataSet dataSet) {
            return this.Adapter.Update(dataSet, "Recommendations");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_RecommendationId, int Original_TradeTypeId, string Original_CompanyName, string Original_StockSymbol, int Original_BuyOrSellId, decimal Original_EntryPoint, decimal Original_ExitPoint, global::System.Nullable<decimal> Original_StopLoss, global::System.Nullable<global::System.DateTime> Original_RecommendedDate, bool Original_RecommendationStatus, bool Original_PerformanceEnable) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_RecommendationId));
            this.Adapter.DeleteCommand.Parameters[1].Value = ((int)(Original_TradeTypeId));
            if ((Original_CompanyName == null)) {
                throw new global::System.ArgumentNullException("Original_CompanyName");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_CompanyName));
            }
            if ((Original_StockSymbol == null)) {
                throw new global::System.ArgumentNullException("Original_StockSymbol");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((string)(Original_StockSymbol));
            }
            this.Adapter.DeleteCommand.Parameters[4].Value = ((int)(Original_BuyOrSellId));
            this.Adapter.DeleteCommand.Parameters[5].Value = ((decimal)(Original_EntryPoint));
            this.Adapter.DeleteCommand.Parameters[6].Value = ((decimal)(Original_ExitPoint));
            if ((Original_StopLoss.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[8].Value = ((decimal)(Original_StopLoss.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            if ((Original_RecommendedDate.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[10].Value = ((System.DateTime)(Original_RecommendedDate.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            this.Adapter.DeleteCommand.Parameters[11].Value = ((bool)(Original_RecommendationStatus));
            this.Adapter.DeleteCommand.Parameters[12].Value = ((bool)(Original_PerformanceEnable));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int RecommendationId, int TradeTypeId, string CompanyName, string StockSymbol, int BuyOrSellId, decimal EntryPoint, decimal ExitPoint, global::System.Nullable<decimal> StopLoss, string Updates, global::System.Nullable<global::System.DateTime> RecommendedDate, bool RecommendationStatus, bool PerformanceEnable) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(RecommendationId));
            this.Adapter.InsertCommand.Parameters[1].Value = ((int)(TradeTypeId));
            if ((CompanyName == null)) {
                throw new global::System.ArgumentNullException("CompanyName");
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(CompanyName));
            }
            if ((StockSymbol == null)) {
                throw new global::System.ArgumentNullException("StockSymbol");
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(StockSymbol));
            }
            this.Adapter.InsertCommand.Parameters[4].Value = ((int)(BuyOrSellId));
            this.Adapter.InsertCommand.Parameters[5].Value = ((decimal)(EntryPoint));
            this.Adapter.InsertCommand.Parameters[6].Value = ((decimal)(ExitPoint));
            if ((StopLoss.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[7].Value = ((decimal)(StopLoss.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            if ((Updates == null)) {
                this.Adapter.InsertCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = ((string)(Updates));
            }
            if ((RecommendedDate.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[9].Value = ((System.DateTime)(RecommendedDate.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            this.Adapter.InsertCommand.Parameters[10].Value = ((bool)(RecommendationStatus));
            this.Adapter.InsertCommand.Parameters[11].Value = ((bool)(PerformanceEnable));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    int RecommendationId, 
                    int TradeTypeId, 
                    string CompanyName, 
                    string StockSymbol, 
                    int BuyOrSellId, 
                    decimal EntryPoint, 
                    decimal ExitPoint, 
                    global::System.Nullable<decimal> StopLoss, 
                    string Updates, 
                    global::System.Nullable<global::System.DateTime> RecommendedDate, 
                    bool RecommendationStatus, 
                    bool PerformanceEnable, 
                    int Original_RecommendationId, 
                    int Original_TradeTypeId, 
                    string Original_CompanyName, 
                    string Original_StockSymbol, 
                    int Original_BuyOrSellId, 
                    decimal Original_EntryPoint, 
                    decimal Original_ExitPoint, 
                    global::System.Nullable<decimal> Original_StopLoss, 
                    global::System.Nullable<global::System.DateTime> Original_RecommendedDate, 
                    bool Original_RecommendationStatus, 
                    bool Original_PerformanceEnable) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(RecommendationId));
            this.Adapter.UpdateCommand.Parameters[1].Value = ((int)(TradeTypeId));
            if ((CompanyName == null)) {
                throw new global::System.ArgumentNullException("CompanyName");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(CompanyName));
            }
            if ((StockSymbol == null)) {
                throw new global::System.ArgumentNullException("StockSymbol");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(StockSymbol));
            }
            this.Adapter.UpdateCommand.Parameters[4].Value = ((int)(BuyOrSellId));
            this.Adapter.UpdateCommand.Parameters[5].Value = ((decimal)(EntryPoint));
            this.Adapter.UpdateCommand.Parameters[6].Value = ((decimal)(ExitPoint));
            if ((StopLoss.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((decimal)(StopLoss.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            if ((Updates == null)) {
                this.Adapter.UpdateCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((string)(Updates));
            }
            if ((RecommendedDate.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((System.DateTime)(RecommendedDate.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[10].Value = ((bool)(RecommendationStatus));
            this.Adapter.UpdateCommand.Parameters[11].Value = ((bool)(PerformanceEnable));
            this.Adapter.UpdateCommand.Parameters[12].Value = ((int)(Original_RecommendationId));
            this.Adapter.UpdateCommand.Parameters[13].Value = ((int)(Original_TradeTypeId));
            if ((Original_CompanyName == null)) {
                throw new global::System.ArgumentNullException("Original_CompanyName");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[14].Value = ((string)(Original_CompanyName));
            }
            if ((Original_StockSymbol == null)) {
                throw new global::System.ArgumentNullException("Original_StockSymbol");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((string)(Original_StockSymbol));
            }
            this.Adapter.UpdateCommand.Parameters[16].Value = ((int)(Original_BuyOrSellId));
            this.Adapter.UpdateCommand.Parameters[17].Value = ((decimal)(Original_EntryPoint));
            this.Adapter.UpdateCommand.Parameters[18].Value = ((decimal)(Original_ExitPoint));
            if ((Original_StopLoss.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[19].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[20].Value = ((decimal)(Original_StopLoss.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[19].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[20].Value = global::System.DBNull.Value;
            }
            if ((Original_RecommendedDate.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[21].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[22].Value = ((System.DateTime)(Original_RecommendedDate.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[21].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[22].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[23].Value = ((bool)(Original_RecommendationStatus));
            this.Adapter.UpdateCommand.Parameters[24].Value = ((bool)(Original_PerformanceEnable));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    int TradeTypeId, 
                    string CompanyName, 
                    string StockSymbol, 
                    int BuyOrSellId, 
                    decimal EntryPoint, 
                    decimal ExitPoint, 
                    global::System.Nullable<decimal> StopLoss, 
                    string Updates, 
                    global::System.Nullable<global::System.DateTime> RecommendedDate, 
                    bool RecommendationStatus, 
                    bool PerformanceEnable, 
                    int Original_RecommendationId, 
                    int Original_TradeTypeId, 
                    string Original_CompanyName, 
                    string Original_StockSymbol, 
                    int Original_BuyOrSellId, 
                    decimal Original_EntryPoint, 
                    decimal Original_ExitPoint, 
                    global::System.Nullable<decimal> Original_StopLoss, 
                    global::System.Nullable<global::System.DateTime> Original_RecommendedDate, 
                    bool Original_RecommendationStatus, 
                    bool Original_PerformanceEnable) {
            return this.Update(Original_RecommendationId, TradeTypeId, CompanyName, StockSymbol, BuyOrSellId, EntryPoint, ExitPoint, StopLoss, Updates, RecommendedDate, RecommendationStatus, PerformanceEnable, Original_RecommendationId, Original_TradeTypeId, Original_CompanyName, Original_StockSymbol, Original_BuyOrSellId, Original_EntryPoint, Original_ExitPoint, Original_StopLoss, Original_RecommendedDate, Original_RecommendationStatus, Original_PerformanceEnable);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class SubscriptionTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public SubscriptionTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Subscription";
            tableMapping.ColumnMappings.Add("UserId", "UserId");
            tableMapping.ColumnMappings.Add("SubscriptionStartDate", "SubscriptionStartDate");
            tableMapping.ColumnMappings.Add("SubscriptionEndDate", "SubscriptionEndDate");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[Subscription] ([UserId], [SubscriptionStartDate], [Subscriptio" +
                "nEndDate]) VALUES (@UserId, @SubscriptionStartDate, @SubscriptionEndDate)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@UserId", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "UserId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@SubscriptionStartDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SubscriptionStartDate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@SubscriptionEndDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SubscriptionEndDate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::DStreet.USAdvisory.Business.Properties.Settings.Default.USAdvisoryConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT UserId, SubscriptionStartDate, SubscriptionEndDate FROM dbo.Subscription";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(USAdvisoryDataSet.SubscriptionDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual USAdvisoryDataSet.SubscriptionDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            USAdvisoryDataSet.SubscriptionDataTable dataTable = new USAdvisoryDataSet.SubscriptionDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(USAdvisoryDataSet.SubscriptionDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(USAdvisoryDataSet dataSet) {
            return this.Adapter.Update(dataSet, "Subscription");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string UserId, System.DateTime SubscriptionStartDate, System.DateTime SubscriptionEndDate) {
            if ((UserId == null)) {
                throw new global::System.ArgumentNullException("UserId");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(UserId));
            }
            this.Adapter.InsertCommand.Parameters[1].Value = ((System.DateTime)(SubscriptionStartDate));
            this.Adapter.InsertCommand.Parameters[2].Value = ((System.DateTime)(SubscriptionEndDate));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class SubscriptionLookUpTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public SubscriptionLookUpTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "SubscriptionLookUp";
            tableMapping.ColumnMappings.Add("NoOfMonthsSubscriptionId", "NoOfMonthsSubscriptionId");
            tableMapping.ColumnMappings.Add("NoOfMonthsSubscriptionDesc", "NoOfMonthsSubscriptionDesc");
            tableMapping.ColumnMappings.Add("Amount", "Amount");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[SubscriptionLookUp] WHERE (([NoOfMonthsSubscriptionId] = @Orig" +
                "inal_NoOfMonthsSubscriptionId) AND ([NoOfMonthsSubscriptionDesc] = @Original_NoO" +
                "fMonthsSubscriptionDesc) AND ([Amount] = @Original_Amount))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_NoOfMonthsSubscriptionId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "NoOfMonthsSubscriptionId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_NoOfMonthsSubscriptionDesc", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "NoOfMonthsSubscriptionDesc", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Amount", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 2, "Amount", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[SubscriptionLookUp] ([NoOfMonthsSubscriptionDesc], [Amount]) VALUES (@NoOfMonthsSubscriptionDesc, @Amount);
SELECT NoOfMonthsSubscriptionId, NoOfMonthsSubscriptionDesc, Amount FROM SubscriptionLookUp WHERE (NoOfMonthsSubscriptionId = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@NoOfMonthsSubscriptionDesc", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "NoOfMonthsSubscriptionDesc", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Amount", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 2, "Amount", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[SubscriptionLookUp] SET [NoOfMonthsSubscriptionDesc] = @NoOfMonthsSubscriptionDesc, [Amount] = @Amount WHERE (([NoOfMonthsSubscriptionId] = @Original_NoOfMonthsSubscriptionId) AND ([NoOfMonthsSubscriptionDesc] = @Original_NoOfMonthsSubscriptionDesc) AND ([Amount] = @Original_Amount));
SELECT NoOfMonthsSubscriptionId, NoOfMonthsSubscriptionDesc, Amount FROM SubscriptionLookUp WHERE (NoOfMonthsSubscriptionId = @NoOfMonthsSubscriptionId)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@NoOfMonthsSubscriptionDesc", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "NoOfMonthsSubscriptionDesc", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Amount", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 2, "Amount", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_NoOfMonthsSubscriptionId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "NoOfMonthsSubscriptionId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_NoOfMonthsSubscriptionDesc", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "NoOfMonthsSubscriptionDesc", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Amount", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 2, "Amount", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@NoOfMonthsSubscriptionId", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "NoOfMonthsSubscriptionId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::DStreet.USAdvisory.Business.Properties.Settings.Default.USAdvisoryConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT NoOfMonthsSubscriptionId, NoOfMonthsSubscriptionDesc, Amount FROM dbo.Subs" +
                "criptionLookUp";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(USAdvisoryDataSet.SubscriptionLookUpDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual USAdvisoryDataSet.SubscriptionLookUpDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            USAdvisoryDataSet.SubscriptionLookUpDataTable dataTable = new USAdvisoryDataSet.SubscriptionLookUpDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(USAdvisoryDataSet.SubscriptionLookUpDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(USAdvisoryDataSet dataSet) {
            return this.Adapter.Update(dataSet, "SubscriptionLookUp");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_NoOfMonthsSubscriptionId, string Original_NoOfMonthsSubscriptionDesc, decimal Original_Amount) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_NoOfMonthsSubscriptionId));
            if ((Original_NoOfMonthsSubscriptionDesc == null)) {
                throw new global::System.ArgumentNullException("Original_NoOfMonthsSubscriptionDesc");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_NoOfMonthsSubscriptionDesc));
            }
            this.Adapter.DeleteCommand.Parameters[2].Value = ((decimal)(Original_Amount));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string NoOfMonthsSubscriptionDesc, decimal Amount) {
            if ((NoOfMonthsSubscriptionDesc == null)) {
                throw new global::System.ArgumentNullException("NoOfMonthsSubscriptionDesc");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(NoOfMonthsSubscriptionDesc));
            }
            this.Adapter.InsertCommand.Parameters[1].Value = ((decimal)(Amount));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string NoOfMonthsSubscriptionDesc, decimal Amount, int Original_NoOfMonthsSubscriptionId, string Original_NoOfMonthsSubscriptionDesc, decimal Original_Amount, int NoOfMonthsSubscriptionId) {
            if ((NoOfMonthsSubscriptionDesc == null)) {
                throw new global::System.ArgumentNullException("NoOfMonthsSubscriptionDesc");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(NoOfMonthsSubscriptionDesc));
            }
            this.Adapter.UpdateCommand.Parameters[1].Value = ((decimal)(Amount));
            this.Adapter.UpdateCommand.Parameters[2].Value = ((int)(Original_NoOfMonthsSubscriptionId));
            if ((Original_NoOfMonthsSubscriptionDesc == null)) {
                throw new global::System.ArgumentNullException("Original_NoOfMonthsSubscriptionDesc");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(Original_NoOfMonthsSubscriptionDesc));
            }
            this.Adapter.UpdateCommand.Parameters[4].Value = ((decimal)(Original_Amount));
            this.Adapter.UpdateCommand.Parameters[5].Value = ((int)(NoOfMonthsSubscriptionId));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string NoOfMonthsSubscriptionDesc, decimal Amount, int Original_NoOfMonthsSubscriptionId, string Original_NoOfMonthsSubscriptionDesc, decimal Original_Amount) {
            return this.Update(NoOfMonthsSubscriptionDesc, Amount, Original_NoOfMonthsSubscriptionId, Original_NoOfMonthsSubscriptionDesc, Original_Amount, Original_NoOfMonthsSubscriptionId);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class TradeTypesTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public TradeTypesTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "TradeTypes";
            tableMapping.ColumnMappings.Add("TypeOfTradeId", "TypeOfTradeId");
            tableMapping.ColumnMappings.Add("TradeType", "TradeType");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[TradeTypes] WHERE (([TypeOfTradeId] = @Original_TypeOfTradeId)" +
                " AND ([TradeType] = @Original_TradeType))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TypeOfTradeId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TypeOfTradeId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TradeType", global::System.Data.SqlDbType.Char, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TradeType", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[TradeTypes] ([TradeType]) VALUES (@TradeType);\r\nSELECT TypeOfT" +
                "radeId, TradeType FROM TradeTypes WHERE (TypeOfTradeId = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TradeType", global::System.Data.SqlDbType.Char, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TradeType", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[TradeTypes] SET [TradeType] = @TradeType WHERE (([TypeOfTradeId] = " +
                "@Original_TypeOfTradeId) AND ([TradeType] = @Original_TradeType));\r\nSELECT TypeO" +
                "fTradeId, TradeType FROM TradeTypes WHERE (TypeOfTradeId = @TypeOfTradeId)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TradeType", global::System.Data.SqlDbType.Char, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TradeType", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TypeOfTradeId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TypeOfTradeId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TradeType", global::System.Data.SqlDbType.Char, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TradeType", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TypeOfTradeId", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "TypeOfTradeId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::DStreet.USAdvisory.Business.Properties.Settings.Default.USAdvisoryConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT TypeOfTradeId, TradeType FROM dbo.TradeTypes";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(USAdvisoryDataSet.TradeTypesDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual USAdvisoryDataSet.TradeTypesDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            USAdvisoryDataSet.TradeTypesDataTable dataTable = new USAdvisoryDataSet.TradeTypesDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(USAdvisoryDataSet.TradeTypesDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(USAdvisoryDataSet dataSet) {
            return this.Adapter.Update(dataSet, "TradeTypes");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_TypeOfTradeId, string Original_TradeType) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_TypeOfTradeId));
            if ((Original_TradeType == null)) {
                throw new global::System.ArgumentNullException("Original_TradeType");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_TradeType));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string TradeType) {
            if ((TradeType == null)) {
                throw new global::System.ArgumentNullException("TradeType");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(TradeType));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string TradeType, int Original_TypeOfTradeId, string Original_TradeType, int TypeOfTradeId) {
            if ((TradeType == null)) {
                throw new global::System.ArgumentNullException("TradeType");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(TradeType));
            }
            this.Adapter.UpdateCommand.Parameters[1].Value = ((int)(Original_TypeOfTradeId));
            if ((Original_TradeType == null)) {
                throw new global::System.ArgumentNullException("Original_TradeType");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(Original_TradeType));
            }
            this.Adapter.UpdateCommand.Parameters[3].Value = ((int)(TypeOfTradeId));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string TradeType, int Original_TypeOfTradeId, string Original_TradeType) {
            return this.Update(TradeType, Original_TypeOfTradeId, Original_TradeType, Original_TypeOfTradeId);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class UsersTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public UsersTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Users";
            tableMapping.ColumnMappings.Add("UserId", "UserId");
            tableMapping.ColumnMappings.Add("Password", "Password");
            tableMapping.ColumnMappings.Add("FirstName", "FirstName");
            tableMapping.ColumnMappings.Add("LastName", "LastName");
            tableMapping.ColumnMappings.Add("PhoneNumber", "PhoneNumber");
            tableMapping.ColumnMappings.Add("Address", "Address");
            tableMapping.ColumnMappings.Add("State", "State");
            tableMapping.ColumnMappings.Add("Country", "Country");
            tableMapping.ColumnMappings.Add("ZipCode", "ZipCode");
            tableMapping.ColumnMappings.Add("IsPaidSubscriber", "IsPaidSubscriber");
            tableMapping.ColumnMappings.Add("IsAutoRenewal", "IsAutoRenewal");
            tableMapping.ColumnMappings.Add("RegistrationDate", "RegistrationDate");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [dbo].[Users] WHERE (([UserId] = @Original_UserId) AND ([Password] = @Original_Password) AND ([FirstName] = @Original_FirstName) AND ([LastName] = @Original_LastName) AND ([PhoneNumber] = @Original_PhoneNumber) AND ([Address] = @Original_Address) AND ([State] = @Original_State) AND ([Country] = @Original_Country) AND ([ZipCode] = @Original_ZipCode) AND ([IsPaidSubscriber] = @Original_IsPaidSubscriber) AND ([IsAutoRenewal] = @Original_IsAutoRenewal) AND ([RegistrationDate] = @Original_RegistrationDate))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_UserId", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "UserId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Password", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Password", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_FirstName", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FirstName", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_LastName", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LastName", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_PhoneNumber", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PhoneNumber", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Address", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Address", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_State", global::System.Data.SqlDbType.Char, 0, global::System.Data.ParameterDirection.Input, 0, 0, "State", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Country", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Country", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ZipCode", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ZipCode", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_IsPaidSubscriber", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IsPaidSubscriber", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_IsAutoRenewal", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IsAutoRenewal", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_RegistrationDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RegistrationDate", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[Users] ([UserId], [Password], [FirstName], [LastName], [PhoneNumber], [Address], [State], [Country], [ZipCode], [IsPaidSubscriber], [IsAutoRenewal], [RegistrationDate]) VALUES (@UserId, @Password, @FirstName, @LastName, @PhoneNumber, @Address, @State, @Country, @ZipCode, @IsPaidSubscriber, @IsAutoRenewal, @RegistrationDate);
SELECT UserId, Password, FirstName, LastName, PhoneNumber, Address, State, Country, ZipCode, IsPaidSubscriber, IsAutoRenewal, RegistrationDate FROM Users WHERE (UserId = @UserId)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@UserId", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "UserId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Password", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Password", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FirstName", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FirstName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@LastName", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LastName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PhoneNumber", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PhoneNumber", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Address", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Address", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@State", global::System.Data.SqlDbType.Char, 0, global::System.Data.ParameterDirection.Input, 0, 0, "State", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Country", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Country", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ZipCode", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ZipCode", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsPaidSubscriber", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IsPaidSubscriber", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsAutoRenewal", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IsAutoRenewal", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RegistrationDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RegistrationDate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[Users] SET [UserId] = @UserId, [Password] = @Password, [FirstName] = @FirstName, [LastName] = @LastName, [PhoneNumber] = @PhoneNumber, [Address] = @Address, [State] = @State, [Country] = @Country, [ZipCode] = @ZipCode, [IsPaidSubscriber] = @IsPaidSubscriber, [IsAutoRenewal] = @IsAutoRenewal, [RegistrationDate] = @RegistrationDate WHERE (([UserId] = @Original_UserId) AND ([Password] = @Original_Password) AND ([FirstName] = @Original_FirstName) AND ([LastName] = @Original_LastName) AND ([PhoneNumber] = @Original_PhoneNumber) AND ([Address] = @Original_Address) AND ([State] = @Original_State) AND ([Country] = @Original_Country) AND ([ZipCode] = @Original_ZipCode) AND ([IsPaidSubscriber] = @Original_IsPaidSubscriber) AND ([IsAutoRenewal] = @Original_IsAutoRenewal) AND ([RegistrationDate] = @Original_RegistrationDate));
SELECT UserId, Password, FirstName, LastName, PhoneNumber, Address, State, Country, ZipCode, IsPaidSubscriber, IsAutoRenewal, RegistrationDate FROM Users WHERE (UserId = @UserId)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@UserId", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "UserId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Password", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Password", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FirstName", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FirstName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@LastName", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LastName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PhoneNumber", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PhoneNumber", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Address", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Address", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@State", global::System.Data.SqlDbType.Char, 0, global::System.Data.ParameterDirection.Input, 0, 0, "State", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Country", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Country", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ZipCode", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ZipCode", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsPaidSubscriber", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IsPaidSubscriber", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsAutoRenewal", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IsAutoRenewal", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RegistrationDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RegistrationDate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_UserId", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "UserId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Password", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Password", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_FirstName", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FirstName", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_LastName", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LastName", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_PhoneNumber", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PhoneNumber", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Address", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Address", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_State", global::System.Data.SqlDbType.Char, 0, global::System.Data.ParameterDirection.Input, 0, 0, "State", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Country", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Country", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ZipCode", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ZipCode", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_IsPaidSubscriber", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IsPaidSubscriber", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_IsAutoRenewal", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IsAutoRenewal", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_RegistrationDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RegistrationDate", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::DStreet.USAdvisory.Business.Properties.Settings.Default.USAdvisoryConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT UserId, Password, FirstName, LastName, PhoneNumber, Address, State, Countr" +
                "y, ZipCode, IsPaidSubscriber, IsAutoRenewal, RegistrationDate FROM dbo.Users";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(USAdvisoryDataSet.UsersDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual USAdvisoryDataSet.UsersDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            USAdvisoryDataSet.UsersDataTable dataTable = new USAdvisoryDataSet.UsersDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(USAdvisoryDataSet.UsersDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(USAdvisoryDataSet dataSet) {
            return this.Adapter.Update(dataSet, "Users");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(string Original_UserId, string Original_Password, string Original_FirstName, string Original_LastName, string Original_PhoneNumber, string Original_Address, string Original_State, string Original_Country, int Original_ZipCode, bool Original_IsPaidSubscriber, bool Original_IsAutoRenewal, System.DateTime Original_RegistrationDate) {
            if ((Original_UserId == null)) {
                throw new global::System.ArgumentNullException("Original_UserId");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[0].Value = ((string)(Original_UserId));
            }
            if ((Original_Password == null)) {
                throw new global::System.ArgumentNullException("Original_Password");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_Password));
            }
            if ((Original_FirstName == null)) {
                throw new global::System.ArgumentNullException("Original_FirstName");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_FirstName));
            }
            if ((Original_LastName == null)) {
                throw new global::System.ArgumentNullException("Original_LastName");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((string)(Original_LastName));
            }
            if ((Original_PhoneNumber == null)) {
                throw new global::System.ArgumentNullException("Original_PhoneNumber");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[4].Value = ((string)(Original_PhoneNumber));
            }
            if ((Original_Address == null)) {
                throw new global::System.ArgumentNullException("Original_Address");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((string)(Original_Address));
            }
            if ((Original_State == null)) {
                throw new global::System.ArgumentNullException("Original_State");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[6].Value = ((string)(Original_State));
            }
            if ((Original_Country == null)) {
                throw new global::System.ArgumentNullException("Original_Country");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((string)(Original_Country));
            }
            this.Adapter.DeleteCommand.Parameters[8].Value = ((int)(Original_ZipCode));
            this.Adapter.DeleteCommand.Parameters[9].Value = ((bool)(Original_IsPaidSubscriber));
            this.Adapter.DeleteCommand.Parameters[10].Value = ((bool)(Original_IsAutoRenewal));
            this.Adapter.DeleteCommand.Parameters[11].Value = ((System.DateTime)(Original_RegistrationDate));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string UserId, string Password, string FirstName, string LastName, string PhoneNumber, string Address, string State, string Country, int ZipCode, bool IsPaidSubscriber, bool IsAutoRenewal, System.DateTime RegistrationDate) {
            if ((UserId == null)) {
                throw new global::System.ArgumentNullException("UserId");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(UserId));
            }
            if ((Password == null)) {
                throw new global::System.ArgumentNullException("Password");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(Password));
            }
            if ((FirstName == null)) {
                throw new global::System.ArgumentNullException("FirstName");
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(FirstName));
            }
            if ((LastName == null)) {
                throw new global::System.ArgumentNullException("LastName");
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(LastName));
            }
            if ((PhoneNumber == null)) {
                throw new global::System.ArgumentNullException("PhoneNumber");
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(PhoneNumber));
            }
            if ((Address == null)) {
                throw new global::System.ArgumentNullException("Address");
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = ((string)(Address));
            }
            if ((State == null)) {
                throw new global::System.ArgumentNullException("State");
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = ((string)(State));
            }
            if ((Country == null)) {
                throw new global::System.ArgumentNullException("Country");
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = ((string)(Country));
            }
            this.Adapter.InsertCommand.Parameters[8].Value = ((int)(ZipCode));
            this.Adapter.InsertCommand.Parameters[9].Value = ((bool)(IsPaidSubscriber));
            this.Adapter.InsertCommand.Parameters[10].Value = ((bool)(IsAutoRenewal));
            this.Adapter.InsertCommand.Parameters[11].Value = ((System.DateTime)(RegistrationDate));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    string UserId, 
                    string Password, 
                    string FirstName, 
                    string LastName, 
                    string PhoneNumber, 
                    string Address, 
                    string State, 
                    string Country, 
                    int ZipCode, 
                    bool IsPaidSubscriber, 
                    bool IsAutoRenewal, 
                    System.DateTime RegistrationDate, 
                    string Original_UserId, 
                    string Original_Password, 
                    string Original_FirstName, 
                    string Original_LastName, 
                    string Original_PhoneNumber, 
                    string Original_Address, 
                    string Original_State, 
                    string Original_Country, 
                    int Original_ZipCode, 
                    bool Original_IsPaidSubscriber, 
                    bool Original_IsAutoRenewal, 
                    System.DateTime Original_RegistrationDate) {
            if ((UserId == null)) {
                throw new global::System.ArgumentNullException("UserId");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(UserId));
            }
            if ((Password == null)) {
                throw new global::System.ArgumentNullException("Password");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(Password));
            }
            if ((FirstName == null)) {
                throw new global::System.ArgumentNullException("FirstName");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(FirstName));
            }
            if ((LastName == null)) {
                throw new global::System.ArgumentNullException("LastName");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(LastName));
            }
            if ((PhoneNumber == null)) {
                throw new global::System.ArgumentNullException("PhoneNumber");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(PhoneNumber));
            }
            if ((Address == null)) {
                throw new global::System.ArgumentNullException("Address");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(Address));
            }
            if ((State == null)) {
                throw new global::System.ArgumentNullException("State");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(State));
            }
            if ((Country == null)) {
                throw new global::System.ArgumentNullException("Country");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((string)(Country));
            }
            this.Adapter.UpdateCommand.Parameters[8].Value = ((int)(ZipCode));
            this.Adapter.UpdateCommand.Parameters[9].Value = ((bool)(IsPaidSubscriber));
            this.Adapter.UpdateCommand.Parameters[10].Value = ((bool)(IsAutoRenewal));
            this.Adapter.UpdateCommand.Parameters[11].Value = ((System.DateTime)(RegistrationDate));
            if ((Original_UserId == null)) {
                throw new global::System.ArgumentNullException("Original_UserId");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((string)(Original_UserId));
            }
            if ((Original_Password == null)) {
                throw new global::System.ArgumentNullException("Original_Password");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((string)(Original_Password));
            }
            if ((Original_FirstName == null)) {
                throw new global::System.ArgumentNullException("Original_FirstName");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[14].Value = ((string)(Original_FirstName));
            }
            if ((Original_LastName == null)) {
                throw new global::System.ArgumentNullException("Original_LastName");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((string)(Original_LastName));
            }
            if ((Original_PhoneNumber == null)) {
                throw new global::System.ArgumentNullException("Original_PhoneNumber");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[16].Value = ((string)(Original_PhoneNumber));
            }
            if ((Original_Address == null)) {
                throw new global::System.ArgumentNullException("Original_Address");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[17].Value = ((string)(Original_Address));
            }
            if ((Original_State == null)) {
                throw new global::System.ArgumentNullException("Original_State");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[18].Value = ((string)(Original_State));
            }
            if ((Original_Country == null)) {
                throw new global::System.ArgumentNullException("Original_Country");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[19].Value = ((string)(Original_Country));
            }
            this.Adapter.UpdateCommand.Parameters[20].Value = ((int)(Original_ZipCode));
            this.Adapter.UpdateCommand.Parameters[21].Value = ((bool)(Original_IsPaidSubscriber));
            this.Adapter.UpdateCommand.Parameters[22].Value = ((bool)(Original_IsAutoRenewal));
            this.Adapter.UpdateCommand.Parameters[23].Value = ((System.DateTime)(Original_RegistrationDate));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    string Password, 
                    string FirstName, 
                    string LastName, 
                    string PhoneNumber, 
                    string Address, 
                    string State, 
                    string Country, 
                    int ZipCode, 
                    bool IsPaidSubscriber, 
                    bool IsAutoRenewal, 
                    System.DateTime RegistrationDate, 
                    string Original_UserId, 
                    string Original_Password, 
                    string Original_FirstName, 
                    string Original_LastName, 
                    string Original_PhoneNumber, 
                    string Original_Address, 
                    string Original_State, 
                    string Original_Country, 
                    int Original_ZipCode, 
                    bool Original_IsPaidSubscriber, 
                    bool Original_IsAutoRenewal, 
                    System.DateTime Original_RegistrationDate) {
            return this.Update(Original_UserId, Password, FirstName, LastName, PhoneNumber, Address, State, Country, ZipCode, IsPaidSubscriber, IsAutoRenewal, RegistrationDate, Original_UserId, Original_Password, Original_FirstName, Original_LastName, Original_PhoneNumber, Original_Address, Original_State, Original_Country, Original_ZipCode, Original_IsPaidSubscriber, Original_IsAutoRenewal, Original_RegistrationDate);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class WatchOutTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public WatchOutTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "WatchOut";
            tableMapping.ColumnMappings.Add("WatchOutId", "WatchOutId");
            tableMapping.ColumnMappings.Add("WatchOutDateTime", "WatchOutDateTime");
            tableMapping.ColumnMappings.Add("WatchOutText", "WatchOutText");
            tableMapping.ColumnMappings.Add("WatchOutTitle", "WatchOutTitle");
            tableMapping.ColumnMappings.Add("IsPaid", "IsPaid");
            tableMapping.ColumnMappings.Add("Ticker", "Ticker");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[WatchOut] WHERE (([WatchOutId] = @Original_WatchOutId) AND ([W" +
                "atchOutDateTime] = @Original_WatchOutDateTime) AND ([WatchOutTitle] = @Original_" +
                "WatchOutTitle) AND ([IsPaid] = @Original_IsPaid) AND ([Ticker] = @Original_Ticke" +
                "r))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_WatchOutId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "WatchOutId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_WatchOutDateTime", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "WatchOutDateTime", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_WatchOutTitle", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "WatchOutTitle", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_IsPaid", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IsPaid", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Ticker", global::System.Data.SqlDbType.Char, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Ticker", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[WatchOut] ([WatchOutDateTime], [WatchOutText], [WatchOutTitle], [IsPaid], [Ticker]) VALUES (@WatchOutDateTime, @WatchOutText, @WatchOutTitle, @IsPaid, @Ticker);
SELECT WatchOutId, WatchOutDateTime, WatchOutText, WatchOutTitle, IsPaid, Ticker FROM WatchOut WHERE (WatchOutId = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@WatchOutDateTime", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "WatchOutDateTime", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@WatchOutText", global::System.Data.SqlDbType.NText, 0, global::System.Data.ParameterDirection.Input, 0, 0, "WatchOutText", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@WatchOutTitle", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "WatchOutTitle", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsPaid", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IsPaid", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Ticker", global::System.Data.SqlDbType.Char, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Ticker", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[WatchOut] SET [WatchOutDateTime] = @WatchOutDateTime, [WatchOutText] = @WatchOutText, [WatchOutTitle] = @WatchOutTitle, [IsPaid] = @IsPaid, [Ticker] = @Ticker WHERE (([WatchOutId] = @Original_WatchOutId) AND ([WatchOutDateTime] = @Original_WatchOutDateTime) AND ([WatchOutTitle] = @Original_WatchOutTitle) AND ([IsPaid] = @Original_IsPaid) AND ([Ticker] = @Original_Ticker));
SELECT WatchOutId, WatchOutDateTime, WatchOutText, WatchOutTitle, IsPaid, Ticker FROM WatchOut WHERE (WatchOutId = @WatchOutId)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@WatchOutDateTime", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "WatchOutDateTime", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@WatchOutText", global::System.Data.SqlDbType.NText, 0, global::System.Data.ParameterDirection.Input, 0, 0, "WatchOutText", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@WatchOutTitle", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "WatchOutTitle", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsPaid", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IsPaid", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Ticker", global::System.Data.SqlDbType.Char, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Ticker", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_WatchOutId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "WatchOutId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_WatchOutDateTime", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "WatchOutDateTime", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_WatchOutTitle", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "WatchOutTitle", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_IsPaid", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IsPaid", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Ticker", global::System.Data.SqlDbType.Char, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Ticker", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@WatchOutId", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "WatchOutId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::DStreet.USAdvisory.Business.Properties.Settings.Default.USAdvisoryConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT WatchOutId, WatchOutDateTime, WatchOutText, WatchOutTitle, IsPaid, Ticker " +
                "FROM dbo.WatchOut";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(USAdvisoryDataSet.WatchOutDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual USAdvisoryDataSet.WatchOutDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            USAdvisoryDataSet.WatchOutDataTable dataTable = new USAdvisoryDataSet.WatchOutDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(USAdvisoryDataSet.WatchOutDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(USAdvisoryDataSet dataSet) {
            return this.Adapter.Update(dataSet, "WatchOut");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_WatchOutId, System.DateTime Original_WatchOutDateTime, string Original_WatchOutTitle, bool Original_IsPaid, string Original_Ticker) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_WatchOutId));
            this.Adapter.DeleteCommand.Parameters[1].Value = ((System.DateTime)(Original_WatchOutDateTime));
            if ((Original_WatchOutTitle == null)) {
                throw new global::System.ArgumentNullException("Original_WatchOutTitle");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_WatchOutTitle));
            }
            this.Adapter.DeleteCommand.Parameters[3].Value = ((bool)(Original_IsPaid));
            if ((Original_Ticker == null)) {
                throw new global::System.ArgumentNullException("Original_Ticker");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[4].Value = ((string)(Original_Ticker));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(System.DateTime WatchOutDateTime, string WatchOutText, string WatchOutTitle, bool IsPaid, string Ticker) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((System.DateTime)(WatchOutDateTime));
            if ((WatchOutText == null)) {
                throw new global::System.ArgumentNullException("WatchOutText");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(WatchOutText));
            }
            if ((WatchOutTitle == null)) {
                throw new global::System.ArgumentNullException("WatchOutTitle");
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(WatchOutTitle));
            }
            this.Adapter.InsertCommand.Parameters[3].Value = ((bool)(IsPaid));
            if ((Ticker == null)) {
                throw new global::System.ArgumentNullException("Ticker");
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(Ticker));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(System.DateTime WatchOutDateTime, string WatchOutText, string WatchOutTitle, bool IsPaid, string Ticker, int Original_WatchOutId, System.DateTime Original_WatchOutDateTime, string Original_WatchOutTitle, bool Original_IsPaid, string Original_Ticker, int WatchOutId) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((System.DateTime)(WatchOutDateTime));
            if ((WatchOutText == null)) {
                throw new global::System.ArgumentNullException("WatchOutText");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(WatchOutText));
            }
            if ((WatchOutTitle == null)) {
                throw new global::System.ArgumentNullException("WatchOutTitle");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(WatchOutTitle));
            }
            this.Adapter.UpdateCommand.Parameters[3].Value = ((bool)(IsPaid));
            if ((Ticker == null)) {
                throw new global::System.ArgumentNullException("Ticker");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(Ticker));
            }
            this.Adapter.UpdateCommand.Parameters[5].Value = ((int)(Original_WatchOutId));
            this.Adapter.UpdateCommand.Parameters[6].Value = ((System.DateTime)(Original_WatchOutDateTime));
            if ((Original_WatchOutTitle == null)) {
                throw new global::System.ArgumentNullException("Original_WatchOutTitle");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((string)(Original_WatchOutTitle));
            }
            this.Adapter.UpdateCommand.Parameters[8].Value = ((bool)(Original_IsPaid));
            if ((Original_Ticker == null)) {
                throw new global::System.ArgumentNullException("Original_Ticker");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((string)(Original_Ticker));
            }
            this.Adapter.UpdateCommand.Parameters[10].Value = ((int)(WatchOutId));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(System.DateTime WatchOutDateTime, string WatchOutText, string WatchOutTitle, bool IsPaid, string Ticker, int Original_WatchOutId, System.DateTime Original_WatchOutDateTime, string Original_WatchOutTitle, bool Original_IsPaid, string Original_Ticker) {
            return this.Update(WatchOutDateTime, WatchOutText, WatchOutTitle, IsPaid, Ticker, Original_WatchOutId, Original_WatchOutDateTime, Original_WatchOutTitle, Original_IsPaid, Original_Ticker, Original_WatchOutId);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class GetAllClosedPortfolioTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public GetAllClosedPortfolioTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "GetAllClosedPortfolio";
            tableMapping.ColumnMappings.Add("StockTransactionId", "StockTransactionId");
            tableMapping.ColumnMappings.Add("PortfolioId", "PortfolioId");
            tableMapping.ColumnMappings.Add("StockTicker", "StockTicker");
            tableMapping.ColumnMappings.Add("CallStatus", "CallStatus");
            tableMapping.ColumnMappings.Add("PortfolioEntryDate", "PortfolioEntryDate");
            tableMapping.ColumnMappings.Add("PortfolioExitDate", "PortfolioExitDate");
            tableMapping.ColumnMappings.Add("IsPartiallyExited", "IsPartiallyExited");
            tableMapping.ColumnMappings.Add("Qty", "Qty");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::DStreet.USAdvisory.Business.Properties.Settings.Default.USAdvisoryConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "dbo.GetAllClosedPortfolio";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.StoredProcedure;
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RETURN_VALUE", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.ReturnValue, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(USAdvisoryDataSet.GetAllClosedPortfolioDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual USAdvisoryDataSet.GetAllClosedPortfolioDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            USAdvisoryDataSet.GetAllClosedPortfolioDataTable dataTable = new USAdvisoryDataSet.GetAllClosedPortfolioDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class GetAllEmailAddressTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public GetAllEmailAddressTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "GetAllEmailAddress";
            tableMapping.ColumnMappings.Add("EmailAddress", "EmailAddress");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::DStreet.USAdvisory.Business.Properties.Settings.Default.USAdvisoryConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "dbo.GetAllEmailAddress";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.StoredProcedure;
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RETURN_VALUE", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.ReturnValue, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(USAdvisoryDataSet.GetAllEmailAddressDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual USAdvisoryDataSet.GetAllEmailAddressDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            USAdvisoryDataSet.GetAllEmailAddressDataTable dataTable = new USAdvisoryDataSet.GetAllEmailAddressDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class GetAllEmailToSendTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public GetAllEmailToSendTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "GetAllEmailToSend";
            tableMapping.ColumnMappings.Add("SendEmailId", "SendEmailId");
            tableMapping.ColumnMappings.Add("EmailSubject", "EmailSubject");
            tableMapping.ColumnMappings.Add("Emaildatetime", "Emaildatetime");
            tableMapping.ColumnMappings.Add("IsEmailSent", "IsEmailSent");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::DStreet.USAdvisory.Business.Properties.Settings.Default.USAdvisoryConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "dbo.GetAllEmailToSend";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.StoredProcedure;
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RETURN_VALUE", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.ReturnValue, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(USAdvisoryDataSet.GetAllEmailToSendDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual USAdvisoryDataSet.GetAllEmailToSendDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            USAdvisoryDataSet.GetAllEmailToSendDataTable dataTable = new USAdvisoryDataSet.GetAllEmailToSendDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class GetAllMarketCommentariesTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public GetAllMarketCommentariesTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "GetAllMarketCommentaries";
            tableMapping.ColumnMappings.Add("MarketCommentaryId", "MarketCommentaryId");
            tableMapping.ColumnMappings.Add("MarketCommentaryTitle", "MarketCommentaryTitle");
            tableMapping.ColumnMappings.Add("MarketCommentaryDesc", "MarketCommentaryDesc");
            tableMapping.ColumnMappings.Add("MarketCommentaryDateTime", "MarketCommentaryDateTime");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::DStreet.USAdvisory.Business.Properties.Settings.Default.USAdvisoryConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "dbo.GetAllMarketCommentaries";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.StoredProcedure;
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RETURN_VALUE", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.ReturnValue, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(USAdvisoryDataSet.GetAllMarketCommentariesDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual USAdvisoryDataSet.GetAllMarketCommentariesDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            USAdvisoryDataSet.GetAllMarketCommentariesDataTable dataTable = new USAdvisoryDataSet.GetAllMarketCommentariesDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class GetAllNewsAndViewsTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public GetAllNewsAndViewsTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "GetAllNewsAndViews";
            tableMapping.ColumnMappings.Add("NewsId", "NewsId");
            tableMapping.ColumnMappings.Add("NewsTitle", "NewsTitle");
            tableMapping.ColumnMappings.Add("NewsDescription", "NewsDescription");
            tableMapping.ColumnMappings.Add("Newsdatetime", "Newsdatetime");
            tableMapping.ColumnMappings.Add("IsActive", "IsActive");
            tableMapping.ColumnMappings.Add("IsPaid", "IsPaid");
            tableMapping.ColumnMappings.Add("Ticker", "Ticker");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::DStreet.USAdvisory.Business.Properties.Settings.Default.USAdvisoryConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "dbo.GetAllNewsAndViews";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.StoredProcedure;
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RETURN_VALUE", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.ReturnValue, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(USAdvisoryDataSet.GetAllNewsAndViewsDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual USAdvisoryDataSet.GetAllNewsAndViewsDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            USAdvisoryDataSet.GetAllNewsAndViewsDataTable dataTable = new USAdvisoryDataSet.GetAllNewsAndViewsDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class GetAllOpenPortfolioTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public GetAllOpenPortfolioTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "GetAllOpenPortfolio";
            tableMapping.ColumnMappings.Add("StockTransactionId", "StockTransactionId");
            tableMapping.ColumnMappings.Add("PortfolioId", "PortfolioId");
            tableMapping.ColumnMappings.Add("StockTicker", "StockTicker");
            tableMapping.ColumnMappings.Add("CallStatus", "CallStatus");
            tableMapping.ColumnMappings.Add("PortfolioEntryDate", "PortfolioEntryDate");
            tableMapping.ColumnMappings.Add("PortfolioExitDate", "PortfolioExitDate");
            tableMapping.ColumnMappings.Add("IsPartiallyExited", "IsPartiallyExited");
            tableMapping.ColumnMappings.Add("Qty", "Qty");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::DStreet.USAdvisory.Business.Properties.Settings.Default.USAdvisoryConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "dbo.GetAllOpenPortfolio";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.StoredProcedure;
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RETURN_VALUE", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.ReturnValue, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(USAdvisoryDataSet.GetAllOpenPortfolioDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual USAdvisoryDataSet.GetAllOpenPortfolioDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            USAdvisoryDataSet.GetAllOpenPortfolioDataTable dataTable = new USAdvisoryDataSet.GetAllOpenPortfolioDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class GetAllOrdersTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public GetAllOrdersTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "GetAllOrders";
            tableMapping.ColumnMappings.Add("OrderId", "OrderId");
            tableMapping.ColumnMappings.Add("UserId", "UserId");
            tableMapping.ColumnMappings.Add("NoOfMonthsSubscriptionDesc", "NoOfMonthsSubscriptionDesc");
            tableMapping.ColumnMappings.Add("SubscriptionStartDate", "SubscriptionStartDate");
            tableMapping.ColumnMappings.Add("SubscriptionEndDate", "SubscriptionEndDate");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::DStreet.USAdvisory.Business.Properties.Settings.Default.USAdvisoryConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "dbo.GetAllOrders";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.StoredProcedure;
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RETURN_VALUE", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.ReturnValue, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(USAdvisoryDataSet.GetAllOrdersDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual USAdvisoryDataSet.GetAllOrdersDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            USAdvisoryDataSet.GetAllOrdersDataTable dataTable = new USAdvisoryDataSet.GetAllOrdersDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class GetAllPortfolioTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public GetAllPortfolioTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "GetAllPortfolio";
            tableMapping.ColumnMappings.Add("StockTransactionId", "StockTransactionId");
            tableMapping.ColumnMappings.Add("PortfolioId", "PortfolioId");
            tableMapping.ColumnMappings.Add("StockTicker", "StockTicker");
            tableMapping.ColumnMappings.Add("CallStatus", "CallStatus");
            tableMapping.ColumnMappings.Add("PortfolioEntryDate", "PortfolioEntryDate");
            tableMapping.ColumnMappings.Add("PortfolioExitDate", "PortfolioExitDate");
            tableMapping.ColumnMappings.Add("IsPartiallyExited", "IsPartiallyExited");
            tableMapping.ColumnMappings.Add("Qty", "Qty");
            tableMapping.ColumnMappings.Add("EntryPrice", "EntryPrice");
            tableMapping.ColumnMappings.Add("ExitPrice", "ExitPrice");
            tableMapping.ColumnMappings.Add("StopLoss", "StopLoss");
            tableMapping.ColumnMappings.Add("Updates", "Updates");
            tableMapping.ColumnMappings.Add("UpdateDateTime", "UpdateDateTime");
            tableMapping.ColumnMappings.Add("BuyOrSellId", "BuyOrSellId");
            tableMapping.ColumnMappings.Add("CompanyName", "CompanyName");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::DStreet.USAdvisory.Business.Properties.Settings.Default.USAdvisoryConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "dbo.GetAllPortfolio";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.StoredProcedure;
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RETURN_VALUE", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.ReturnValue, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@OpenOrClose", global::System.Data.SqlDbType.Char, 1, global::System.Data.ParameterDirection.Input, 0, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(USAdvisoryDataSet.GetAllPortfolioDataTable dataTable, string OpenOrClose) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((OpenOrClose == null)) {
                this.Adapter.SelectCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = ((string)(OpenOrClose));
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual USAdvisoryDataSet.GetAllPortfolioDataTable GetData(string OpenOrClose) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((OpenOrClose == null)) {
                this.Adapter.SelectCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = ((string)(OpenOrClose));
            }
            USAdvisoryDataSet.GetAllPortfolioDataTable dataTable = new USAdvisoryDataSet.GetAllPortfolioDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class GetAllUsersTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public GetAllUsersTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "GetAllUsers";
            tableMapping.ColumnMappings.Add("UserId", "UserId");
            tableMapping.ColumnMappings.Add("Password", "Password");
            tableMapping.ColumnMappings.Add("FirstName", "FirstName");
            tableMapping.ColumnMappings.Add("LastName", "LastName");
            tableMapping.ColumnMappings.Add("PhoneNumber", "PhoneNumber");
            tableMapping.ColumnMappings.Add("Address", "Address");
            tableMapping.ColumnMappings.Add("State", "State");
            tableMapping.ColumnMappings.Add("Country", "Country");
            tableMapping.ColumnMappings.Add("ZipCode", "ZipCode");
            tableMapping.ColumnMappings.Add("IsPaidSubscriber", "IsPaidSubscriber");
            tableMapping.ColumnMappings.Add("IsAutoRenewal", "IsAutoRenewal");
            tableMapping.ColumnMappings.Add("RegistrationDate", "RegistrationDate");
            tableMapping.ColumnMappings.Add("SubscriptionStartDate", "SubscriptionStartDate");
            tableMapping.ColumnMappings.Add("SubscriptionEndDate", "SubscriptionEndDate");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::DStreet.USAdvisory.Business.Properties.Settings.Default.USAdvisoryConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "dbo.GetAllUsers";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.StoredProcedure;
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RETURN_VALUE", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.ReturnValue, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(USAdvisoryDataSet.GetAllUsersDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual USAdvisoryDataSet.GetAllUsersDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            USAdvisoryDataSet.GetAllUsersDataTable dataTable = new USAdvisoryDataSet.GetAllUsersDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class GetAllWatchOutNewsTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public GetAllWatchOutNewsTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "GetAllWatchOutNews";
            tableMapping.ColumnMappings.Add("WatchOutId", "WatchOutId");
            tableMapping.ColumnMappings.Add("WatchOuttitle", "WatchOuttitle");
            tableMapping.ColumnMappings.Add("WatchOutText", "WatchOutText");
            tableMapping.ColumnMappings.Add("WatchOutDateTime", "WatchOutDateTime");
            tableMapping.ColumnMappings.Add("Ticker", "Ticker");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::DStreet.USAdvisory.Business.Properties.Settings.Default.USAdvisoryConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "dbo.GetAllWatchOutNews";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.StoredProcedure;
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RETURN_VALUE", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.ReturnValue, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(USAdvisoryDataSet.GetAllWatchOutNewsDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual USAdvisoryDataSet.GetAllWatchOutNewsDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            USAdvisoryDataSet.GetAllWatchOutNewsDataTable dataTable = new USAdvisoryDataSet.GetAllWatchOutNewsDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class GetEmailBySendEmailIdTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public GetEmailBySendEmailIdTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "GetEmailBySendEmailId";
            tableMapping.ColumnMappings.Add("EmailDescription", "EmailDescription");
            tableMapping.ColumnMappings.Add("EmailSubject", "EmailSubject");
            tableMapping.ColumnMappings.Add("Emaildatetime", "Emaildatetime");
            tableMapping.ColumnMappings.Add("IsEmailSent", "IsEmailSent");
            tableMapping.ColumnMappings.Add("IsSubscribers", "IsSubscribers");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::DStreet.USAdvisory.Business.Properties.Settings.Default.USAdvisoryConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "dbo.GetEmailBySendEmailId";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.StoredProcedure;
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RETURN_VALUE", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.ReturnValue, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@SendEmailId", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(USAdvisoryDataSet.GetEmailBySendEmailIdDataTable dataTable, global::System.Nullable<int> SendEmailId) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((SendEmailId.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[1].Value = ((int)(SendEmailId.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual USAdvisoryDataSet.GetEmailBySendEmailIdDataTable GetData(global::System.Nullable<int> SendEmailId) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((SendEmailId.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[1].Value = ((int)(SendEmailId.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            USAdvisoryDataSet.GetEmailBySendEmailIdDataTable dataTable = new USAdvisoryDataSet.GetEmailBySendEmailIdDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class GetMarketCommentaryByArticleTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public GetMarketCommentaryByArticleTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "GetMarketCommentaryByArticle";
            tableMapping.ColumnMappings.Add("MarketCommentaryTitle", "MarketCommentaryTitle");
            tableMapping.ColumnMappings.Add("MarketCommentaryDesc", "MarketCommentaryDesc");
            tableMapping.ColumnMappings.Add("IsCommentaryactive", "IsCommentaryactive");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::DStreet.USAdvisory.Business.Properties.Settings.Default.USAdvisoryConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "dbo.GetMarketCommentaryByArticle";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.StoredProcedure;
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RETURN_VALUE", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.ReturnValue, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ArticleId", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(USAdvisoryDataSet.GetMarketCommentaryByArticleDataTable dataTable, global::System.Nullable<int> ArticleId) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((ArticleId.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[1].Value = ((int)(ArticleId.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual USAdvisoryDataSet.GetMarketCommentaryByArticleDataTable GetData(global::System.Nullable<int> ArticleId) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((ArticleId.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[1].Value = ((int)(ArticleId.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            USAdvisoryDataSet.GetMarketCommentaryByArticleDataTable dataTable = new USAdvisoryDataSet.GetMarketCommentaryByArticleDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class GetNewsAndViewsByArticleTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public GetNewsAndViewsByArticleTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "GetNewsAndViewsByArticle";
            tableMapping.ColumnMappings.Add("NewsId", "NewsId");
            tableMapping.ColumnMappings.Add("NewsTitle", "NewsTitle");
            tableMapping.ColumnMappings.Add("NewsDescription", "NewsDescription");
            tableMapping.ColumnMappings.Add("NewsDateTime", "NewsDateTime");
            tableMapping.ColumnMappings.Add("IsActive", "IsActive");
            tableMapping.ColumnMappings.Add("IsPaid", "IsPaid");
            tableMapping.ColumnMappings.Add("Ticker", "Ticker");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::DStreet.USAdvisory.Business.Properties.Settings.Default.USAdvisoryConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "dbo.GetNewsAndViewsByArticle";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.StoredProcedure;
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RETURN_VALUE", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.ReturnValue, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@NewsId", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(USAdvisoryDataSet.GetNewsAndViewsByArticleDataTable dataTable, global::System.Nullable<int> NewsId) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((NewsId.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[1].Value = ((int)(NewsId.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual USAdvisoryDataSet.GetNewsAndViewsByArticleDataTable GetData(global::System.Nullable<int> NewsId) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((NewsId.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[1].Value = ((int)(NewsId.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            USAdvisoryDataSet.GetNewsAndViewsByArticleDataTable dataTable = new USAdvisoryDataSet.GetNewsAndViewsByArticleDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class GetOrdesrByUserIdOrderIdTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public GetOrdesrByUserIdOrderIdTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "GetOrdesrByUserIdOrderId";
            tableMapping.ColumnMappings.Add("UserId", "UserId");
            tableMapping.ColumnMappings.Add("UniqueOrderId", "UniqueOrderId");
            tableMapping.ColumnMappings.Add("NoOfMonthsSubscriptionDesc", "NoOfMonthsSubscriptionDesc");
            tableMapping.ColumnMappings.Add("PaymentDate", "PaymentDate");
            tableMapping.ColumnMappings.Add("VendorReferenceId", "VendorReferenceId");
            tableMapping.ColumnMappings.Add("SubscriptionStartDate", "SubscriptionStartDate");
            tableMapping.ColumnMappings.Add("SubscriptionEndDate", "SubscriptionEndDate");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::DStreet.USAdvisory.Business.Properties.Settings.Default.USAdvisoryConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "dbo.GetOrdesrByUserIdOrderId";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.StoredProcedure;
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RETURN_VALUE", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.ReturnValue, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@UserId", global::System.Data.SqlDbType.VarChar, 500, global::System.Data.ParameterDirection.Input, 0, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@OrderId", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(USAdvisoryDataSet.GetOrdesrByUserIdOrderIdDataTable dataTable, string UserId, global::System.Nullable<int> OrderId) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((UserId == null)) {
                this.Adapter.SelectCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = ((string)(UserId));
            }
            if ((OrderId.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[2].Value = ((int)(OrderId.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual USAdvisoryDataSet.GetOrdesrByUserIdOrderIdDataTable GetData(string UserId, global::System.Nullable<int> OrderId) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((UserId == null)) {
                this.Adapter.SelectCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = ((string)(UserId));
            }
            if ((OrderId.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[2].Value = ((int)(OrderId.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            USAdvisoryDataSet.GetOrdesrByUserIdOrderIdDataTable dataTable = new USAdvisoryDataSet.GetOrdesrByUserIdOrderIdDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class GetPortfolioByTransactionIdTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public GetPortfolioByTransactionIdTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "GetPortfolioByTransactionId";
            tableMapping.ColumnMappings.Add("StockTransactionId", "StockTransactionId");
            tableMapping.ColumnMappings.Add("PortfolioId", "PortfolioId");
            tableMapping.ColumnMappings.Add("CompanyName", "CompanyName");
            tableMapping.ColumnMappings.Add("StockTicker", "StockTicker");
            tableMapping.ColumnMappings.Add("BuyOrSellId", "BuyOrSellId");
            tableMapping.ColumnMappings.Add("EntryPrice", "EntryPrice");
            tableMapping.ColumnMappings.Add("ExitPrice", "ExitPrice");
            tableMapping.ColumnMappings.Add("StopLoss", "StopLoss");
            tableMapping.ColumnMappings.Add("Updates", "Updates");
            tableMapping.ColumnMappings.Add("UpdateDateTime", "UpdateDateTime");
            tableMapping.ColumnMappings.Add("PortfolioEntryDate", "PortfolioEntryDate");
            tableMapping.ColumnMappings.Add("CallStatus", "CallStatus");
            tableMapping.ColumnMappings.Add("PortfolioExitDate", "PortfolioExitDate");
            tableMapping.ColumnMappings.Add("IsPartiallyExited", "IsPartiallyExited");
            tableMapping.ColumnMappings.Add("Qty", "Qty");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::DStreet.USAdvisory.Business.Properties.Settings.Default.USAdvisoryConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "dbo.GetPortfolioByTransactionId";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.StoredProcedure;
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RETURN_VALUE", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.ReturnValue, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@StockTransactionId", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(USAdvisoryDataSet.GetPortfolioByTransactionIdDataTable dataTable, global::System.Nullable<int> StockTransactionId) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((StockTransactionId.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[1].Value = ((int)(StockTransactionId.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual USAdvisoryDataSet.GetPortfolioByTransactionIdDataTable GetData(global::System.Nullable<int> StockTransactionId) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((StockTransactionId.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[1].Value = ((int)(StockTransactionId.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            USAdvisoryDataSet.GetPortfolioByTransactionIdDataTable dataTable = new USAdvisoryDataSet.GetPortfolioByTransactionIdDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class GetPremiumServiceByArticleTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public GetPremiumServiceByArticleTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "GetPremiumServiceByArticle";
            tableMapping.ColumnMappings.Add("PremiumServiceTitle", "PremiumServiceTitle");
            tableMapping.ColumnMappings.Add("PremiumServiceDescription", "PremiumServiceDescription");
            tableMapping.ColumnMappings.Add("PremiumServiceDate", "PremiumServiceDate");
            tableMapping.ColumnMappings.Add("IsActive", "IsActive");
            tableMapping.ColumnMappings.Add("IsPaid", "IsPaid");
            tableMapping.ColumnMappings.Add("Ticker", "Ticker");
            tableMapping.ColumnMappings.Add("TypeOfTradeId", "TypeOfTradeId");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::DStreet.USAdvisory.Business.Properties.Settings.Default.USAdvisoryConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "dbo.GetPremiumServiceByArticle";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.StoredProcedure;
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RETURN_VALUE", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.ReturnValue, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PremiumServiceId", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(USAdvisoryDataSet.GetPremiumServiceByArticleDataTable dataTable, global::System.Nullable<int> PremiumServiceId) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((PremiumServiceId.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[1].Value = ((int)(PremiumServiceId.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual USAdvisoryDataSet.GetPremiumServiceByArticleDataTable GetData(global::System.Nullable<int> PremiumServiceId) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((PremiumServiceId.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[1].Value = ((int)(PremiumServiceId.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            USAdvisoryDataSet.GetPremiumServiceByArticleDataTable dataTable = new USAdvisoryDataSet.GetPremiumServiceByArticleDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class GetPremiumServicesTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public GetPremiumServicesTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "GetPremiumServices";
            tableMapping.ColumnMappings.Add("PremiumServiceId", "PremiumServiceId");
            tableMapping.ColumnMappings.Add("PremiumServiceTitle", "PremiumServiceTitle");
            tableMapping.ColumnMappings.Add("PremiumServiceDescription", "PremiumServiceDescription");
            tableMapping.ColumnMappings.Add("PremiumServicedate", "PremiumServicedate");
            tableMapping.ColumnMappings.Add("IsActive", "IsActive");
            tableMapping.ColumnMappings.Add("IsPaid", "IsPaid");
            tableMapping.ColumnMappings.Add("Ticker", "Ticker");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::DStreet.USAdvisory.Business.Properties.Settings.Default.USAdvisoryConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "dbo.GetPremiumServices";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.StoredProcedure;
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RETURN_VALUE", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.ReturnValue, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TypeOfTradeId", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(USAdvisoryDataSet.GetPremiumServicesDataTable dataTable, global::System.Nullable<int> TypeOfTradeId) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((TypeOfTradeId.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[1].Value = ((int)(TypeOfTradeId.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual USAdvisoryDataSet.GetPremiumServicesDataTable GetData(global::System.Nullable<int> TypeOfTradeId) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((TypeOfTradeId.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[1].Value = ((int)(TypeOfTradeId.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            USAdvisoryDataSet.GetPremiumServicesDataTable dataTable = new USAdvisoryDataSet.GetPremiumServicesDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class GetUserByUserIdTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public GetUserByUserIdTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "GetUserByUserId";
            tableMapping.ColumnMappings.Add("UserId", "UserId");
            tableMapping.ColumnMappings.Add("Password", "Password");
            tableMapping.ColumnMappings.Add("FirstName", "FirstName");
            tableMapping.ColumnMappings.Add("LastName", "LastName");
            tableMapping.ColumnMappings.Add("PhoneNumber", "PhoneNumber");
            tableMapping.ColumnMappings.Add("Address", "Address");
            tableMapping.ColumnMappings.Add("State", "State");
            tableMapping.ColumnMappings.Add("Country", "Country");
            tableMapping.ColumnMappings.Add("ZipCode", "ZipCode");
            tableMapping.ColumnMappings.Add("IsPaidSubscriber", "IsPaidSubscriber");
            tableMapping.ColumnMappings.Add("IsAutoRenewal", "IsAutoRenewal");
            tableMapping.ColumnMappings.Add("RegistrationDate", "RegistrationDate");
            tableMapping.ColumnMappings.Add("SubscriptionStartDate", "SubscriptionStartDate");
            tableMapping.ColumnMappings.Add("SubscriptionEndDate", "SubscriptionEndDate");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::DStreet.USAdvisory.Business.Properties.Settings.Default.USAdvisoryConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "dbo.GetUserByUserId";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.StoredProcedure;
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RETURN_VALUE", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.ReturnValue, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@UserId", global::System.Data.SqlDbType.VarChar, 500, global::System.Data.ParameterDirection.Input, 0, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(USAdvisoryDataSet.GetUserByUserIdDataTable dataTable, string UserId) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((UserId == null)) {
                this.Adapter.SelectCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = ((string)(UserId));
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual USAdvisoryDataSet.GetUserByUserIdDataTable GetData(string UserId) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((UserId == null)) {
                this.Adapter.SelectCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = ((string)(UserId));
            }
            USAdvisoryDataSet.GetUserByUserIdDataTable dataTable = new USAdvisoryDataSet.GetUserByUserIdDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class GetWatchOutNewsByArticleTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public GetWatchOutNewsByArticleTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "GetWatchOutNewsByArticle";
            tableMapping.ColumnMappings.Add("Watchouttitle", "Watchouttitle");
            tableMapping.ColumnMappings.Add("WatchOutText", "WatchOutText");
            tableMapping.ColumnMappings.Add("IsPaid", "IsPaid");
            tableMapping.ColumnMappings.Add("Ticker", "Ticker");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::DStreet.USAdvisory.Business.Properties.Settings.Default.USAdvisoryConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "dbo.GetWatchOutNewsByArticle";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.StoredProcedure;
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RETURN_VALUE", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.ReturnValue, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@WatchoutId", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(USAdvisoryDataSet.GetWatchOutNewsByArticleDataTable dataTable, global::System.Nullable<int> WatchoutId) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((WatchoutId.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[1].Value = ((int)(WatchoutId.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual USAdvisoryDataSet.GetWatchOutNewsByArticleDataTable GetData(global::System.Nullable<int> WatchoutId) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((WatchoutId.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[1].Value = ((int)(WatchoutId.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            USAdvisoryDataSet.GetWatchOutNewsByArticleDataTable dataTable = new USAdvisoryDataSet.GetWatchOutNewsByArticleDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class UI_GetAllMarketCommentaryForTodayTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public UI_GetAllMarketCommentaryForTodayTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "UI_GetAllMarketCommentaryForToday";
            tableMapping.ColumnMappings.Add("MarketCommentaryId", "MarketCommentaryId");
            tableMapping.ColumnMappings.Add("MarketCommentaryTitle", "MarketCommentaryTitle");
            tableMapping.ColumnMappings.Add("MarketCommentaryDateTime", "MarketCommentaryDateTime");
            tableMapping.ColumnMappings.Add("MarketCommentaryDesc", "MarketCommentaryDesc");
            tableMapping.ColumnMappings.Add("IsCommentaryActive", "IsCommentaryActive");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::DStreet.USAdvisory.Business.Properties.Settings.Default.USAdvisoryConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "dbo.UI_GetAllMarketCommentaryForToday";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.StoredProcedure;
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RETURN_VALUE", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.ReturnValue, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(USAdvisoryDataSet.UI_GetAllMarketCommentaryForTodayDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual USAdvisoryDataSet.UI_GetAllMarketCommentaryForTodayDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            USAdvisoryDataSet.UI_GetAllMarketCommentaryForTodayDataTable dataTable = new USAdvisoryDataSet.UI_GetAllMarketCommentaryForTodayDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class UI_GetAllNewsViewsTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public UI_GetAllNewsViewsTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "UI_GetAllNewsViews";
            tableMapping.ColumnMappings.Add("NewsId", "NewsId");
            tableMapping.ColumnMappings.Add("NewsTitle", "NewsTitle");
            tableMapping.ColumnMappings.Add("NewsDateTime", "NewsDateTime");
            tableMapping.ColumnMappings.Add("NewsDescription", "NewsDescription");
            tableMapping.ColumnMappings.Add("IsActive", "IsActive");
            tableMapping.ColumnMappings.Add("IsPaid", "IsPaid");
            tableMapping.ColumnMappings.Add("Ticker", "Ticker");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::DStreet.USAdvisory.Business.Properties.Settings.Default.USAdvisoryConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "dbo.UI_GetAllNewsViews";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.StoredProcedure;
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RETURN_VALUE", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.ReturnValue, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(USAdvisoryDataSet.UI_GetAllNewsViewsDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual USAdvisoryDataSet.UI_GetAllNewsViewsDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            USAdvisoryDataSet.UI_GetAllNewsViewsDataTable dataTable = new USAdvisoryDataSet.UI_GetAllNewsViewsDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class UI_GetAllWatchOutNewsForTodayTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public UI_GetAllWatchOutNewsForTodayTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "UI_GetAllWatchOutNewsForToday";
            tableMapping.ColumnMappings.Add("WatchOutId", "WatchOutId");
            tableMapping.ColumnMappings.Add("WatchOutDateTime", "WatchOutDateTime");
            tableMapping.ColumnMappings.Add("WatchOutText", "WatchOutText");
            tableMapping.ColumnMappings.Add("WatchOutTitle", "WatchOutTitle");
            tableMapping.ColumnMappings.Add("IsPaid", "IsPaid");
            tableMapping.ColumnMappings.Add("Ticker", "Ticker");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::DStreet.USAdvisory.Business.Properties.Settings.Default.USAdvisoryConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "dbo.UI_GetAllWatchOutNewsForToday";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.StoredProcedure;
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RETURN_VALUE", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.ReturnValue, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(USAdvisoryDataSet.UI_GetAllWatchOutNewsForTodayDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual USAdvisoryDataSet.UI_GetAllWatchOutNewsForTodayDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            USAdvisoryDataSet.UI_GetAllWatchOutNewsForTodayDataTable dataTable = new USAdvisoryDataSet.UI_GetAllWatchOutNewsForTodayDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class UI_GetNewsViewsByNewsIdTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public UI_GetNewsViewsByNewsIdTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "UI_GetNewsViewsByNewsId";
            tableMapping.ColumnMappings.Add("NewsId", "NewsId");
            tableMapping.ColumnMappings.Add("NewsTitle", "NewsTitle");
            tableMapping.ColumnMappings.Add("NewsDateTime", "NewsDateTime");
            tableMapping.ColumnMappings.Add("NewsDescription", "NewsDescription");
            tableMapping.ColumnMappings.Add("IsActive", "IsActive");
            tableMapping.ColumnMappings.Add("IsPaid", "IsPaid");
            tableMapping.ColumnMappings.Add("Ticker", "Ticker");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::DStreet.USAdvisory.Business.Properties.Settings.Default.USAdvisoryConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "dbo.UI_GetNewsViewsByNewsId";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.StoredProcedure;
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RETURN_VALUE", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.ReturnValue, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@NewsId", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(USAdvisoryDataSet.UI_GetNewsViewsByNewsIdDataTable dataTable, global::System.Nullable<int> NewsId) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((NewsId.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[1].Value = ((int)(NewsId.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual USAdvisoryDataSet.UI_GetNewsViewsByNewsIdDataTable GetData(global::System.Nullable<int> NewsId) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((NewsId.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[1].Value = ((int)(NewsId.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            USAdvisoryDataSet.UI_GetNewsViewsByNewsIdDataTable dataTable = new USAdvisoryDataSet.UI_GetNewsViewsByNewsIdDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class UI_GetPremiumServicesTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public UI_GetPremiumServicesTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "UI_GetPremiumServices";
            tableMapping.ColumnMappings.Add("PremiumServiceId", "PremiumServiceId");
            tableMapping.ColumnMappings.Add("Ticker", "Ticker");
            tableMapping.ColumnMappings.Add("PremiumServiceTitle", "PremiumServiceTitle");
            tableMapping.ColumnMappings.Add("PremiumServiceDescription", "PremiumServiceDescription");
            tableMapping.ColumnMappings.Add("IsActive", "IsActive");
            tableMapping.ColumnMappings.Add("IsPaid", "IsPaid");
            tableMapping.ColumnMappings.Add("TypeOfTradeId", "TypeOfTradeId");
            tableMapping.ColumnMappings.Add("PremiumServiceDate", "PremiumServiceDate");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::DStreet.USAdvisory.Business.Properties.Settings.Default.USAdvisoryConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "dbo.UI_GetPremiumServices";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.StoredProcedure;
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RETURN_VALUE", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.ReturnValue, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TypeOfTradeId", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(USAdvisoryDataSet.UI_GetPremiumServicesDataTable dataTable, global::System.Nullable<int> TypeOfTradeId) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((TypeOfTradeId.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[1].Value = ((int)(TypeOfTradeId.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual USAdvisoryDataSet.UI_GetPremiumServicesDataTable GetData(global::System.Nullable<int> TypeOfTradeId) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((TypeOfTradeId.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[1].Value = ((int)(TypeOfTradeId.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            USAdvisoryDataSet.UI_GetPremiumServicesDataTable dataTable = new USAdvisoryDataSet.UI_GetPremiumServicesDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class UI_GetPremiumServicesByPremiumServiceIdTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public UI_GetPremiumServicesByPremiumServiceIdTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "UI_GetPremiumServicesByPremiumServiceId";
            tableMapping.ColumnMappings.Add("PremiumServiceId", "PremiumServiceId");
            tableMapping.ColumnMappings.Add("Ticker", "Ticker");
            tableMapping.ColumnMappings.Add("PremiumServiceTitle", "PremiumServiceTitle");
            tableMapping.ColumnMappings.Add("PremiumServiceDescription", "PremiumServiceDescription");
            tableMapping.ColumnMappings.Add("IsActive", "IsActive");
            tableMapping.ColumnMappings.Add("IsPaid", "IsPaid");
            tableMapping.ColumnMappings.Add("TypeOfTradeId", "TypeOfTradeId");
            tableMapping.ColumnMappings.Add("PremiumServiceDate", "PremiumServiceDate");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::DStreet.USAdvisory.Business.Properties.Settings.Default.USAdvisoryConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "dbo.UI_GetPremiumServicesByPremiumServiceId";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.StoredProcedure;
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RETURN_VALUE", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.ReturnValue, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PremiumServiceId", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(USAdvisoryDataSet.UI_GetPremiumServicesByPremiumServiceIdDataTable dataTable, global::System.Nullable<int> PremiumServiceId) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((PremiumServiceId.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[1].Value = ((int)(PremiumServiceId.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual USAdvisoryDataSet.UI_GetPremiumServicesByPremiumServiceIdDataTable GetData(global::System.Nullable<int> PremiumServiceId) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((PremiumServiceId.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[1].Value = ((int)(PremiumServiceId.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            USAdvisoryDataSet.UI_GetPremiumServicesByPremiumServiceIdDataTable dataTable = new USAdvisoryDataSet.UI_GetPremiumServicesByPremiumServiceIdDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class UI_GetUserCredentialsTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public UI_GetUserCredentialsTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "UI_GetUserCredentials";
            tableMapping.ColumnMappings.Add("UserId", "UserId");
            tableMapping.ColumnMappings.Add("Password", "Password");
            tableMapping.ColumnMappings.Add("FirstName", "FirstName");
            tableMapping.ColumnMappings.Add("LastName", "LastName");
            tableMapping.ColumnMappings.Add("PhoneNumber", "PhoneNumber");
            tableMapping.ColumnMappings.Add("IsPaidSubscriber", "IsPaidSubscriber");
            tableMapping.ColumnMappings.Add("SubscriptionStartDate", "SubscriptionStartDate");
            tableMapping.ColumnMappings.Add("SubscriptionEndDate", "SubscriptionEndDate");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::DStreet.USAdvisory.Business.Properties.Settings.Default.USAdvisoryConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "dbo.UI_GetUserCredentials";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.StoredProcedure;
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RETURN_VALUE", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.ReturnValue, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@UserId", global::System.Data.SqlDbType.VarChar, 500, global::System.Data.ParameterDirection.Input, 0, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Password", global::System.Data.SqlDbType.VarChar, 50, global::System.Data.ParameterDirection.Input, 0, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(USAdvisoryDataSet.UI_GetUserCredentialsDataTable dataTable, string UserId, string Password) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((UserId == null)) {
                this.Adapter.SelectCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = ((string)(UserId));
            }
            if ((Password == null)) {
                this.Adapter.SelectCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[2].Value = ((string)(Password));
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual USAdvisoryDataSet.UI_GetUserCredentialsDataTable GetData(string UserId, string Password) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((UserId == null)) {
                this.Adapter.SelectCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = ((string)(UserId));
            }
            if ((Password == null)) {
                this.Adapter.SelectCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[2].Value = ((string)(Password));
            }
            USAdvisoryDataSet.UI_GetUserCredentialsDataTable dataTable = new USAdvisoryDataSet.UI_GetUserCredentialsDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class QueriesTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.IDbCommand[] _commandCollection;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.IDbCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.IDbCommand[17];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[0])).Connection = new global::System.Data.SqlClient.SqlConnection(global::DStreet.USAdvisory.Business.Properties.Settings.Default.USAdvisoryConnectionString);
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[0])).CommandText = "dbo.InsertEmailToSend";
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[0])).CommandType = global::System.Data.CommandType.StoredProcedure;
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[0])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RETURN_VALUE", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.ReturnValue, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[0])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@EmailDescription", global::System.Data.SqlDbType.NText, 1073741823, global::System.Data.ParameterDirection.Input, 0, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[0])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsSubscribers", global::System.Data.SqlDbType.Bit, 1, global::System.Data.ParameterDirection.Input, 1, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[0])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsEmailSent", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[0])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@EmailDateTime", global::System.Data.SqlDbType.DateTime, 8, global::System.Data.ParameterDirection.Input, 23, 3, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[0])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@EmailSubject", global::System.Data.SqlDbType.VarChar, 500, global::System.Data.ParameterDirection.Input, 0, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1] = new global::System.Data.SqlClient.SqlCommand();
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[1])).Connection = new global::System.Data.SqlClient.SqlConnection(global::DStreet.USAdvisory.Business.Properties.Settings.Default.USAdvisoryConnectionString);
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[1])).CommandText = "dbo.InsertMarketCommentary";
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[1])).CommandType = global::System.Data.CommandType.StoredProcedure;
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[1])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RETURN_VALUE", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.ReturnValue, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[1])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@MarketCommentaryTitle", global::System.Data.SqlDbType.VarChar, 5000, global::System.Data.ParameterDirection.Input, 0, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[1])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@MarketCommentaryDesc", global::System.Data.SqlDbType.NText, 1073741823, global::System.Data.ParameterDirection.Input, 0, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[1])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@MarketCommentaryDateTime", global::System.Data.SqlDbType.DateTime, 8, global::System.Data.ParameterDirection.Input, 23, 3, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[1])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsCommentaryActive", global::System.Data.SqlDbType.Bit, 1, global::System.Data.ParameterDirection.Input, 1, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2] = new global::System.Data.SqlClient.SqlCommand();
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[2])).Connection = new global::System.Data.SqlClient.SqlConnection(global::DStreet.USAdvisory.Business.Properties.Settings.Default.USAdvisoryConnectionString);
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[2])).CommandText = "dbo.InsertNewsViews";
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[2])).CommandType = global::System.Data.CommandType.StoredProcedure;
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[2])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RETURN_VALUE", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.ReturnValue, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[2])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@NewsTitle", global::System.Data.SqlDbType.VarChar, 5000, global::System.Data.ParameterDirection.Input, 0, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[2])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@NewsDescription", global::System.Data.SqlDbType.NText, 1073741823, global::System.Data.ParameterDirection.Input, 0, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[2])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@NewsDateTime", global::System.Data.SqlDbType.DateTime, 8, global::System.Data.ParameterDirection.Input, 23, 3, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[2])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsActive", global::System.Data.SqlDbType.Bit, 1, global::System.Data.ParameterDirection.Input, 1, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[2])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsPaid", global::System.Data.SqlDbType.Bit, 1, global::System.Data.ParameterDirection.Input, 1, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[2])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Ticker", global::System.Data.SqlDbType.VarChar, 12, global::System.Data.ParameterDirection.Input, 0, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[3] = new global::System.Data.SqlClient.SqlCommand();
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[3])).Connection = new global::System.Data.SqlClient.SqlConnection(global::DStreet.USAdvisory.Business.Properties.Settings.Default.USAdvisoryConnectionString);
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[3])).CommandText = "dbo.InsertOrder";
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[3])).CommandType = global::System.Data.CommandType.StoredProcedure;
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[3])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RETURN_VALUE", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.ReturnValue, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[3])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@UserId", global::System.Data.SqlDbType.VarChar, 500, global::System.Data.ParameterDirection.Input, 0, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[3])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@UniqueOrderId", global::System.Data.SqlDbType.VarChar, 500, global::System.Data.ParameterDirection.Input, 0, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[3])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@MonthsOfSubscription", global::System.Data.SqlDbType.VarChar, 100, global::System.Data.ParameterDirection.Input, 0, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[3])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PaymentDate", global::System.Data.SqlDbType.DateTime, 8, global::System.Data.ParameterDirection.Input, 23, 3, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[3])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@VendorReferenceId", global::System.Data.SqlDbType.VarChar, 500, global::System.Data.ParameterDirection.Input, 0, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[3])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@SubscriptionStartDate", global::System.Data.SqlDbType.DateTime, 8, global::System.Data.ParameterDirection.Input, 23, 3, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[3])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@SubscriptionEndDate", global::System.Data.SqlDbType.DateTime, 8, global::System.Data.ParameterDirection.Input, 23, 3, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[4] = new global::System.Data.SqlClient.SqlCommand();
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[4])).Connection = new global::System.Data.SqlClient.SqlConnection(global::DStreet.USAdvisory.Business.Properties.Settings.Default.USAdvisoryConnectionString);
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[4])).CommandText = "dbo.InsertPortfolio";
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[4])).CommandType = global::System.Data.CommandType.StoredProcedure;
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[4])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RETURN_VALUE", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.ReturnValue, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[4])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PortfolioId", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[4])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CompanyName", global::System.Data.SqlDbType.VarChar, 500, global::System.Data.ParameterDirection.Input, 0, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[4])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@StockTicker", global::System.Data.SqlDbType.Char, 100, global::System.Data.ParameterDirection.Input, 0, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[4])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@BuyOrSellId", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[4])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@QTY", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[4])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@EntryPrice", global::System.Data.SqlDbType.Decimal, 9, global::System.Data.ParameterDirection.Input, 18, 2, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[4])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ExitPrice", global::System.Data.SqlDbType.Decimal, 9, global::System.Data.ParameterDirection.Input, 18, 2, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[4])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@StopLoss", global::System.Data.SqlDbType.Decimal, 9, global::System.Data.ParameterDirection.Input, 18, 2, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[4])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Updates", global::System.Data.SqlDbType.NText, 1073741823, global::System.Data.ParameterDirection.Input, 0, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[4])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@UpdateDateTime", global::System.Data.SqlDbType.DateTime, 8, global::System.Data.ParameterDirection.Input, 23, 3, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[4])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PortfolioEntryDate", global::System.Data.SqlDbType.DateTime, 8, global::System.Data.ParameterDirection.Input, 23, 3, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[4])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PortfolioExitDate", global::System.Data.SqlDbType.DateTime, 8, global::System.Data.ParameterDirection.Input, 23, 3, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[4])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CallStatus", global::System.Data.SqlDbType.Char, 1, global::System.Data.ParameterDirection.Input, 0, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[4])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsPartiallyExited", global::System.Data.SqlDbType.Bit, 1, global::System.Data.ParameterDirection.Input, 1, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[5] = new global::System.Data.SqlClient.SqlCommand();
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[5])).Connection = new global::System.Data.SqlClient.SqlConnection(global::DStreet.USAdvisory.Business.Properties.Settings.Default.USAdvisoryConnectionString);
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[5])).CommandText = "dbo.InsertPremiumServices";
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[5])).CommandType = global::System.Data.CommandType.StoredProcedure;
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[5])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RETURN_VALUE", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.ReturnValue, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[5])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PremiumServiceTitle", global::System.Data.SqlDbType.VarChar, 5000, global::System.Data.ParameterDirection.Input, 0, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[5])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PremiumServiceDescription", global::System.Data.SqlDbType.NText, 1073741823, global::System.Data.ParameterDirection.Input, 0, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[5])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PremiumServiceDateTime", global::System.Data.SqlDbType.DateTime, 8, global::System.Data.ParameterDirection.Input, 23, 3, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[5])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsActive", global::System.Data.SqlDbType.Bit, 1, global::System.Data.ParameterDirection.Input, 1, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[5])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsPaid", global::System.Data.SqlDbType.Bit, 1, global::System.Data.ParameterDirection.Input, 1, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[5])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Ticker", global::System.Data.SqlDbType.VarChar, 12, global::System.Data.ParameterDirection.Input, 0, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[5])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TypeOfTradeId", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[6] = new global::System.Data.SqlClient.SqlCommand();
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[6])).Connection = new global::System.Data.SqlClient.SqlConnection(global::DStreet.USAdvisory.Business.Properties.Settings.Default.USAdvisoryConnectionString);
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[6])).CommandText = "dbo.InsertUser";
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[6])).CommandType = global::System.Data.CommandType.StoredProcedure;
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[6])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RETURN_VALUE", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.ReturnValue, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[6])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@UserId", global::System.Data.SqlDbType.VarChar, 500, global::System.Data.ParameterDirection.Input, 0, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[6])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Password", global::System.Data.SqlDbType.VarChar, 50, global::System.Data.ParameterDirection.Input, 0, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[6])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FirstName", global::System.Data.SqlDbType.VarChar, 500, global::System.Data.ParameterDirection.Input, 0, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[6])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@LastName", global::System.Data.SqlDbType.VarChar, 500, global::System.Data.ParameterDirection.Input, 0, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[6])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Address", global::System.Data.SqlDbType.VarChar, 500, global::System.Data.ParameterDirection.Input, 0, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[6])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PhoneNumber", global::System.Data.SqlDbType.VarChar, 50, global::System.Data.ParameterDirection.Input, 0, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[6])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@State", global::System.Data.SqlDbType.Char, 10, global::System.Data.ParameterDirection.Input, 0, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[6])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Country", global::System.Data.SqlDbType.NChar, 10, global::System.Data.ParameterDirection.Input, 0, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[6])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ZipCode", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[6])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsPaidSubscriber", global::System.Data.SqlDbType.Bit, 1, global::System.Data.ParameterDirection.Input, 1, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[6])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsAutoRenewal", global::System.Data.SqlDbType.Bit, 1, global::System.Data.ParameterDirection.Input, 1, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[6])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RegistrationDate", global::System.Data.SqlDbType.DateTime, 8, global::System.Data.ParameterDirection.Input, 23, 3, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[6])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@SubscriptionStartDate", global::System.Data.SqlDbType.DateTime, 8, global::System.Data.ParameterDirection.Input, 23, 3, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[6])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@SubscriptionEndDate", global::System.Data.SqlDbType.DateTime, 8, global::System.Data.ParameterDirection.Input, 23, 3, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[7] = new global::System.Data.SqlClient.SqlCommand();
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[7])).Connection = new global::System.Data.SqlClient.SqlConnection(global::DStreet.USAdvisory.Business.Properties.Settings.Default.USAdvisoryConnectionString);
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[7])).CommandText = "dbo.InsertWatchOutNews";
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[7])).CommandType = global::System.Data.CommandType.StoredProcedure;
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[7])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RETURN_VALUE", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.ReturnValue, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[7])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@WatchOutTitle", global::System.Data.SqlDbType.VarChar, 5000, global::System.Data.ParameterDirection.Input, 0, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[7])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@WatchOutText", global::System.Data.SqlDbType.NText, 1073741823, global::System.Data.ParameterDirection.Input, 0, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[7])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@WatchOutDateTime", global::System.Data.SqlDbType.DateTime, 8, global::System.Data.ParameterDirection.Input, 23, 3, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[7])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsPaid", global::System.Data.SqlDbType.Bit, 1, global::System.Data.ParameterDirection.Input, 1, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[7])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Ticker", global::System.Data.SqlDbType.VarChar, 12, global::System.Data.ParameterDirection.Input, 0, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[8] = new global::System.Data.SqlClient.SqlCommand();
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[8])).Connection = new global::System.Data.SqlClient.SqlConnection(global::DStreet.USAdvisory.Business.Properties.Settings.Default.USAdvisoryConnectionString);
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[8])).CommandText = "dbo.UI_EmailSubscription";
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[8])).CommandType = global::System.Data.CommandType.StoredProcedure;
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[8])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RETURN_VALUE", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.ReturnValue, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[8])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@EmailAddress", global::System.Data.SqlDbType.VarChar, 5000, global::System.Data.ParameterDirection.Input, 0, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[9] = new global::System.Data.SqlClient.SqlCommand();
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[9])).Connection = new global::System.Data.SqlClient.SqlConnection(global::DStreet.USAdvisory.Business.Properties.Settings.Default.USAdvisoryConnectionString);
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[9])).CommandText = "dbo.UpdateEmailToSend";
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[9])).CommandType = global::System.Data.CommandType.StoredProcedure;
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[9])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RETURN_VALUE", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.ReturnValue, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[9])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@SendEmailId", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[9])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@EmailDescription", global::System.Data.SqlDbType.NText, 1073741823, global::System.Data.ParameterDirection.Input, 0, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[9])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsSubscribers", global::System.Data.SqlDbType.Bit, 1, global::System.Data.ParameterDirection.Input, 1, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[9])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsEmailSent", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[9])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@EmailDateTime", global::System.Data.SqlDbType.DateTime, 8, global::System.Data.ParameterDirection.Input, 23, 3, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[9])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@EmailSubject", global::System.Data.SqlDbType.VarChar, 500, global::System.Data.ParameterDirection.Input, 0, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[10] = new global::System.Data.SqlClient.SqlCommand();
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[10])).Connection = new global::System.Data.SqlClient.SqlConnection(global::DStreet.USAdvisory.Business.Properties.Settings.Default.USAdvisoryConnectionString);
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[10])).CommandText = "dbo.UpdateMarketCommentary";
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[10])).CommandType = global::System.Data.CommandType.StoredProcedure;
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[10])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RETURN_VALUE", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.ReturnValue, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[10])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@MarketCommentaryID", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[10])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@MarketCommentaryTitle", global::System.Data.SqlDbType.VarChar, 500, global::System.Data.ParameterDirection.Input, 0, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[10])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@MarketCommentaryDesc", global::System.Data.SqlDbType.NText, 1073741823, global::System.Data.ParameterDirection.Input, 0, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[10])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@MarketCommentaryDateTime", global::System.Data.SqlDbType.DateTime, 8, global::System.Data.ParameterDirection.Input, 23, 3, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[10])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsCommentaryActive", global::System.Data.SqlDbType.Bit, 1, global::System.Data.ParameterDirection.Input, 1, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[11] = new global::System.Data.SqlClient.SqlCommand();
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[11])).Connection = new global::System.Data.SqlClient.SqlConnection(global::DStreet.USAdvisory.Business.Properties.Settings.Default.USAdvisoryConnectionString);
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[11])).CommandText = "dbo.UpdateNewsAndViews";
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[11])).CommandType = global::System.Data.CommandType.StoredProcedure;
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[11])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RETURN_VALUE", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.ReturnValue, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[11])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@NewsId", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[11])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@NewsTitle", global::System.Data.SqlDbType.VarChar, 500, global::System.Data.ParameterDirection.Input, 0, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[11])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@NewsDescription", global::System.Data.SqlDbType.NText, 1073741823, global::System.Data.ParameterDirection.Input, 0, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[11])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@NewsDateTime", global::System.Data.SqlDbType.DateTime, 8, global::System.Data.ParameterDirection.Input, 23, 3, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[11])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsActive", global::System.Data.SqlDbType.Bit, 1, global::System.Data.ParameterDirection.Input, 1, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[11])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsPaid", global::System.Data.SqlDbType.Bit, 1, global::System.Data.ParameterDirection.Input, 1, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[11])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Ticker", global::System.Data.SqlDbType.VarChar, 12, global::System.Data.ParameterDirection.Input, 0, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[12] = new global::System.Data.SqlClient.SqlCommand();
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[12])).Connection = new global::System.Data.SqlClient.SqlConnection(global::DStreet.USAdvisory.Business.Properties.Settings.Default.USAdvisoryConnectionString);
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[12])).CommandText = "dbo.UpdateOrders";
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[12])).CommandType = global::System.Data.CommandType.StoredProcedure;
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[12])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RETURN_VALUE", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.ReturnValue, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[12])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@UserId", global::System.Data.SqlDbType.VarChar, 500, global::System.Data.ParameterDirection.Input, 0, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[12])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@OrderId", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[12])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@UniqueOrderId", global::System.Data.SqlDbType.VarChar, 500, global::System.Data.ParameterDirection.Input, 0, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[12])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@MonthsOfSubscription", global::System.Data.SqlDbType.VarChar, 100, global::System.Data.ParameterDirection.Input, 0, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[12])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PaymentDate", global::System.Data.SqlDbType.DateTime, 8, global::System.Data.ParameterDirection.Input, 23, 3, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[12])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@VendorReferenceId", global::System.Data.SqlDbType.VarChar, 500, global::System.Data.ParameterDirection.Input, 0, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[12])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@SubscriptionStartDate", global::System.Data.SqlDbType.DateTime, 8, global::System.Data.ParameterDirection.Input, 23, 3, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[12])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@SubscriptionEndDate", global::System.Data.SqlDbType.DateTime, 8, global::System.Data.ParameterDirection.Input, 23, 3, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[13] = new global::System.Data.SqlClient.SqlCommand();
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[13])).Connection = new global::System.Data.SqlClient.SqlConnection(global::DStreet.USAdvisory.Business.Properties.Settings.Default.USAdvisoryConnectionString);
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[13])).CommandText = "dbo.UpdatePortfolio";
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[13])).CommandType = global::System.Data.CommandType.StoredProcedure;
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[13])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RETURN_VALUE", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.ReturnValue, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[13])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@StockTransactionId", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[13])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PortfolioId", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[13])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CompanyName", global::System.Data.SqlDbType.VarChar, 500, global::System.Data.ParameterDirection.Input, 0, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[13])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@StockTicker", global::System.Data.SqlDbType.Char, 100, global::System.Data.ParameterDirection.Input, 0, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[13])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@BuyOrSellId", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[13])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Qty", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[13])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@EntryPrice", global::System.Data.SqlDbType.Decimal, 9, global::System.Data.ParameterDirection.Input, 18, 2, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[13])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ExitPrice", global::System.Data.SqlDbType.Decimal, 9, global::System.Data.ParameterDirection.Input, 18, 2, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[13])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@StopLoss", global::System.Data.SqlDbType.Decimal, 9, global::System.Data.ParameterDirection.Input, 18, 2, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[13])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Updates", global::System.Data.SqlDbType.NText, 1073741823, global::System.Data.ParameterDirection.Input, 0, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[13])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@UpdateDateTime", global::System.Data.SqlDbType.DateTime, 8, global::System.Data.ParameterDirection.Input, 23, 3, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[13])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PortfolioEntryDate", global::System.Data.SqlDbType.DateTime, 8, global::System.Data.ParameterDirection.Input, 23, 3, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[13])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PortfolioExitDate", global::System.Data.SqlDbType.DateTime, 8, global::System.Data.ParameterDirection.Input, 23, 3, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[13])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CallStatus", global::System.Data.SqlDbType.Char, 1, global::System.Data.ParameterDirection.Input, 0, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[13])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsPartiallyExited", global::System.Data.SqlDbType.Bit, 1, global::System.Data.ParameterDirection.Input, 1, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[14] = new global::System.Data.SqlClient.SqlCommand();
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[14])).Connection = new global::System.Data.SqlClient.SqlConnection(global::DStreet.USAdvisory.Business.Properties.Settings.Default.USAdvisoryConnectionString);
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[14])).CommandText = "dbo.UpdatePremiumServices";
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[14])).CommandType = global::System.Data.CommandType.StoredProcedure;
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[14])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RETURN_VALUE", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.ReturnValue, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[14])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PremiumServiceId", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[14])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PremiumServiceTitle", global::System.Data.SqlDbType.VarChar, 500, global::System.Data.ParameterDirection.Input, 0, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[14])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PremiumServiceDescription", global::System.Data.SqlDbType.NText, 1073741823, global::System.Data.ParameterDirection.Input, 0, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[14])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PremiumServiceDateTime", global::System.Data.SqlDbType.DateTime, 8, global::System.Data.ParameterDirection.Input, 23, 3, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[14])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsActive", global::System.Data.SqlDbType.Bit, 1, global::System.Data.ParameterDirection.Input, 1, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[14])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsPaid", global::System.Data.SqlDbType.Bit, 1, global::System.Data.ParameterDirection.Input, 1, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[14])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Ticker", global::System.Data.SqlDbType.VarChar, 12, global::System.Data.ParameterDirection.Input, 0, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[14])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TypeOfTradeId", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[15] = new global::System.Data.SqlClient.SqlCommand();
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[15])).Connection = new global::System.Data.SqlClient.SqlConnection(global::DStreet.USAdvisory.Business.Properties.Settings.Default.USAdvisoryConnectionString);
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[15])).CommandText = "dbo.UpdateUser";
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[15])).CommandType = global::System.Data.CommandType.StoredProcedure;
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[15])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RETURN_VALUE", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.ReturnValue, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[15])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@UserId", global::System.Data.SqlDbType.VarChar, 500, global::System.Data.ParameterDirection.Input, 0, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[15])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Password", global::System.Data.SqlDbType.VarChar, 50, global::System.Data.ParameterDirection.Input, 0, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[15])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FirstName", global::System.Data.SqlDbType.VarChar, 500, global::System.Data.ParameterDirection.Input, 0, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[15])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@LastName", global::System.Data.SqlDbType.VarChar, 500, global::System.Data.ParameterDirection.Input, 0, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[15])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Address", global::System.Data.SqlDbType.VarChar, 500, global::System.Data.ParameterDirection.Input, 0, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[15])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PhoneNumber", global::System.Data.SqlDbType.VarChar, 50, global::System.Data.ParameterDirection.Input, 0, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[15])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@State", global::System.Data.SqlDbType.Char, 10, global::System.Data.ParameterDirection.Input, 0, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[15])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Country", global::System.Data.SqlDbType.NChar, 10, global::System.Data.ParameterDirection.Input, 0, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[15])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ZipCode", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[15])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsPaidSubscriber", global::System.Data.SqlDbType.Bit, 1, global::System.Data.ParameterDirection.Input, 1, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[15])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsAutoRenewal", global::System.Data.SqlDbType.Bit, 1, global::System.Data.ParameterDirection.Input, 1, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[15])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RegistrationDate", global::System.Data.SqlDbType.DateTime, 8, global::System.Data.ParameterDirection.Input, 23, 3, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[15])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@SubscriptionStartDate", global::System.Data.SqlDbType.DateTime, 8, global::System.Data.ParameterDirection.Input, 23, 3, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[15])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@SubscriptionEndDate", global::System.Data.SqlDbType.DateTime, 8, global::System.Data.ParameterDirection.Input, 23, 3, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[16] = new global::System.Data.SqlClient.SqlCommand();
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[16])).Connection = new global::System.Data.SqlClient.SqlConnection(global::DStreet.USAdvisory.Business.Properties.Settings.Default.USAdvisoryConnectionString);
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[16])).CommandText = "dbo.UpdateWatchOutNews";
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[16])).CommandType = global::System.Data.CommandType.StoredProcedure;
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[16])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RETURN_VALUE", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.ReturnValue, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[16])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@WatchOutId", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[16])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@WatchOutTitle", global::System.Data.SqlDbType.VarChar, 500, global::System.Data.ParameterDirection.Input, 0, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[16])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@WatchOutText", global::System.Data.SqlDbType.NText, 1073741823, global::System.Data.ParameterDirection.Input, 0, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[16])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@WatchOutDateTime", global::System.Data.SqlDbType.DateTime, 8, global::System.Data.ParameterDirection.Input, 23, 3, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[16])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsPaid", global::System.Data.SqlDbType.Bit, 1, global::System.Data.ParameterDirection.Input, 1, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[16])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Ticker", global::System.Data.SqlDbType.VarChar, 12, global::System.Data.ParameterDirection.Input, 0, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int InsertEmailToSend(string EmailDescription, global::System.Nullable<bool> IsSubscribers, global::System.Nullable<int> IsEmailSent, global::System.Nullable<global::System.DateTime> EmailDateTime, string EmailSubject) {
            global::System.Data.SqlClient.SqlCommand command = ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[0]));
            if ((EmailDescription == null)) {
                command.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                command.Parameters[1].Value = ((string)(EmailDescription));
            }
            if ((IsSubscribers.HasValue == true)) {
                command.Parameters[2].Value = ((bool)(IsSubscribers.Value));
            }
            else {
                command.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((IsEmailSent.HasValue == true)) {
                command.Parameters[3].Value = ((int)(IsEmailSent.Value));
            }
            else {
                command.Parameters[3].Value = global::System.DBNull.Value;
            }
            if ((EmailDateTime.HasValue == true)) {
                command.Parameters[4].Value = ((System.DateTime)(EmailDateTime.Value));
            }
            else {
                command.Parameters[4].Value = global::System.DBNull.Value;
            }
            if ((EmailSubject == null)) {
                command.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                command.Parameters[5].Value = ((string)(EmailSubject));
            }
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int InsertMarketCommentary(string MarketCommentaryTitle, string MarketCommentaryDesc, global::System.Nullable<global::System.DateTime> MarketCommentaryDateTime, global::System.Nullable<bool> IsCommentaryActive) {
            global::System.Data.SqlClient.SqlCommand command = ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[1]));
            if ((MarketCommentaryTitle == null)) {
                command.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                command.Parameters[1].Value = ((string)(MarketCommentaryTitle));
            }
            if ((MarketCommentaryDesc == null)) {
                command.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                command.Parameters[2].Value = ((string)(MarketCommentaryDesc));
            }
            if ((MarketCommentaryDateTime.HasValue == true)) {
                command.Parameters[3].Value = ((System.DateTime)(MarketCommentaryDateTime.Value));
            }
            else {
                command.Parameters[3].Value = global::System.DBNull.Value;
            }
            if ((IsCommentaryActive.HasValue == true)) {
                command.Parameters[4].Value = ((bool)(IsCommentaryActive.Value));
            }
            else {
                command.Parameters[4].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int InsertNewsViews(string NewsTitle, string NewsDescription, global::System.Nullable<global::System.DateTime> NewsDateTime, global::System.Nullable<bool> IsActive, global::System.Nullable<bool> IsPaid, string Ticker) {
            global::System.Data.SqlClient.SqlCommand command = ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[2]));
            if ((NewsTitle == null)) {
                command.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                command.Parameters[1].Value = ((string)(NewsTitle));
            }
            if ((NewsDescription == null)) {
                command.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                command.Parameters[2].Value = ((string)(NewsDescription));
            }
            if ((NewsDateTime.HasValue == true)) {
                command.Parameters[3].Value = ((System.DateTime)(NewsDateTime.Value));
            }
            else {
                command.Parameters[3].Value = global::System.DBNull.Value;
            }
            if ((IsActive.HasValue == true)) {
                command.Parameters[4].Value = ((bool)(IsActive.Value));
            }
            else {
                command.Parameters[4].Value = global::System.DBNull.Value;
            }
            if ((IsPaid.HasValue == true)) {
                command.Parameters[5].Value = ((bool)(IsPaid.Value));
            }
            else {
                command.Parameters[5].Value = global::System.DBNull.Value;
            }
            if ((Ticker == null)) {
                command.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                command.Parameters[6].Value = ((string)(Ticker));
            }
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int InsertOrder(string UserId, string UniqueOrderId, string MonthsOfSubscription, global::System.Nullable<global::System.DateTime> PaymentDate, string VendorReferenceId, global::System.Nullable<global::System.DateTime> SubscriptionStartDate, global::System.Nullable<global::System.DateTime> SubscriptionEndDate) {
            global::System.Data.SqlClient.SqlCommand command = ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[3]));
            if ((UserId == null)) {
                command.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                command.Parameters[1].Value = ((string)(UserId));
            }
            if ((UniqueOrderId == null)) {
                command.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                command.Parameters[2].Value = ((string)(UniqueOrderId));
            }
            if ((MonthsOfSubscription == null)) {
                command.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                command.Parameters[3].Value = ((string)(MonthsOfSubscription));
            }
            if ((PaymentDate.HasValue == true)) {
                command.Parameters[4].Value = ((System.DateTime)(PaymentDate.Value));
            }
            else {
                command.Parameters[4].Value = global::System.DBNull.Value;
            }
            if ((VendorReferenceId == null)) {
                command.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                command.Parameters[5].Value = ((string)(VendorReferenceId));
            }
            if ((SubscriptionStartDate.HasValue == true)) {
                command.Parameters[6].Value = ((System.DateTime)(SubscriptionStartDate.Value));
            }
            else {
                command.Parameters[6].Value = global::System.DBNull.Value;
            }
            if ((SubscriptionEndDate.HasValue == true)) {
                command.Parameters[7].Value = ((System.DateTime)(SubscriptionEndDate.Value));
            }
            else {
                command.Parameters[7].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int InsertPortfolio(global::System.Nullable<int> PortfolioId, string CompanyName, string StockTicker, global::System.Nullable<int> BuyOrSellId, global::System.Nullable<int> QTY, global::System.Nullable<decimal> EntryPrice, global::System.Nullable<decimal> ExitPrice, global::System.Nullable<decimal> StopLoss, string Updates, global::System.Nullable<global::System.DateTime> UpdateDateTime, global::System.Nullable<global::System.DateTime> PortfolioEntryDate, global::System.Nullable<global::System.DateTime> PortfolioExitDate, string CallStatus, global::System.Nullable<bool> IsPartiallyExited) {
            global::System.Data.SqlClient.SqlCommand command = ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[4]));
            if ((PortfolioId.HasValue == true)) {
                command.Parameters[1].Value = ((int)(PortfolioId.Value));
            }
            else {
                command.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((CompanyName == null)) {
                command.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                command.Parameters[2].Value = ((string)(CompanyName));
            }
            if ((StockTicker == null)) {
                command.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                command.Parameters[3].Value = ((string)(StockTicker));
            }
            if ((BuyOrSellId.HasValue == true)) {
                command.Parameters[4].Value = ((int)(BuyOrSellId.Value));
            }
            else {
                command.Parameters[4].Value = global::System.DBNull.Value;
            }
            if ((QTY.HasValue == true)) {
                command.Parameters[5].Value = ((int)(QTY.Value));
            }
            else {
                command.Parameters[5].Value = global::System.DBNull.Value;
            }
            if ((EntryPrice.HasValue == true)) {
                command.Parameters[6].Value = ((decimal)(EntryPrice.Value));
            }
            else {
                command.Parameters[6].Value = global::System.DBNull.Value;
            }
            if ((ExitPrice.HasValue == true)) {
                command.Parameters[7].Value = ((decimal)(ExitPrice.Value));
            }
            else {
                command.Parameters[7].Value = global::System.DBNull.Value;
            }
            if ((StopLoss.HasValue == true)) {
                command.Parameters[8].Value = ((decimal)(StopLoss.Value));
            }
            else {
                command.Parameters[8].Value = global::System.DBNull.Value;
            }
            if ((Updates == null)) {
                command.Parameters[9].Value = global::System.DBNull.Value;
            }
            else {
                command.Parameters[9].Value = ((string)(Updates));
            }
            if ((UpdateDateTime.HasValue == true)) {
                command.Parameters[10].Value = ((System.DateTime)(UpdateDateTime.Value));
            }
            else {
                command.Parameters[10].Value = global::System.DBNull.Value;
            }
            if ((PortfolioEntryDate.HasValue == true)) {
                command.Parameters[11].Value = ((System.DateTime)(PortfolioEntryDate.Value));
            }
            else {
                command.Parameters[11].Value = global::System.DBNull.Value;
            }
            if ((PortfolioExitDate.HasValue == true)) {
                command.Parameters[12].Value = ((System.DateTime)(PortfolioExitDate.Value));
            }
            else {
                command.Parameters[12].Value = global::System.DBNull.Value;
            }
            if ((CallStatus == null)) {
                command.Parameters[13].Value = global::System.DBNull.Value;
            }
            else {
                command.Parameters[13].Value = ((string)(CallStatus));
            }
            if ((IsPartiallyExited.HasValue == true)) {
                command.Parameters[14].Value = ((bool)(IsPartiallyExited.Value));
            }
            else {
                command.Parameters[14].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int InsertPremiumServices(string PremiumServiceTitle, string PremiumServiceDescription, global::System.Nullable<global::System.DateTime> PremiumServiceDateTime, global::System.Nullable<bool> IsActive, global::System.Nullable<bool> IsPaid, string Ticker, global::System.Nullable<int> TypeOfTradeId) {
            global::System.Data.SqlClient.SqlCommand command = ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[5]));
            if ((PremiumServiceTitle == null)) {
                command.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                command.Parameters[1].Value = ((string)(PremiumServiceTitle));
            }
            if ((PremiumServiceDescription == null)) {
                command.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                command.Parameters[2].Value = ((string)(PremiumServiceDescription));
            }
            if ((PremiumServiceDateTime.HasValue == true)) {
                command.Parameters[3].Value = ((System.DateTime)(PremiumServiceDateTime.Value));
            }
            else {
                command.Parameters[3].Value = global::System.DBNull.Value;
            }
            if ((IsActive.HasValue == true)) {
                command.Parameters[4].Value = ((bool)(IsActive.Value));
            }
            else {
                command.Parameters[4].Value = global::System.DBNull.Value;
            }
            if ((IsPaid.HasValue == true)) {
                command.Parameters[5].Value = ((bool)(IsPaid.Value));
            }
            else {
                command.Parameters[5].Value = global::System.DBNull.Value;
            }
            if ((Ticker == null)) {
                command.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                command.Parameters[6].Value = ((string)(Ticker));
            }
            if ((TypeOfTradeId.HasValue == true)) {
                command.Parameters[7].Value = ((int)(TypeOfTradeId.Value));
            }
            else {
                command.Parameters[7].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int InsertUser(string UserId, string Password, string FirstName, string LastName, string Address, string PhoneNumber, string State, string Country, global::System.Nullable<int> ZipCode, global::System.Nullable<bool> IsPaidSubscriber, global::System.Nullable<bool> IsAutoRenewal, global::System.Nullable<global::System.DateTime> RegistrationDate, global::System.Nullable<global::System.DateTime> SubscriptionStartDate, global::System.Nullable<global::System.DateTime> SubscriptionEndDate) {
            global::System.Data.SqlClient.SqlCommand command = ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[6]));
            if ((UserId == null)) {
                command.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                command.Parameters[1].Value = ((string)(UserId));
            }
            if ((Password == null)) {
                command.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                command.Parameters[2].Value = ((string)(Password));
            }
            if ((FirstName == null)) {
                command.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                command.Parameters[3].Value = ((string)(FirstName));
            }
            if ((LastName == null)) {
                command.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                command.Parameters[4].Value = ((string)(LastName));
            }
            if ((Address == null)) {
                command.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                command.Parameters[5].Value = ((string)(Address));
            }
            if ((PhoneNumber == null)) {
                command.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                command.Parameters[6].Value = ((string)(PhoneNumber));
            }
            if ((State == null)) {
                command.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                command.Parameters[7].Value = ((string)(State));
            }
            if ((Country == null)) {
                command.Parameters[8].Value = global::System.DBNull.Value;
            }
            else {
                command.Parameters[8].Value = ((string)(Country));
            }
            if ((ZipCode.HasValue == true)) {
                command.Parameters[9].Value = ((int)(ZipCode.Value));
            }
            else {
                command.Parameters[9].Value = global::System.DBNull.Value;
            }
            if ((IsPaidSubscriber.HasValue == true)) {
                command.Parameters[10].Value = ((bool)(IsPaidSubscriber.Value));
            }
            else {
                command.Parameters[10].Value = global::System.DBNull.Value;
            }
            if ((IsAutoRenewal.HasValue == true)) {
                command.Parameters[11].Value = ((bool)(IsAutoRenewal.Value));
            }
            else {
                command.Parameters[11].Value = global::System.DBNull.Value;
            }
            if ((RegistrationDate.HasValue == true)) {
                command.Parameters[12].Value = ((System.DateTime)(RegistrationDate.Value));
            }
            else {
                command.Parameters[12].Value = global::System.DBNull.Value;
            }
            if ((SubscriptionStartDate.HasValue == true)) {
                command.Parameters[13].Value = ((System.DateTime)(SubscriptionStartDate.Value));
            }
            else {
                command.Parameters[13].Value = global::System.DBNull.Value;
            }
            if ((SubscriptionEndDate.HasValue == true)) {
                command.Parameters[14].Value = ((System.DateTime)(SubscriptionEndDate.Value));
            }
            else {
                command.Parameters[14].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int InsertWatchOutNews(string WatchOutTitle, string WatchOutText, global::System.Nullable<global::System.DateTime> WatchOutDateTime, global::System.Nullable<bool> IsPaid, string Ticker) {
            global::System.Data.SqlClient.SqlCommand command = ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[7]));
            if ((WatchOutTitle == null)) {
                command.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                command.Parameters[1].Value = ((string)(WatchOutTitle));
            }
            if ((WatchOutText == null)) {
                command.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                command.Parameters[2].Value = ((string)(WatchOutText));
            }
            if ((WatchOutDateTime.HasValue == true)) {
                command.Parameters[3].Value = ((System.DateTime)(WatchOutDateTime.Value));
            }
            else {
                command.Parameters[3].Value = global::System.DBNull.Value;
            }
            if ((IsPaid.HasValue == true)) {
                command.Parameters[4].Value = ((bool)(IsPaid.Value));
            }
            else {
                command.Parameters[4].Value = global::System.DBNull.Value;
            }
            if ((Ticker == null)) {
                command.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                command.Parameters[5].Value = ((string)(Ticker));
            }
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int UI_EmailSubscription(string EmailAddress) {
            global::System.Data.SqlClient.SqlCommand command = ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[8]));
            if ((EmailAddress == null)) {
                command.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                command.Parameters[1].Value = ((string)(EmailAddress));
            }
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int UpdateEmailToSend(global::System.Nullable<int> SendEmailId, string EmailDescription, global::System.Nullable<bool> IsSubscribers, global::System.Nullable<int> IsEmailSent, global::System.Nullable<global::System.DateTime> EmailDateTime, string EmailSubject) {
            global::System.Data.SqlClient.SqlCommand command = ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[9]));
            if ((SendEmailId.HasValue == true)) {
                command.Parameters[1].Value = ((int)(SendEmailId.Value));
            }
            else {
                command.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((EmailDescription == null)) {
                command.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                command.Parameters[2].Value = ((string)(EmailDescription));
            }
            if ((IsSubscribers.HasValue == true)) {
                command.Parameters[3].Value = ((bool)(IsSubscribers.Value));
            }
            else {
                command.Parameters[3].Value = global::System.DBNull.Value;
            }
            if ((IsEmailSent.HasValue == true)) {
                command.Parameters[4].Value = ((int)(IsEmailSent.Value));
            }
            else {
                command.Parameters[4].Value = global::System.DBNull.Value;
            }
            if ((EmailDateTime.HasValue == true)) {
                command.Parameters[5].Value = ((System.DateTime)(EmailDateTime.Value));
            }
            else {
                command.Parameters[5].Value = global::System.DBNull.Value;
            }
            if ((EmailSubject == null)) {
                command.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                command.Parameters[6].Value = ((string)(EmailSubject));
            }
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int UpdateMarketCommentary(global::System.Nullable<int> MarketCommentaryID, string MarketCommentaryTitle, string MarketCommentaryDesc, global::System.Nullable<global::System.DateTime> MarketCommentaryDateTime, global::System.Nullable<bool> IsCommentaryActive) {
            global::System.Data.SqlClient.SqlCommand command = ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[10]));
            if ((MarketCommentaryID.HasValue == true)) {
                command.Parameters[1].Value = ((int)(MarketCommentaryID.Value));
            }
            else {
                command.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((MarketCommentaryTitle == null)) {
                command.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                command.Parameters[2].Value = ((string)(MarketCommentaryTitle));
            }
            if ((MarketCommentaryDesc == null)) {
                command.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                command.Parameters[3].Value = ((string)(MarketCommentaryDesc));
            }
            if ((MarketCommentaryDateTime.HasValue == true)) {
                command.Parameters[4].Value = ((System.DateTime)(MarketCommentaryDateTime.Value));
            }
            else {
                command.Parameters[4].Value = global::System.DBNull.Value;
            }
            if ((IsCommentaryActive.HasValue == true)) {
                command.Parameters[5].Value = ((bool)(IsCommentaryActive.Value));
            }
            else {
                command.Parameters[5].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int UpdateNewsAndViews(global::System.Nullable<int> NewsId, string NewsTitle, string NewsDescription, global::System.Nullable<global::System.DateTime> NewsDateTime, global::System.Nullable<bool> IsActive, global::System.Nullable<bool> IsPaid, string Ticker) {
            global::System.Data.SqlClient.SqlCommand command = ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[11]));
            if ((NewsId.HasValue == true)) {
                command.Parameters[1].Value = ((int)(NewsId.Value));
            }
            else {
                command.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((NewsTitle == null)) {
                command.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                command.Parameters[2].Value = ((string)(NewsTitle));
            }
            if ((NewsDescription == null)) {
                command.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                command.Parameters[3].Value = ((string)(NewsDescription));
            }
            if ((NewsDateTime.HasValue == true)) {
                command.Parameters[4].Value = ((System.DateTime)(NewsDateTime.Value));
            }
            else {
                command.Parameters[4].Value = global::System.DBNull.Value;
            }
            if ((IsActive.HasValue == true)) {
                command.Parameters[5].Value = ((bool)(IsActive.Value));
            }
            else {
                command.Parameters[5].Value = global::System.DBNull.Value;
            }
            if ((IsPaid.HasValue == true)) {
                command.Parameters[6].Value = ((bool)(IsPaid.Value));
            }
            else {
                command.Parameters[6].Value = global::System.DBNull.Value;
            }
            if ((Ticker == null)) {
                command.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                command.Parameters[7].Value = ((string)(Ticker));
            }
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int UpdateOrders(string UserId, global::System.Nullable<int> OrderId, string UniqueOrderId, string MonthsOfSubscription, global::System.Nullable<global::System.DateTime> PaymentDate, string VendorReferenceId, global::System.Nullable<global::System.DateTime> SubscriptionStartDate, global::System.Nullable<global::System.DateTime> SubscriptionEndDate) {
            global::System.Data.SqlClient.SqlCommand command = ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[12]));
            if ((UserId == null)) {
                command.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                command.Parameters[1].Value = ((string)(UserId));
            }
            if ((OrderId.HasValue == true)) {
                command.Parameters[2].Value = ((int)(OrderId.Value));
            }
            else {
                command.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((UniqueOrderId == null)) {
                command.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                command.Parameters[3].Value = ((string)(UniqueOrderId));
            }
            if ((MonthsOfSubscription == null)) {
                command.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                command.Parameters[4].Value = ((string)(MonthsOfSubscription));
            }
            if ((PaymentDate.HasValue == true)) {
                command.Parameters[5].Value = ((System.DateTime)(PaymentDate.Value));
            }
            else {
                command.Parameters[5].Value = global::System.DBNull.Value;
            }
            if ((VendorReferenceId == null)) {
                command.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                command.Parameters[6].Value = ((string)(VendorReferenceId));
            }
            if ((SubscriptionStartDate.HasValue == true)) {
                command.Parameters[7].Value = ((System.DateTime)(SubscriptionStartDate.Value));
            }
            else {
                command.Parameters[7].Value = global::System.DBNull.Value;
            }
            if ((SubscriptionEndDate.HasValue == true)) {
                command.Parameters[8].Value = ((System.DateTime)(SubscriptionEndDate.Value));
            }
            else {
                command.Parameters[8].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int UpdatePortfolio(global::System.Nullable<int> StockTransactionId, global::System.Nullable<int> PortfolioId, string CompanyName, string StockTicker, global::System.Nullable<int> BuyOrSellId, global::System.Nullable<int> Qty, global::System.Nullable<decimal> EntryPrice, global::System.Nullable<decimal> ExitPrice, global::System.Nullable<decimal> StopLoss, string Updates, global::System.Nullable<global::System.DateTime> UpdateDateTime, global::System.Nullable<global::System.DateTime> PortfolioEntryDate, global::System.Nullable<global::System.DateTime> PortfolioExitDate, string CallStatus, global::System.Nullable<bool> IsPartiallyExited) {
            global::System.Data.SqlClient.SqlCommand command = ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[13]));
            if ((StockTransactionId.HasValue == true)) {
                command.Parameters[1].Value = ((int)(StockTransactionId.Value));
            }
            else {
                command.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((PortfolioId.HasValue == true)) {
                command.Parameters[2].Value = ((int)(PortfolioId.Value));
            }
            else {
                command.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((CompanyName == null)) {
                command.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                command.Parameters[3].Value = ((string)(CompanyName));
            }
            if ((StockTicker == null)) {
                command.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                command.Parameters[4].Value = ((string)(StockTicker));
            }
            if ((BuyOrSellId.HasValue == true)) {
                command.Parameters[5].Value = ((int)(BuyOrSellId.Value));
            }
            else {
                command.Parameters[5].Value = global::System.DBNull.Value;
            }
            if ((Qty.HasValue == true)) {
                command.Parameters[6].Value = ((int)(Qty.Value));
            }
            else {
                command.Parameters[6].Value = global::System.DBNull.Value;
            }
            if ((EntryPrice.HasValue == true)) {
                command.Parameters[7].Value = ((decimal)(EntryPrice.Value));
            }
            else {
                command.Parameters[7].Value = global::System.DBNull.Value;
            }
            if ((ExitPrice.HasValue == true)) {
                command.Parameters[8].Value = ((decimal)(ExitPrice.Value));
            }
            else {
                command.Parameters[8].Value = global::System.DBNull.Value;
            }
            if ((StopLoss.HasValue == true)) {
                command.Parameters[9].Value = ((decimal)(StopLoss.Value));
            }
            else {
                command.Parameters[9].Value = global::System.DBNull.Value;
            }
            if ((Updates == null)) {
                command.Parameters[10].Value = global::System.DBNull.Value;
            }
            else {
                command.Parameters[10].Value = ((string)(Updates));
            }
            if ((UpdateDateTime.HasValue == true)) {
                command.Parameters[11].Value = ((System.DateTime)(UpdateDateTime.Value));
            }
            else {
                command.Parameters[11].Value = global::System.DBNull.Value;
            }
            if ((PortfolioEntryDate.HasValue == true)) {
                command.Parameters[12].Value = ((System.DateTime)(PortfolioEntryDate.Value));
            }
            else {
                command.Parameters[12].Value = global::System.DBNull.Value;
            }
            if ((PortfolioExitDate.HasValue == true)) {
                command.Parameters[13].Value = ((System.DateTime)(PortfolioExitDate.Value));
            }
            else {
                command.Parameters[13].Value = global::System.DBNull.Value;
            }
            if ((CallStatus == null)) {
                command.Parameters[14].Value = global::System.DBNull.Value;
            }
            else {
                command.Parameters[14].Value = ((string)(CallStatus));
            }
            if ((IsPartiallyExited.HasValue == true)) {
                command.Parameters[15].Value = ((bool)(IsPartiallyExited.Value));
            }
            else {
                command.Parameters[15].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int UpdatePremiumServices(global::System.Nullable<int> PremiumServiceId, string PremiumServiceTitle, string PremiumServiceDescription, global::System.Nullable<global::System.DateTime> PremiumServiceDateTime, global::System.Nullable<bool> IsActive, global::System.Nullable<bool> IsPaid, string Ticker, global::System.Nullable<int> TypeOfTradeId) {
            global::System.Data.SqlClient.SqlCommand command = ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[14]));
            if ((PremiumServiceId.HasValue == true)) {
                command.Parameters[1].Value = ((int)(PremiumServiceId.Value));
            }
            else {
                command.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((PremiumServiceTitle == null)) {
                command.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                command.Parameters[2].Value = ((string)(PremiumServiceTitle));
            }
            if ((PremiumServiceDescription == null)) {
                command.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                command.Parameters[3].Value = ((string)(PremiumServiceDescription));
            }
            if ((PremiumServiceDateTime.HasValue == true)) {
                command.Parameters[4].Value = ((System.DateTime)(PremiumServiceDateTime.Value));
            }
            else {
                command.Parameters[4].Value = global::System.DBNull.Value;
            }
            if ((IsActive.HasValue == true)) {
                command.Parameters[5].Value = ((bool)(IsActive.Value));
            }
            else {
                command.Parameters[5].Value = global::System.DBNull.Value;
            }
            if ((IsPaid.HasValue == true)) {
                command.Parameters[6].Value = ((bool)(IsPaid.Value));
            }
            else {
                command.Parameters[6].Value = global::System.DBNull.Value;
            }
            if ((Ticker == null)) {
                command.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                command.Parameters[7].Value = ((string)(Ticker));
            }
            if ((TypeOfTradeId.HasValue == true)) {
                command.Parameters[8].Value = ((int)(TypeOfTradeId.Value));
            }
            else {
                command.Parameters[8].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int UpdateUser(string UserId, string Password, string FirstName, string LastName, string Address, string PhoneNumber, string State, string Country, global::System.Nullable<int> ZipCode, global::System.Nullable<bool> IsPaidSubscriber, global::System.Nullable<bool> IsAutoRenewal, global::System.Nullable<global::System.DateTime> RegistrationDate, global::System.Nullable<global::System.DateTime> SubscriptionStartDate, global::System.Nullable<global::System.DateTime> SubscriptionEndDate) {
            global::System.Data.SqlClient.SqlCommand command = ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[15]));
            if ((UserId == null)) {
                command.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                command.Parameters[1].Value = ((string)(UserId));
            }
            if ((Password == null)) {
                command.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                command.Parameters[2].Value = ((string)(Password));
            }
            if ((FirstName == null)) {
                command.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                command.Parameters[3].Value = ((string)(FirstName));
            }
            if ((LastName == null)) {
                command.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                command.Parameters[4].Value = ((string)(LastName));
            }
            if ((Address == null)) {
                command.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                command.Parameters[5].Value = ((string)(Address));
            }
            if ((PhoneNumber == null)) {
                command.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                command.Parameters[6].Value = ((string)(PhoneNumber));
            }
            if ((State == null)) {
                command.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                command.Parameters[7].Value = ((string)(State));
            }
            if ((Country == null)) {
                command.Parameters[8].Value = global::System.DBNull.Value;
            }
            else {
                command.Parameters[8].Value = ((string)(Country));
            }
            if ((ZipCode.HasValue == true)) {
                command.Parameters[9].Value = ((int)(ZipCode.Value));
            }
            else {
                command.Parameters[9].Value = global::System.DBNull.Value;
            }
            if ((IsPaidSubscriber.HasValue == true)) {
                command.Parameters[10].Value = ((bool)(IsPaidSubscriber.Value));
            }
            else {
                command.Parameters[10].Value = global::System.DBNull.Value;
            }
            if ((IsAutoRenewal.HasValue == true)) {
                command.Parameters[11].Value = ((bool)(IsAutoRenewal.Value));
            }
            else {
                command.Parameters[11].Value = global::System.DBNull.Value;
            }
            if ((RegistrationDate.HasValue == true)) {
                command.Parameters[12].Value = ((System.DateTime)(RegistrationDate.Value));
            }
            else {
                command.Parameters[12].Value = global::System.DBNull.Value;
            }
            if ((SubscriptionStartDate.HasValue == true)) {
                command.Parameters[13].Value = ((System.DateTime)(SubscriptionStartDate.Value));
            }
            else {
                command.Parameters[13].Value = global::System.DBNull.Value;
            }
            if ((SubscriptionEndDate.HasValue == true)) {
                command.Parameters[14].Value = ((System.DateTime)(SubscriptionEndDate.Value));
            }
            else {
                command.Parameters[14].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int UpdateWatchOutNews(global::System.Nullable<int> WatchOutId, string WatchOutTitle, string WatchOutText, global::System.Nullable<global::System.DateTime> WatchOutDateTime, global::System.Nullable<bool> IsPaid, string Ticker) {
            global::System.Data.SqlClient.SqlCommand command = ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[16]));
            if ((WatchOutId.HasValue == true)) {
                command.Parameters[1].Value = ((int)(WatchOutId.Value));
            }
            else {
                command.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((WatchOutTitle == null)) {
                command.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                command.Parameters[2].Value = ((string)(WatchOutTitle));
            }
            if ((WatchOutText == null)) {
                command.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                command.Parameters[3].Value = ((string)(WatchOutText));
            }
            if ((WatchOutDateTime.HasValue == true)) {
                command.Parameters[4].Value = ((System.DateTime)(WatchOutDateTime.Value));
            }
            else {
                command.Parameters[4].Value = global::System.DBNull.Value;
            }
            if ((IsPaid.HasValue == true)) {
                command.Parameters[5].Value = ((bool)(IsPaid.Value));
            }
            else {
                command.Parameters[5].Value = global::System.DBNull.Value;
            }
            if ((Ticker == null)) {
                command.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                command.Parameters[6].Value = ((string)(Ticker));
            }
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
    }
    
    /// <summary>
    ///TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD" +
        "esigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapterManager")]
    public partial class TableAdapterManager : global::System.ComponentModel.Component {
        
        private UpdateOrderOption _updateOrder;
        
        private AdminCredentialsTableAdapter _adminCredentialsTableAdapter;
        
        private BuyOrSellLookUpTableAdapter _buyOrSellLookUpTableAdapter;
        
        private EmailNewsletterTableAdapter _emailNewsletterTableAdapter;
        
        private EmailSentTableAdapter _emailSentTableAdapter;
        
        private MarketCommentaryTableAdapter _marketCommentaryTableAdapter;
        
        private NewsAndViewsTableAdapter _newsAndViewsTableAdapter;
        
        private OrdersTableAdapter _ordersTableAdapter;
        
        private PortfolioLookUpTableAdapter _portfolioLookUpTableAdapter;
        
        private PortfolioTransactionsTableAdapter _portfolioTransactionsTableAdapter;
        
        private PremiumServicesTableAdapter _premiumServicesTableAdapter;
        
        private RecommendationsTableAdapter _recommendationsTableAdapter;
        
        private SubscriptionTableAdapter _subscriptionTableAdapter;
        
        private SubscriptionLookUpTableAdapter _subscriptionLookUpTableAdapter;
        
        private TradeTypesTableAdapter _tradeTypesTableAdapter;
        
        private UsersTableAdapter _usersTableAdapter;
        
        private WatchOutTableAdapter _watchOutTableAdapter;
        
        private bool _backupDataSetBeforeUpdate;
        
        private global::System.Data.IDbConnection _connection;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public UpdateOrderOption UpdateOrder {
            get {
                return this._updateOrder;
            }
            set {
                this._updateOrder = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public AdminCredentialsTableAdapter AdminCredentialsTableAdapter {
            get {
                return this._adminCredentialsTableAdapter;
            }
            set {
                this._adminCredentialsTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public BuyOrSellLookUpTableAdapter BuyOrSellLookUpTableAdapter {
            get {
                return this._buyOrSellLookUpTableAdapter;
            }
            set {
                this._buyOrSellLookUpTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public EmailNewsletterTableAdapter EmailNewsletterTableAdapter {
            get {
                return this._emailNewsletterTableAdapter;
            }
            set {
                this._emailNewsletterTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public EmailSentTableAdapter EmailSentTableAdapter {
            get {
                return this._emailSentTableAdapter;
            }
            set {
                this._emailSentTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public MarketCommentaryTableAdapter MarketCommentaryTableAdapter {
            get {
                return this._marketCommentaryTableAdapter;
            }
            set {
                this._marketCommentaryTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public NewsAndViewsTableAdapter NewsAndViewsTableAdapter {
            get {
                return this._newsAndViewsTableAdapter;
            }
            set {
                this._newsAndViewsTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public OrdersTableAdapter OrdersTableAdapter {
            get {
                return this._ordersTableAdapter;
            }
            set {
                this._ordersTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public PortfolioLookUpTableAdapter PortfolioLookUpTableAdapter {
            get {
                return this._portfolioLookUpTableAdapter;
            }
            set {
                this._portfolioLookUpTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public PortfolioTransactionsTableAdapter PortfolioTransactionsTableAdapter {
            get {
                return this._portfolioTransactionsTableAdapter;
            }
            set {
                this._portfolioTransactionsTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public PremiumServicesTableAdapter PremiumServicesTableAdapter {
            get {
                return this._premiumServicesTableAdapter;
            }
            set {
                this._premiumServicesTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public RecommendationsTableAdapter RecommendationsTableAdapter {
            get {
                return this._recommendationsTableAdapter;
            }
            set {
                this._recommendationsTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public SubscriptionTableAdapter SubscriptionTableAdapter {
            get {
                return this._subscriptionTableAdapter;
            }
            set {
                this._subscriptionTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public SubscriptionLookUpTableAdapter SubscriptionLookUpTableAdapter {
            get {
                return this._subscriptionLookUpTableAdapter;
            }
            set {
                this._subscriptionLookUpTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public TradeTypesTableAdapter TradeTypesTableAdapter {
            get {
                return this._tradeTypesTableAdapter;
            }
            set {
                this._tradeTypesTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public UsersTableAdapter UsersTableAdapter {
            get {
                return this._usersTableAdapter;
            }
            set {
                this._usersTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public WatchOutTableAdapter WatchOutTableAdapter {
            get {
                return this._watchOutTableAdapter;
            }
            set {
                this._watchOutTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool BackupDataSetBeforeUpdate {
            get {
                return this._backupDataSetBeforeUpdate;
            }
            set {
                this._backupDataSetBeforeUpdate = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        public global::System.Data.IDbConnection Connection {
            get {
                if ((this._connection != null)) {
                    return this._connection;
                }
                if (((this._adminCredentialsTableAdapter != null) 
                            && (this._adminCredentialsTableAdapter.Connection != null))) {
                    return this._adminCredentialsTableAdapter.Connection;
                }
                if (((this._buyOrSellLookUpTableAdapter != null) 
                            && (this._buyOrSellLookUpTableAdapter.Connection != null))) {
                    return this._buyOrSellLookUpTableAdapter.Connection;
                }
                if (((this._emailNewsletterTableAdapter != null) 
                            && (this._emailNewsletterTableAdapter.Connection != null))) {
                    return this._emailNewsletterTableAdapter.Connection;
                }
                if (((this._emailSentTableAdapter != null) 
                            && (this._emailSentTableAdapter.Connection != null))) {
                    return this._emailSentTableAdapter.Connection;
                }
                if (((this._marketCommentaryTableAdapter != null) 
                            && (this._marketCommentaryTableAdapter.Connection != null))) {
                    return this._marketCommentaryTableAdapter.Connection;
                }
                if (((this._newsAndViewsTableAdapter != null) 
                            && (this._newsAndViewsTableAdapter.Connection != null))) {
                    return this._newsAndViewsTableAdapter.Connection;
                }
                if (((this._ordersTableAdapter != null) 
                            && (this._ordersTableAdapter.Connection != null))) {
                    return this._ordersTableAdapter.Connection;
                }
                if (((this._portfolioLookUpTableAdapter != null) 
                            && (this._portfolioLookUpTableAdapter.Connection != null))) {
                    return this._portfolioLookUpTableAdapter.Connection;
                }
                if (((this._portfolioTransactionsTableAdapter != null) 
                            && (this._portfolioTransactionsTableAdapter.Connection != null))) {
                    return this._portfolioTransactionsTableAdapter.Connection;
                }
                if (((this._premiumServicesTableAdapter != null) 
                            && (this._premiumServicesTableAdapter.Connection != null))) {
                    return this._premiumServicesTableAdapter.Connection;
                }
                if (((this._recommendationsTableAdapter != null) 
                            && (this._recommendationsTableAdapter.Connection != null))) {
                    return this._recommendationsTableAdapter.Connection;
                }
                if (((this._subscriptionTableAdapter != null) 
                            && (this._subscriptionTableAdapter.Connection != null))) {
                    return this._subscriptionTableAdapter.Connection;
                }
                if (((this._subscriptionLookUpTableAdapter != null) 
                            && (this._subscriptionLookUpTableAdapter.Connection != null))) {
                    return this._subscriptionLookUpTableAdapter.Connection;
                }
                if (((this._tradeTypesTableAdapter != null) 
                            && (this._tradeTypesTableAdapter.Connection != null))) {
                    return this._tradeTypesTableAdapter.Connection;
                }
                if (((this._usersTableAdapter != null) 
                            && (this._usersTableAdapter.Connection != null))) {
                    return this._usersTableAdapter.Connection;
                }
                if (((this._watchOutTableAdapter != null) 
                            && (this._watchOutTableAdapter.Connection != null))) {
                    return this._watchOutTableAdapter.Connection;
                }
                return null;
            }
            set {
                this._connection = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        public int TableAdapterInstanceCount {
            get {
                int count = 0;
                if ((this._adminCredentialsTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._buyOrSellLookUpTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._emailNewsletterTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._emailSentTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._marketCommentaryTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._newsAndViewsTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._ordersTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._portfolioLookUpTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._portfolioTransactionsTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._premiumServicesTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._recommendationsTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._subscriptionTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._subscriptionLookUpTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._tradeTypesTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._usersTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._watchOutTableAdapter != null)) {
                    count = (count + 1);
                }
                return count;
            }
        }
        
        /// <summary>
        ///Update rows in top-down order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private int UpdateUpdatedRows(USAdvisoryDataSet dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            int result = 0;
            if ((this._tradeTypesTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.TradeTypes.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._tradeTypesTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._usersTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.Users.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._usersTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._buyOrSellLookUpTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.BuyOrSellLookUp.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._buyOrSellLookUpTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._subscriptionLookUpTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.SubscriptionLookUp.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._subscriptionLookUpTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._portfolioLookUpTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.PortfolioLookUp.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._portfolioLookUpTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._ordersTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.Orders.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._ordersTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._premiumServicesTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.PremiumServices.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._premiumServicesTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._portfolioTransactionsTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.PortfolioTransactions.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._portfolioTransactionsTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._newsAndViewsTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.NewsAndViews.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._newsAndViewsTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._emailNewsletterTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.EmailNewsletter.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._emailNewsletterTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._adminCredentialsTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.AdminCredentials.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._adminCredentialsTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._marketCommentaryTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.MarketCommentary.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._marketCommentaryTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._emailSentTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.EmailSent.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._emailSentTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._recommendationsTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.Recommendations.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._recommendationsTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._watchOutTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.WatchOut.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._watchOutTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._subscriptionTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.Subscription.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._subscriptionTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            return result;
        }
        
        /// <summary>
        ///Insert rows in top-down order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private int UpdateInsertedRows(USAdvisoryDataSet dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            int result = 0;
            if ((this._tradeTypesTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.TradeTypes.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._tradeTypesTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._usersTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.Users.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._usersTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._buyOrSellLookUpTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.BuyOrSellLookUp.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._buyOrSellLookUpTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._subscriptionLookUpTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.SubscriptionLookUp.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._subscriptionLookUpTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._portfolioLookUpTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.PortfolioLookUp.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._portfolioLookUpTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._ordersTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.Orders.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._ordersTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._premiumServicesTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.PremiumServices.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._premiumServicesTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._portfolioTransactionsTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.PortfolioTransactions.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._portfolioTransactionsTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._newsAndViewsTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.NewsAndViews.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._newsAndViewsTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._emailNewsletterTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.EmailNewsletter.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._emailNewsletterTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._adminCredentialsTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.AdminCredentials.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._adminCredentialsTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._marketCommentaryTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.MarketCommentary.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._marketCommentaryTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._emailSentTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.EmailSent.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._emailSentTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._recommendationsTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.Recommendations.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._recommendationsTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._watchOutTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.WatchOut.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._watchOutTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._subscriptionTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.Subscription.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._subscriptionTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            return result;
        }
        
        /// <summary>
        ///Delete rows in bottom-up order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private int UpdateDeletedRows(USAdvisoryDataSet dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows) {
            int result = 0;
            if ((this._subscriptionTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.Subscription.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._subscriptionTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._watchOutTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.WatchOut.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._watchOutTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._recommendationsTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.Recommendations.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._recommendationsTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._emailSentTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.EmailSent.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._emailSentTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._marketCommentaryTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.MarketCommentary.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._marketCommentaryTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._adminCredentialsTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.AdminCredentials.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._adminCredentialsTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._emailNewsletterTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.EmailNewsletter.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._emailNewsletterTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._newsAndViewsTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.NewsAndViews.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._newsAndViewsTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._portfolioTransactionsTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.PortfolioTransactions.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._portfolioTransactionsTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._premiumServicesTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.PremiumServices.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._premiumServicesTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._ordersTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.Orders.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._ordersTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._portfolioLookUpTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.PortfolioLookUp.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._portfolioLookUpTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._subscriptionLookUpTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.SubscriptionLookUp.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._subscriptionLookUpTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._buyOrSellLookUpTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.BuyOrSellLookUp.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._buyOrSellLookUpTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._usersTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.Users.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._usersTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._tradeTypesTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.TradeTypes.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._tradeTypesTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            return result;
        }
        
        /// <summary>
        ///Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.DataRow[] GetRealUpdatedRows(global::System.Data.DataRow[] updatedRows, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            if (((updatedRows == null) 
                        || (updatedRows.Length < 1))) {
                return updatedRows;
            }
            if (((allAddedRows == null) 
                        || (allAddedRows.Count < 1))) {
                return updatedRows;
            }
            global::System.Collections.Generic.List<global::System.Data.DataRow> realUpdatedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            for (int i = 0; (i < updatedRows.Length); i = (i + 1)) {
                global::System.Data.DataRow row = updatedRows[i];
                if ((allAddedRows.Contains(row) == false)) {
                    realUpdatedRows.Add(row);
                }
            }
            return realUpdatedRows.ToArray();
        }
        
        /// <summary>
        ///Update all changes to the dataset.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual int UpdateAll(USAdvisoryDataSet dataSet) {
            if ((dataSet == null)) {
                throw new global::System.ArgumentNullException("dataSet");
            }
            if ((dataSet.HasChanges() == false)) {
                return 0;
            }
            if (((this._adminCredentialsTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._adminCredentialsTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._buyOrSellLookUpTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._buyOrSellLookUpTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._emailNewsletterTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._emailNewsletterTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._emailSentTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._emailSentTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._marketCommentaryTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._marketCommentaryTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._newsAndViewsTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._newsAndViewsTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._ordersTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._ordersTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._portfolioLookUpTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._portfolioLookUpTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._portfolioTransactionsTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._portfolioTransactionsTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._premiumServicesTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._premiumServicesTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._recommendationsTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._recommendationsTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._subscriptionTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._subscriptionTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._subscriptionLookUpTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._subscriptionLookUpTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._tradeTypesTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._tradeTypesTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._usersTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._usersTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._watchOutTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._watchOutTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            global::System.Data.IDbConnection workConnection = this.Connection;
            if ((workConnection == null)) {
                throw new global::System.ApplicationException("TableAdapterManager contains no connection information. Set each TableAdapterMana" +
                        "ger TableAdapter property to a valid TableAdapter instance.");
            }
            bool workConnOpened = false;
            if (((workConnection.State & global::System.Data.ConnectionState.Broken) 
                        == global::System.Data.ConnectionState.Broken)) {
                workConnection.Close();
            }
            if ((workConnection.State == global::System.Data.ConnectionState.Closed)) {
                workConnection.Open();
                workConnOpened = true;
            }
            global::System.Data.IDbTransaction workTransaction = workConnection.BeginTransaction();
            if ((workTransaction == null)) {
                throw new global::System.ApplicationException("The transaction cannot begin. The current data connection does not support transa" +
                        "ctions or the current state is not allowing the transaction to begin.");
            }
            global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            global::System.Collections.Generic.List<global::System.Data.Common.DataAdapter> adaptersWithAcceptChangesDuringUpdate = new global::System.Collections.Generic.List<global::System.Data.Common.DataAdapter>();
            global::System.Collections.Generic.Dictionary<object, global::System.Data.IDbConnection> revertConnections = new global::System.Collections.Generic.Dictionary<object, global::System.Data.IDbConnection>();
            int result = 0;
            global::System.Data.DataSet backupDataSet = null;
            if (this.BackupDataSetBeforeUpdate) {
                backupDataSet = new global::System.Data.DataSet();
                backupDataSet.Merge(dataSet);
            }
            try {
                // ---- Prepare for update -----------
                //
                if ((this._adminCredentialsTableAdapter != null)) {
                    revertConnections.Add(this._adminCredentialsTableAdapter, this._adminCredentialsTableAdapter.Connection);
                    this._adminCredentialsTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._adminCredentialsTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._adminCredentialsTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._adminCredentialsTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._adminCredentialsTableAdapter.Adapter);
                    }
                }
                if ((this._buyOrSellLookUpTableAdapter != null)) {
                    revertConnections.Add(this._buyOrSellLookUpTableAdapter, this._buyOrSellLookUpTableAdapter.Connection);
                    this._buyOrSellLookUpTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._buyOrSellLookUpTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._buyOrSellLookUpTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._buyOrSellLookUpTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._buyOrSellLookUpTableAdapter.Adapter);
                    }
                }
                if ((this._emailNewsletterTableAdapter != null)) {
                    revertConnections.Add(this._emailNewsletterTableAdapter, this._emailNewsletterTableAdapter.Connection);
                    this._emailNewsletterTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._emailNewsletterTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._emailNewsletterTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._emailNewsletterTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._emailNewsletterTableAdapter.Adapter);
                    }
                }
                if ((this._emailSentTableAdapter != null)) {
                    revertConnections.Add(this._emailSentTableAdapter, this._emailSentTableAdapter.Connection);
                    this._emailSentTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._emailSentTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._emailSentTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._emailSentTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._emailSentTableAdapter.Adapter);
                    }
                }
                if ((this._marketCommentaryTableAdapter != null)) {
                    revertConnections.Add(this._marketCommentaryTableAdapter, this._marketCommentaryTableAdapter.Connection);
                    this._marketCommentaryTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._marketCommentaryTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._marketCommentaryTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._marketCommentaryTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._marketCommentaryTableAdapter.Adapter);
                    }
                }
                if ((this._newsAndViewsTableAdapter != null)) {
                    revertConnections.Add(this._newsAndViewsTableAdapter, this._newsAndViewsTableAdapter.Connection);
                    this._newsAndViewsTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._newsAndViewsTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._newsAndViewsTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._newsAndViewsTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._newsAndViewsTableAdapter.Adapter);
                    }
                }
                if ((this._ordersTableAdapter != null)) {
                    revertConnections.Add(this._ordersTableAdapter, this._ordersTableAdapter.Connection);
                    this._ordersTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._ordersTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._ordersTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._ordersTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._ordersTableAdapter.Adapter);
                    }
                }
                if ((this._portfolioLookUpTableAdapter != null)) {
                    revertConnections.Add(this._portfolioLookUpTableAdapter, this._portfolioLookUpTableAdapter.Connection);
                    this._portfolioLookUpTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._portfolioLookUpTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._portfolioLookUpTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._portfolioLookUpTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._portfolioLookUpTableAdapter.Adapter);
                    }
                }
                if ((this._portfolioTransactionsTableAdapter != null)) {
                    revertConnections.Add(this._portfolioTransactionsTableAdapter, this._portfolioTransactionsTableAdapter.Connection);
                    this._portfolioTransactionsTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._portfolioTransactionsTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._portfolioTransactionsTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._portfolioTransactionsTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._portfolioTransactionsTableAdapter.Adapter);
                    }
                }
                if ((this._premiumServicesTableAdapter != null)) {
                    revertConnections.Add(this._premiumServicesTableAdapter, this._premiumServicesTableAdapter.Connection);
                    this._premiumServicesTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._premiumServicesTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._premiumServicesTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._premiumServicesTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._premiumServicesTableAdapter.Adapter);
                    }
                }
                if ((this._recommendationsTableAdapter != null)) {
                    revertConnections.Add(this._recommendationsTableAdapter, this._recommendationsTableAdapter.Connection);
                    this._recommendationsTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._recommendationsTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._recommendationsTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._recommendationsTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._recommendationsTableAdapter.Adapter);
                    }
                }
                if ((this._subscriptionTableAdapter != null)) {
                    revertConnections.Add(this._subscriptionTableAdapter, this._subscriptionTableAdapter.Connection);
                    this._subscriptionTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._subscriptionTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._subscriptionTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._subscriptionTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._subscriptionTableAdapter.Adapter);
                    }
                }
                if ((this._subscriptionLookUpTableAdapter != null)) {
                    revertConnections.Add(this._subscriptionLookUpTableAdapter, this._subscriptionLookUpTableAdapter.Connection);
                    this._subscriptionLookUpTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._subscriptionLookUpTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._subscriptionLookUpTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._subscriptionLookUpTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._subscriptionLookUpTableAdapter.Adapter);
                    }
                }
                if ((this._tradeTypesTableAdapter != null)) {
                    revertConnections.Add(this._tradeTypesTableAdapter, this._tradeTypesTableAdapter.Connection);
                    this._tradeTypesTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._tradeTypesTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._tradeTypesTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._tradeTypesTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._tradeTypesTableAdapter.Adapter);
                    }
                }
                if ((this._usersTableAdapter != null)) {
                    revertConnections.Add(this._usersTableAdapter, this._usersTableAdapter.Connection);
                    this._usersTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._usersTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._usersTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._usersTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._usersTableAdapter.Adapter);
                    }
                }
                if ((this._watchOutTableAdapter != null)) {
                    revertConnections.Add(this._watchOutTableAdapter, this._watchOutTableAdapter.Connection);
                    this._watchOutTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._watchOutTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._watchOutTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._watchOutTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._watchOutTableAdapter.Adapter);
                    }
                }
                // 
                //---- Perform updates -----------
                //
                if ((this.UpdateOrder == UpdateOrderOption.UpdateInsertDelete)) {
                    result = (result + this.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows));
                    result = (result + this.UpdateInsertedRows(dataSet, allAddedRows));
                }
                else {
                    result = (result + this.UpdateInsertedRows(dataSet, allAddedRows));
                    result = (result + this.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows));
                }
                result = (result + this.UpdateDeletedRows(dataSet, allChangedRows));
                // 
                //---- Commit updates -----------
                //
                workTransaction.Commit();
                if ((0 < allAddedRows.Count)) {
                    global::System.Data.DataRow[] rows = new System.Data.DataRow[allAddedRows.Count];
                    allAddedRows.CopyTo(rows);
                    for (int i = 0; (i < rows.Length); i = (i + 1)) {
                        global::System.Data.DataRow row = rows[i];
                        row.AcceptChanges();
                    }
                }
                if ((0 < allChangedRows.Count)) {
                    global::System.Data.DataRow[] rows = new System.Data.DataRow[allChangedRows.Count];
                    allChangedRows.CopyTo(rows);
                    for (int i = 0; (i < rows.Length); i = (i + 1)) {
                        global::System.Data.DataRow row = rows[i];
                        row.AcceptChanges();
                    }
                }
            }
            catch (global::System.Exception ex) {
                workTransaction.Rollback();
                // ---- Restore the dataset -----------
                if (this.BackupDataSetBeforeUpdate) {
                    global::System.Diagnostics.Debug.Assert((backupDataSet != null));
                    dataSet.Clear();
                    dataSet.Merge(backupDataSet);
                }
                else {
                    if ((0 < allAddedRows.Count)) {
                        global::System.Data.DataRow[] rows = new System.Data.DataRow[allAddedRows.Count];
                        allAddedRows.CopyTo(rows);
                        for (int i = 0; (i < rows.Length); i = (i + 1)) {
                            global::System.Data.DataRow row = rows[i];
                            row.AcceptChanges();
                            row.SetAdded();
                        }
                    }
                }
                throw ex;
            }
            finally {
                if (workConnOpened) {
                    workConnection.Close();
                }
                if ((this._adminCredentialsTableAdapter != null)) {
                    this._adminCredentialsTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._adminCredentialsTableAdapter]));
                    this._adminCredentialsTableAdapter.Transaction = null;
                }
                if ((this._buyOrSellLookUpTableAdapter != null)) {
                    this._buyOrSellLookUpTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._buyOrSellLookUpTableAdapter]));
                    this._buyOrSellLookUpTableAdapter.Transaction = null;
                }
                if ((this._emailNewsletterTableAdapter != null)) {
                    this._emailNewsletterTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._emailNewsletterTableAdapter]));
                    this._emailNewsletterTableAdapter.Transaction = null;
                }
                if ((this._emailSentTableAdapter != null)) {
                    this._emailSentTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._emailSentTableAdapter]));
                    this._emailSentTableAdapter.Transaction = null;
                }
                if ((this._marketCommentaryTableAdapter != null)) {
                    this._marketCommentaryTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._marketCommentaryTableAdapter]));
                    this._marketCommentaryTableAdapter.Transaction = null;
                }
                if ((this._newsAndViewsTableAdapter != null)) {
                    this._newsAndViewsTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._newsAndViewsTableAdapter]));
                    this._newsAndViewsTableAdapter.Transaction = null;
                }
                if ((this._ordersTableAdapter != null)) {
                    this._ordersTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._ordersTableAdapter]));
                    this._ordersTableAdapter.Transaction = null;
                }
                if ((this._portfolioLookUpTableAdapter != null)) {
                    this._portfolioLookUpTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._portfolioLookUpTableAdapter]));
                    this._portfolioLookUpTableAdapter.Transaction = null;
                }
                if ((this._portfolioTransactionsTableAdapter != null)) {
                    this._portfolioTransactionsTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._portfolioTransactionsTableAdapter]));
                    this._portfolioTransactionsTableAdapter.Transaction = null;
                }
                if ((this._premiumServicesTableAdapter != null)) {
                    this._premiumServicesTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._premiumServicesTableAdapter]));
                    this._premiumServicesTableAdapter.Transaction = null;
                }
                if ((this._recommendationsTableAdapter != null)) {
                    this._recommendationsTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._recommendationsTableAdapter]));
                    this._recommendationsTableAdapter.Transaction = null;
                }
                if ((this._subscriptionTableAdapter != null)) {
                    this._subscriptionTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._subscriptionTableAdapter]));
                    this._subscriptionTableAdapter.Transaction = null;
                }
                if ((this._subscriptionLookUpTableAdapter != null)) {
                    this._subscriptionLookUpTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._subscriptionLookUpTableAdapter]));
                    this._subscriptionLookUpTableAdapter.Transaction = null;
                }
                if ((this._tradeTypesTableAdapter != null)) {
                    this._tradeTypesTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._tradeTypesTableAdapter]));
                    this._tradeTypesTableAdapter.Transaction = null;
                }
                if ((this._usersTableAdapter != null)) {
                    this._usersTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._usersTableAdapter]));
                    this._usersTableAdapter.Transaction = null;
                }
                if ((this._watchOutTableAdapter != null)) {
                    this._watchOutTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._watchOutTableAdapter]));
                    this._watchOutTableAdapter.Transaction = null;
                }
                if ((0 < adaptersWithAcceptChangesDuringUpdate.Count)) {
                    global::System.Data.Common.DataAdapter[] adapters = new System.Data.Common.DataAdapter[adaptersWithAcceptChangesDuringUpdate.Count];
                    adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters);
                    for (int i = 0; (i < adapters.Length); i = (i + 1)) {
                        global::System.Data.Common.DataAdapter adapter = adapters[i];
                        adapter.AcceptChangesDuringUpdate = true;
                    }
                }
            }
            return result;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected virtual void SortSelfReferenceRows(global::System.Data.DataRow[] rows, global::System.Data.DataRelation relation, bool childFirst) {
            global::System.Array.Sort<global::System.Data.DataRow>(rows, new SelfReferenceComparer(relation, childFirst));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected virtual bool MatchTableAdapterConnection(global::System.Data.IDbConnection inputConnection) {
            if ((this._connection != null)) {
                return true;
            }
            if (((this.Connection == null) 
                        || (inputConnection == null))) {
                return true;
            }
            if (string.Equals(this.Connection.ConnectionString, inputConnection.ConnectionString, global::System.StringComparison.Ordinal)) {
                return true;
            }
            return false;
        }
        
        /// <summary>
        ///Update Order Option
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public enum UpdateOrderOption {
            
            InsertUpdateDelete = 0,
            
            UpdateInsertDelete = 1,
        }
        
        /// <summary>
        ///Used to sort self-referenced table's rows
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        private class SelfReferenceComparer : object, global::System.Collections.Generic.IComparer<global::System.Data.DataRow> {
            
            private global::System.Data.DataRelation _relation;
            
            private int _childFirst;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SelfReferenceComparer(global::System.Data.DataRelation relation, bool childFirst) {
                this._relation = relation;
                if (childFirst) {
                    this._childFirst = -1;
                }
                else {
                    this._childFirst = 1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool IsChildAndParent(global::System.Data.DataRow child, global::System.Data.DataRow parent) {
                global::System.Diagnostics.Debug.Assert((child != null));
                global::System.Diagnostics.Debug.Assert((parent != null));
                global::System.Data.DataRow newParent = child.GetParentRow(this._relation, global::System.Data.DataRowVersion.Default);
                for (
                ; ((newParent != null) 
                            && ((object.ReferenceEquals(newParent, child) == false) 
                            && (object.ReferenceEquals(newParent, parent) == false))); 
                ) {
                    newParent = newParent.GetParentRow(this._relation, global::System.Data.DataRowVersion.Default);
                }
                if ((newParent == null)) {
                    for (newParent = child.GetParentRow(this._relation, global::System.Data.DataRowVersion.Original); ((newParent != null) 
                                && ((object.ReferenceEquals(newParent, child) == false) 
                                && (object.ReferenceEquals(newParent, parent) == false))); 
                    ) {
                        newParent = newParent.GetParentRow(this._relation, global::System.Data.DataRowVersion.Original);
                    }
                }
                if (object.ReferenceEquals(newParent, parent)) {
                    return true;
                }
                return false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Compare(global::System.Data.DataRow row1, global::System.Data.DataRow row2) {
                if (object.ReferenceEquals(row1, row2)) {
                    return 0;
                }
                if ((row1 == null)) {
                    return -1;
                }
                if ((row2 == null)) {
                    return 1;
                }

                // Is row1 the child or grandchild of row2
                if (this.IsChildAndParent(row1, row2)) {
                    return this._childFirst;
                }

                // Is row2 the child or grandchild of row1
                if (this.IsChildAndParent(row2, row1)) {
                    return (-1 * this._childFirst);
                }
                return 0;
            }
        }
    }
}

#pragma warning restore 1591